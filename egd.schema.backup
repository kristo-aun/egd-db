--
-- PostgreSQL database dump
--

-- Dumped from database version 9.3.6
-- Dumped by pg_dump version 9.3.6
-- Started on 2015-04-16 23:01:14 EEST

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- TOC entry 6 (class 2615 OID 509542)
-- Name: ac; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA ac;


ALTER SCHEMA ac OWNER TO postgres;

--
-- TOC entry 7 (class 2615 OID 509544)
-- Name: core; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA core;


ALTER SCHEMA core OWNER TO postgres;

--
-- TOC entry 8 (class 2615 OID 509545)
-- Name: estwn; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA estwn;


ALTER SCHEMA estwn OWNER TO postgres;

--
-- TOC entry 9 (class 2615 OID 509546)
-- Name: freq; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA freq;


ALTER SCHEMA freq OWNER TO postgres;

--
-- TOC entry 4152 (class 0 OID 0)
-- Dependencies: 9
-- Name: SCHEMA freq; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA freq IS 'erinevad sagedusuuringud s√µnakasutuse kohta';


--
-- TOC entry 10 (class 2615 OID 509547)
-- Name: heisig; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA heisig;


ALTER SCHEMA heisig OWNER TO postgres;

--
-- TOC entry 11 (class 2615 OID 509548)
-- Name: jmdict; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA jmdict;


ALTER SCHEMA jmdict OWNER TO postgres;

--
-- TOC entry 4153 (class 0 OID 0)
-- Dependencies: 11
-- Name: SCHEMA jmdict; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA jmdict IS 'standard public schema';


--
-- TOC entry 14 (class 2615 OID 509549)
-- Name: jmdict_en; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA jmdict_en;


ALTER SCHEMA jmdict_en OWNER TO postgres;

--
-- TOC entry 4154 (class 0 OID 0)
-- Dependencies: 14
-- Name: SCHEMA jmdict_en; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA jmdict_en IS 'standard public schema';


--
-- TOC entry 12 (class 2615 OID 509550)
-- Name: kanjidic2; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA kanjidic2;


ALTER SCHEMA kanjidic2 OWNER TO postgres;

--
-- TOC entry 13 (class 2615 OID 509551)
-- Name: test; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA test;


ALTER SCHEMA test OWNER TO postgres;

--
-- TOC entry 492 (class 3079 OID 11789)
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- TOC entry 4158 (class 0 OID 0)
-- Dependencies: 492
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

--
-- TOC entry 2779 (class 3456 OID 509552)
-- Name: estonian; Type: COLLATION; Schema: public; Owner: postgres
--

CREATE COLLATION estonian (lc_collate = 'et_EE.utf8', lc_ctype = 'et_EE.utf8');


ALTER COLLATION public.estonian OWNER TO postgres;

--
-- TOC entry 2780 (class 3456 OID 509553)
-- Name: japanese; Type: COLLATION; Schema: public; Owner: postgres
--

CREATE COLLATION japanese (lc_collate = 'ja_JP.utf8', lc_ctype = 'ja_JP.utf8');


ALTER COLLATION public.japanese OWNER TO postgres;

SET search_path = core, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- TOC entry 179 (class 1259 OID 509554)
-- Name: core_10k; Type: TABLE; Schema: core; Owner: postgres; Tablespace: 
--

CREATE TABLE core_10k (
    word character varying(255) NOT NULL,
    word_reading text,
    sentence text,
    sentence_audio text,
    word_audio text,
    word_translation text,
    mnemonic text,
    master_index text,
    level character varying NOT NULL,
    sentence_reading text,
    sentence_translation text,
    word_alt_def text,
    id integer NOT NULL,
    with_jmdict boolean DEFAULT false NOT NULL
);


ALTER TABLE core.core_10k OWNER TO postgres;

SET search_path = heisig, pg_catalog;

--
-- TOC entry 499 (class 1255 OID 509561)
-- Name: f_kanji_jp_keyword_from_core_10k(character varying, character varying); Type: FUNCTION; Schema: heisig; Owner: postgres
--

CREATE FUNCTION f_kanji_jp_keyword_from_core_10k(_kanji character varying, _meaning character varying) RETURNS SETOF core.core_10k
    LANGUAGE plpgsql
    AS $$
        declare
			_result core.core_10k_raw%ROWTYPE;
        begin
			return query SELECT * FROM core.core_10k_raw WHERE target_kanji=_kanji AND meaning like '%' || _meaning || '%' order by id;
			
        end;
$$;


ALTER FUNCTION heisig.f_kanji_jp_keyword_from_core_10k(_kanji character varying, _meaning character varying) OWNER TO postgres;

--
-- TOC entry 506 (class 1255 OID 509562)
-- Name: f_kanji_jp_keyword_from_core_10k_2(character varying, character varying); Type: FUNCTION; Schema: heisig; Owner: postgres
--

CREATE FUNCTION f_kanji_jp_keyword_from_core_10k_2(_kanji character varying, _meaning character varying) RETURNS TABLE(a text, backend_start text)
    LANGUAGE plpgsql
    AS $$
        begin
			return query SELECT kana_reading, reading FROM core.core_10k_raw WHERE target_kanji=_kanji AND meaning like '%' || _meaning || '%' order by id;
			
        end;
$$;


ALTER FUNCTION heisig.f_kanji_jp_keyword_from_core_10k_2(_kanji character varying, _meaning character varying) OWNER TO postgres;

--
-- TOC entry 507 (class 1255 OID 509563)
-- Name: f_kanji_jp_keyword_from_core_10k_3(character varying, character varying); Type: FUNCTION; Schema: heisig; Owner: postgres
--

CREATE FUNCTION f_kanji_jp_keyword_from_core_10k_3(_kanji character varying, _meaning character varying) RETURNS TABLE(a text, b text)
    LANGUAGE plpgsql
    AS $$
        begin
			return query SELECT kana_reading, reading FROM core.core_10k_raw WHERE target_kanji=_kanji AND meaning like '%' || _meaning || '%' order by id;
			
        end;
$$;


ALTER FUNCTION heisig.f_kanji_jp_keyword_from_core_10k_3(_kanji character varying, _meaning character varying) OWNER TO postgres;

--
-- TOC entry 508 (class 1255 OID 509564)
-- Name: f_kanji_jp_keyword_from_core_10k_4(character varying, character varying); Type: FUNCTION; Schema: heisig; Owner: postgres
--

CREATE FUNCTION f_kanji_jp_keyword_from_core_10k_4(_kanji character varying, _meaning character varying) RETURNS SETOF core.core_10k
    LANGUAGE plpgsql
    AS $$
        begin
			return query SELECT * FROM core.core_10k WHERE target_kanji like '%' || _kanji || '%' AND meaning like '%' || _meaning || '%' order by id;
			
        end;
$$;


ALTER FUNCTION heisig.f_kanji_jp_keyword_from_core_10k_4(_kanji character varying, _meaning character varying) OWNER TO postgres;

--
-- TOC entry 509 (class 1255 OID 509565)
-- Name: f_kanji_jp_keyword_from_core_10k_5(character varying); Type: FUNCTION; Schema: heisig; Owner: postgres
--

CREATE FUNCTION f_kanji_jp_keyword_from_core_10k_5(_kanji character varying) RETURNS SETOF core.core_10k
    LANGUAGE plpgsql
    AS $$
        begin
			return query SELECT * FROM core.core_10k WHERE target_kanji like '%' || _kanji || '%' order by id;
			
        end;
$$;


ALTER FUNCTION heisig.f_kanji_jp_keyword_from_core_10k_5(_kanji character varying) OWNER TO postgres;

SET search_path = jmdict, pg_catalog;

--
-- TOC entry 510 (class 1255 OID 509566)
-- Name: delentr(integer); Type: FUNCTION; Schema: jmdict; Owner: postgres
--

CREATE FUNCTION delentr(entrid integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
	-- We don't delete the entr row or history rows but
	-- we delete everything else.
	-- Because fk's use "on delete cascade" options we 
	-- need only delete the top-level children to get 
	-- rid of everything.
	UPDATE entr SET stat=5 WHERE entr=entrid;
	DELETE FROM kanj WHERE entr=entrid;
	DELETE FROM rdng WHERE entr=entrid;
	DELETE FROM sens WHERE entr=entrid;
	UPDATE entr SET stat=5 WHERE entr=entrid;
	END;
    $$;


ALTER FUNCTION jmdict.delentr(entrid integer) OWNER TO postgres;

--
-- TOC entry 511 (class 1255 OID 509567)
-- Name: dupentr(integer); Type: FUNCTION; Schema: jmdict; Owner: postgres
--

CREATE FUNCTION dupentr(entrid integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
    DECLARE
	_p0_ INT;
    BEGIN
	INSERT INTO entr(src,stat,seq,dfrm,unap,srcnotes,notes)
	  (SELECT src,seq,3,notes FROM entr WHERE id=entrid);
	SELECT lastval() INTO _p0_;

	INSERT INTO hist(entr,hist,stat,unap,dt,userid,name,email,diff,refs,notes) 
	  (SELECT _p0_,hist,stat,unap,dt,userid,name,email,diff,refs,notes 
	   FROM hist WHERE hist.entr=entrid);

	INSERT INTO kanj(entr,kanj,txt) 
	  (SELECT _p0_,kanj,txt FROM kanj WHERE entr=entrid);
	INSERT INTO kinf(entr,kanj,ord,kw)
	  (SELECT _p0_,kanj,kw FROM kinf WHERE entr=entrid);

	INSERT INTO rdng(entr,rdng,txt) 
	  (SELECT _p0_,rdng,txt FROM rdng WHERE entr=entrid);
	INSERT INTO rinf(entr,rdng,ord,kw)
	  (SELECT _p0_,rdng,kw FROM rinf WHERE entr=entrid);
	INSERT INTO audio(entr,rdng,audio,fname,strt,leng) 
	  (SELECT _p0_,rdng,audio,fname,strt,leng FROM audio a WHERE a.entr=entrid);
	    
	INSERT INTO sens(entr,sens,notes) 
	  (SELECT _p0_,sens,notes FROM sens WHERE entr=entrid);
	INSERT INTO pos(entr,sens,ord,kw) 
	  (SELECT _p0_,sens,kw FROM pos WHERE entr=entrid);
	INSERT INTO misc(entr,sens,ord,kw) 
	  (SELECT _p0_,sens,kw FROM misc WHERE entr=entrid);
	INSERT INTO fld(entr,sens,ord,kw) 
	  (SELECT _p0_,sens,kw FROM fld WHERE entr=entrid);
	INSERT INTO gloss(entr,sens,gloss,lang,ginf,txt,notes) 
	  (SELECT _p0_,sens,gloss,lang,txt,ginf,notes FROM gloss WHERE entr=entrid);
	INSERT INTO dial(entr,sens,ord,kw) 
	  (SELECT _p0_,kw FROM dial WHERE dial.entr=entrid);
	INSERT INTO lsrc(entr,sens,ord,lang,txt,part,wasei) 
	  (SELECT _p0_,kw FROM lsrc WHERE lang.entr=entrid);
	INSERT INTO xref(entr,sens,xref,typ,xentr,xsens,notes) 
	  (SELECT _p0_,sens,xref,typ,xentr,xsens,notes FROM xref WHERE entr=entrid);
	INSERT INTO xref(entr,sens,xref,typ,xentr,xsens,notes) 
	  (SELECT entr,sens,xref,typ,_p0_,xsens,notes FROM xref WHERE xentr=entrid);
	INSERT INTO xresolv(entr,sens,typ,ord,typ,rtxt,ktxt,tsens,notes,prio) 
	  (SELECT _p0_,sens,typ,ord,typ,rtxt,ktxt,tsens,notes,prio FROM xresolv WHERE entr=entrid);

	INSERT INTO freq(entr,kanj,kw,value) 
	  (SELECT _p0_,rdng,kanj,kw,value FROM freq WHERE entr=entrid);
	INSERT INTO restr(entr,rdng,kanj)
	  (SELECT _p0_,rdng,kanj FROM restr WHERE entr=entrid);
	INSERT INTO stagr(entr,sens,rdng)
	  (SELECT _p0_,sens,rdng FROM stagr WHERE entr=entrid);
	INSERT INTO stagk(entr,sens,kanj)
	  (SELECT _p0_,sens,kanj FROM stagk WHERE entr=entrid);

	RETURN _p0_;
	END;
    $$;


ALTER FUNCTION jmdict.dupentr(entrid integer) OWNER TO postgres;

--
-- TOC entry 512 (class 1255 OID 509568)
-- Name: entr_seqdef(); Type: FUNCTION; Schema: jmdict; Owner: postgres
--

CREATE FUNCTION entr_seqdef() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    -- This function is used as an "insert" trigger on table 
    -- 'entr'.  It checks the 'seq' field value and if NULL,
    -- provides a default value from one of several sequences,
    -- with the sequence used determined by the value if the
    -- new row's 'src' field.  The name of the sequence to be
    -- used is given in the 'seq' column of table 'kwsrc'.

    DECLARE seqnm VARCHAR;
    BEGIN
        IF NEW.seq IS NOT NULL THEN 
	    RETURN NEW;
	    END IF;
	SELECT seq INTO seqnm FROM kwsrc WHERE id=NEW.src;
        NEW.seq :=  NEXTVAL(seqnm);
        RETURN NEW;
        END;
    $$;


ALTER FUNCTION jmdict.entr_seqdef() OWNER TO postgres;

--
-- TOC entry 513 (class 1255 OID 509569)
-- Name: get_edroot(integer); Type: FUNCTION; Schema: jmdict; Owner: postgres
--

CREATE FUNCTION get_edroot(eid integer) RETURNS SETOF integer
    LANGUAGE plpgsql
    AS $$
    -- Starting at entry 'eid', follow the chain of 'dfrm' foreign
    -- keys until a entr row is found that has a NULL 'dfrm' value,
    -- and return that row (which may be the row with id of 'eid').
    -- If there is no row with an id of 'eid', or if there is a cycle
    -- in the dfrm references such that none of entries have a NULL
    -- dfrm, no rows are returned. 
    BEGIN
	RETURN QUERY
	    WITH RECURSIVE wt(id,dfrm) AS (
                SELECT id,dfrm FROM entr WHERE id=eid
                UNION
                SELECT entr.id,entr.dfrm
                FROM wt, entr WHERE wt.dfrm=entr.id)
	    SELECT id FROM wt WHERE dfrm IS NULL;
	RETURN;
    END; $$;


ALTER FUNCTION jmdict.get_edroot(eid integer) OWNER TO postgres;

--
-- TOC entry 180 (class 1259 OID 509570)
-- Name: entr; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE entr (
    id integer NOT NULL,
    src integer NOT NULL,
    stat integer NOT NULL,
    seq bigint NOT NULL,
    dfrm integer,
    unap boolean NOT NULL,
    srcnote character varying(255),
    notes text,
    CONSTRAINT entr_seq_check CHECK ((seq > 0))
);


ALTER TABLE jmdict.entr OWNER TO postgres;

--
-- TOC entry 514 (class 1255 OID 509577)
-- Name: get_subtree(integer); Type: FUNCTION; Schema: jmdict; Owner: postgres
--

CREATE FUNCTION get_subtree(eid integer) RETURNS SETOF entr
    LANGUAGE plpgsql
    AS $$
    -- Return the set of entr rows that reference the row with id
    -- 'eid' via 'dfrm', and all the row that reference those rows
    -- and so on.  This function will terminate even if there are
    -- 'dfrm' cycles.
    BEGIN
	RETURN QUERY
	    WITH RECURSIVE wt(id) AS (
                SELECT id FROM entr WHERE id=eid
                UNION
                SELECT entr.id
                FROM wt, entr WHERE wt.id=entr.dfrm)
	    SELECT entr.*
	    FROM wt
	    JOIN entr ON entr.id=wt.id;
	RETURN;
    END; $$;


ALTER FUNCTION jmdict.get_subtree(eid integer) OWNER TO postgres;

--
-- TOC entry 515 (class 1255 OID 509578)
-- Name: kwsrc_updseq(); Type: FUNCTION; Schema: jmdict; Owner: postgres
--

CREATE FUNCTION kwsrc_updseq() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    -- Create a sequence for entr.seq numbers whenever a new
    -- row is added to table 'kwsrc' (and delete it when row 
    -- is deleted).  This allows every corpus to maintain its
    -- own sequence.  The sequence is *not* made default value
    -- of entr.seq (because there multiple sequences are used
    -- depending on entr.src); the API is responsible for choosing
    -- and using the correct sequence. 

    DECLARE seqnm VARCHAR; newseq VARCHAR := ''; oldseq VARCHAR := '';
	partinc VARCHAR := ''; partmin VARCHAR := ''; partmax VARCHAR := '';
	usedcnt INT;
    BEGIN
	IF TG_OP != 'DELETE' THEN newseq=NEW.seq; END IF;
	IF TG_OP != 'INSERT' THEN oldseq=OLD.seq; END IF;
	IF oldseq != '' THEN
	    -- 'kwsrc' row was deleted or updated.  Drop the deleted sequence
	    -- if not used in any other rows.
	    SELECT INTO usedcnt COUNT(*) FROM kwsrc WHERE seq=oldseq;
	    IF usedcnt = 0 THEN
		EXECUTE 'DROP SEQUENCE IF EXISTS '||oldseq;
		END IF;
	ELSEIF newseq != '' THEN 
	    -- 'kwsrc' row was inserted or updated.  See if sequence 'newseq'
	    -- already exists, and if so, do nothing.  If not, create it.
	    IF NEW.sinc IS NOT NULL THEN
		partinc = ' INCREMENT ' || NEW.sinc;
		END IF;
	    IF NEW.smin IS NOT NULL THEN
		partmin = ' MINVALUE ' || NEW.smin;
		END IF;
	    IF NEW.smax IS NOT NULL THEN
		partmax = ' MAXVALUE ' || NEW.smax;
		END IF;
	    IF NOT EXISTS (SELECT relname FROM pg_class WHERE relname=NEW.seq AND relkind='S') THEN
	        EXECUTE 'CREATE SEQUENCE '||newseq||partinc||partmin||partmax||' NO CYCLE';
		END IF;
	    END IF;
	RETURN NEW;
        END;
    $$;


ALTER FUNCTION jmdict.kwsrc_updseq() OWNER TO postgres;

--
-- TOC entry 516 (class 1255 OID 509579)
-- Name: syncseq(); Type: FUNCTION; Schema: jmdict; Owner: postgres
--

CREATE FUNCTION syncseq() RETURNS void
    LANGUAGE plpgsql
    AS $$
    -- Syncronises all the sequences specified in table 'kwsrc'
    -- (which are used for generation of corpus specific seq numbers.)
    DECLARE cur REFCURSOR; seqname VARCHAR; maxseq BIGINT;
    BEGIN
	-- The following cursor gets the max value of entr.seq for each corpus
	-- for entr.seq values within the range of the associated seq (where
	-- the range is what was given in kwsrc table .smin and .smax values.  
	-- [Don't confuse kwsrc.seq (name of the Postgresq1 sequence that
	-- generates values used for entry seq numbers) with entr.seq (the
	-- entry sequence numbers themselves).]  Since the kwsrc.smin and
	-- .smax values can be changed after the sequence was created, and
	-- doing so may screwup the operation herein, don't do that!  It is 
	-- also possible that multiple kwsrc's can share a common 'seq' value,
	-- but have different 'smin' and 'smax' values -- again, don't do that!
	-- The rather elaborate join below is done to make sure we get a row
	-- for every kwsrc.seq value, even if there are no entries that
	-- reference that kwsrc row. 

	OPEN cur FOR 
	    SELECT ks.sqname, COALESCE(ke.mxseq,ks.smin,1) 
	    FROM 
		(SELECT seq AS sqname, MIN(smin) AS smin
		FROM kwsrc 
		GROUP BY seq) AS ks
	    LEFT JOIN	-- Find the max entr.seq number in use, but ignoring
			-- any that are autside the min/max bounds of the kwsrc's
			-- sequence.
		(SELECT k.seq AS sqname, MAX(e.seq) AS mxseq
		FROM entr e 
		JOIN kwsrc k ON k.id=e.src 
		WHERE e.seq BETWEEN COALESCE(k.smin,1)
		    AND COALESCE(k.smax,9223372036854775807)
		GROUP BY k.seq,k.smin) AS ke 
	    ON ke.sqname=ks.sqname;
	LOOP
	    FETCH cur INTO seqname, maxseq;
	    EXIT WHEN NOT FOUND;
	    EXECUTE 'SELECT setval(''' || seqname || ''', ' || maxseq || ')';
	    END LOOP;
	END;
    $$;


ALTER FUNCTION jmdict.syncseq() OWNER TO postgres;

SET search_path = jmdict_en, pg_catalog;

--
-- TOC entry 517 (class 1255 OID 509580)
-- Name: delentr(integer); Type: FUNCTION; Schema: jmdict_en; Owner: postgres
--

CREATE FUNCTION delentr(entrid integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
	-- We don't delete the entr row or history rows but
	-- we delete everything else.
	-- Because fk's use "on delete cascade" options we 
	-- need only delete the top-level children to get 
	-- rid of everything.
	UPDATE entr SET stat=5 WHERE entr=entrid;
	DELETE FROM kanj WHERE entr=entrid;
	DELETE FROM rdng WHERE entr=entrid;
	DELETE FROM sens WHERE entr=entrid;
	UPDATE entr SET stat=5 WHERE entr=entrid;
	END;
    $$;


ALTER FUNCTION jmdict_en.delentr(entrid integer) OWNER TO postgres;

--
-- TOC entry 518 (class 1255 OID 509581)
-- Name: dupentr(integer); Type: FUNCTION; Schema: jmdict_en; Owner: postgres
--

CREATE FUNCTION dupentr(entrid integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
    DECLARE
	_p0_ INT;
    BEGIN
	INSERT INTO entr(src,stat,seq,dfrm,unap,srcnotes,notes)
	  (SELECT src,seq,3,notes FROM entr WHERE id=entrid);
	SELECT lastval() INTO _p0_;

	INSERT INTO hist(entr,hist,stat,unap,dt,userid,name,email,diff,refs,notes) 
	  (SELECT _p0_,hist,stat,unap,dt,userid,name,email,diff,refs,notes 
	   FROM hist WHERE hist.entr=entrid);

	INSERT INTO kanj(entr,kanj,txt) 
	  (SELECT _p0_,kanj,txt FROM kanj WHERE entr=entrid);
	INSERT INTO kinf(entr,kanj,ord,kw)
	  (SELECT _p0_,kanj,kw FROM kinf WHERE entr=entrid);

	INSERT INTO rdng(entr,rdng,txt) 
	  (SELECT _p0_,rdng,txt FROM rdng WHERE entr=entrid);
	INSERT INTO rinf(entr,rdng,ord,kw)
	  (SELECT _p0_,rdng,kw FROM rinf WHERE entr=entrid);
	INSERT INTO audio(entr,rdng,audio,fname,strt,leng) 
	  (SELECT _p0_,rdng,audio,fname,strt,leng FROM audio a WHERE a.entr=entrid);
	    
	INSERT INTO sens(entr,sens,notes) 
	  (SELECT _p0_,sens,notes FROM sens WHERE entr=entrid);
	INSERT INTO pos(entr,sens,ord,kw) 
	  (SELECT _p0_,sens,kw FROM pos WHERE entr=entrid);
	INSERT INTO misc(entr,sens,ord,kw) 
	  (SELECT _p0_,sens,kw FROM misc WHERE entr=entrid);
	INSERT INTO fld(entr,sens,ord,kw) 
	  (SELECT _p0_,sens,kw FROM fld WHERE entr=entrid);
	INSERT INTO gloss(entr,sens,gloss,lang,ginf,txt,notes) 
	  (SELECT _p0_,sens,gloss,lang,txt,ginf,notes FROM gloss WHERE entr=entrid);
	INSERT INTO dial(entr,sens,ord,kw) 
	  (SELECT _p0_,kw FROM dial WHERE dial.entr=entrid);
	INSERT INTO lsrc(entr,sens,ord,lang,txt,part,wasei) 
	  (SELECT _p0_,kw FROM lsrc WHERE lang.entr=entrid);
	INSERT INTO xref(entr,sens,xref,typ,xentr,xsens,notes) 
	  (SELECT _p0_,sens,xref,typ,xentr,xsens,notes FROM xref WHERE entr=entrid);
	INSERT INTO xref(entr,sens,xref,typ,xentr,xsens,notes) 
	  (SELECT entr,sens,xref,typ,_p0_,xsens,notes FROM xref WHERE xentr=entrid);
	INSERT INTO xresolv(entr,sens,typ,ord,typ,rtxt,ktxt,tsens,notes,prio) 
	  (SELECT _p0_,sens,typ,ord,typ,rtxt,ktxt,tsens,notes,prio FROM xresolv WHERE entr=entrid);

	INSERT INTO freq(entr,kanj,kw,value) 
	  (SELECT _p0_,rdng,kanj,kw,value FROM freq WHERE entr=entrid);
	INSERT INTO restr(entr,rdng,kanj)
	  (SELECT _p0_,rdng,kanj FROM restr WHERE entr=entrid);
	INSERT INTO stagr(entr,sens,rdng)
	  (SELECT _p0_,sens,rdng FROM stagr WHERE entr=entrid);
	INSERT INTO stagk(entr,sens,kanj)
	  (SELECT _p0_,sens,kanj FROM stagk WHERE entr=entrid);

	RETURN _p0_;
	END;
    $$;


ALTER FUNCTION jmdict_en.dupentr(entrid integer) OWNER TO postgres;

--
-- TOC entry 519 (class 1255 OID 509582)
-- Name: entr_seqdef(); Type: FUNCTION; Schema: jmdict_en; Owner: postgres
--

CREATE FUNCTION entr_seqdef() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    -- This function is used as an "insert" trigger on table 
    -- 'entr'.  It checks the 'seq' field value and if NULL,
    -- provides a default value from one of several sequences,
    -- with the sequence used determined by the value if the
    -- new row's 'src' field.  The name of the sequence to be
    -- used is given in the 'seq' column of table 'kwsrc'.

    DECLARE seqnm VARCHAR;
    BEGIN
        IF NEW.seq IS NOT NULL THEN 
	    RETURN NEW;
	    END IF;
	SELECT seq INTO seqnm FROM kwsrc WHERE id=NEW.src;
        NEW.seq :=  NEXTVAL(seqnm);
        RETURN NEW;
        END;
    $$;


ALTER FUNCTION jmdict_en.entr_seqdef() OWNER TO postgres;

--
-- TOC entry 520 (class 1255 OID 509583)
-- Name: get_edroot(integer); Type: FUNCTION; Schema: jmdict_en; Owner: postgres
--

CREATE FUNCTION get_edroot(eid integer) RETURNS SETOF integer
    LANGUAGE plpgsql
    AS $$
    -- Starting at entry 'eid', follow the chain of 'dfrm' foreign
    -- keys until a entr row is found that has a NULL 'dfrm' value,
    -- and return that row (which may be the row with id of 'eid').
    -- If there is no row with an id of 'eid', or if there is a cycle
    -- in the dfrm references such that none of entries have a NULL
    -- dfrm, no rows are returned. 
    BEGIN
	RETURN QUERY
	    WITH RECURSIVE wt(id,dfrm) AS (
                SELECT id,dfrm FROM entr WHERE id=eid
                UNION
                SELECT entr.id,entr.dfrm
                FROM wt, entr WHERE wt.dfrm=entr.id)
	    SELECT id FROM wt WHERE dfrm IS NULL;
	RETURN;
    END; $$;


ALTER FUNCTION jmdict_en.get_edroot(eid integer) OWNER TO postgres;

--
-- TOC entry 181 (class 1259 OID 509584)
-- Name: entr; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE entr (
    id integer NOT NULL,
    src smallint NOT NULL,
    stat smallint NOT NULL,
    seq bigint NOT NULL,
    dfrm integer,
    unap boolean NOT NULL,
    srcnote character varying(255),
    notes text,
    CONSTRAINT entr_seq_check CHECK ((seq > 0))
);


ALTER TABLE jmdict_en.entr OWNER TO postgres;

--
-- TOC entry 521 (class 1255 OID 509591)
-- Name: get_subtree(integer); Type: FUNCTION; Schema: jmdict_en; Owner: postgres
--

CREATE FUNCTION get_subtree(eid integer) RETURNS SETOF entr
    LANGUAGE plpgsql
    AS $$
    -- Return the set of entr rows that reference the row with id
    -- 'eid' via 'dfrm', and all the row that reference those rows
    -- and so on.  This function will terminate even if there are
    -- 'dfrm' cycles.
    BEGIN
	RETURN QUERY
	    WITH RECURSIVE wt(id) AS (
                SELECT id FROM entr WHERE id=eid
                UNION
                SELECT entr.id
                FROM wt, entr WHERE wt.id=entr.dfrm)
	    SELECT entr.*
	    FROM wt
	    JOIN entr ON entr.id=wt.id;
	RETURN;
    END; $$;


ALTER FUNCTION jmdict_en.get_subtree(eid integer) OWNER TO postgres;

--
-- TOC entry 522 (class 1255 OID 509592)
-- Name: kwsrc_updseq(); Type: FUNCTION; Schema: jmdict_en; Owner: postgres
--

CREATE FUNCTION kwsrc_updseq() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    -- Create a sequence for entr.seq numbers whenever a new
    -- row is added to table 'kwsrc' (and delete it when row 
    -- is deleted).  This allows every corpus to maintain its
    -- own sequence.  The sequence is *not* made default value
    -- of entr.seq (because there multiple sequences are used
    -- depending on entr.src); the API is responsible for choosing
    -- and using the correct sequence. 

    DECLARE seqnm VARCHAR; newseq VARCHAR := ''; oldseq VARCHAR := '';
	partinc VARCHAR := ''; partmin VARCHAR := ''; partmax VARCHAR := '';
	usedcnt INT;
    BEGIN
	IF TG_OP != 'DELETE' THEN newseq=NEW.seq; END IF;
	IF TG_OP != 'INSERT' THEN oldseq=OLD.seq; END IF;
	IF oldseq != '' THEN
	    -- 'kwsrc' row was deleted or updated.  Drop the deleted sequence
	    -- if not used in any other rows.
	    SELECT INTO usedcnt COUNT(*) FROM kwsrc WHERE seq=oldseq;
	    IF usedcnt = 0 THEN
		EXECUTE 'DROP SEQUENCE IF EXISTS '||oldseq;
		END IF;
	ELSEIF newseq != '' THEN 
	    -- 'kwsrc' row was inserted or updated.  See if sequence 'newseq'
	    -- already exists, and if so, do nothing.  If not, create it.
	    IF NEW.sinc IS NOT NULL THEN
		partinc = ' INCREMENT ' || NEW.sinc;
		END IF;
	    IF NEW.smin IS NOT NULL THEN
		partmin = ' MINVALUE ' || NEW.smin;
		END IF;
	    IF NEW.smax IS NOT NULL THEN
		partmax = ' MAXVALUE ' || NEW.smax;
		END IF;
	    IF NOT EXISTS (SELECT relname FROM pg_class WHERE relname=NEW.seq AND relkind='S') THEN
	        EXECUTE 'CREATE SEQUENCE '||newseq||partinc||partmin||partmax||' NO CYCLE';
		END IF;
	    END IF;
	RETURN NEW;
        END;
    $$;


ALTER FUNCTION jmdict_en.kwsrc_updseq() OWNER TO postgres;

--
-- TOC entry 523 (class 1255 OID 509593)
-- Name: syncseq(); Type: FUNCTION; Schema: jmdict_en; Owner: postgres
--

CREATE FUNCTION syncseq() RETURNS void
    LANGUAGE plpgsql
    AS $$
    -- Syncronises all the sequences specified in table 'kwsrc'
    -- (which are used for generation of corpus specific seq numbers.)
    DECLARE cur REFCURSOR; seqname VARCHAR; maxseq BIGINT;
    BEGIN
	-- The following cursor gets the max value of entr.seq for each corpus
	-- for entr.seq values within the range of the associated seq (where
	-- the range is what was given in kwsrc table .smin and .smax values.  
	-- [Don't confuse kwsrc.seq (name of the Postgresq1 sequence that
	-- generates values used for entry seq numbers) with entr.seq (the
	-- entry sequence numbers themselves).]  Since the kwsrc.smin and
	-- .smax values can be changed after the sequence was created, and
	-- doing so may screwup the operation herein, don't do that!  It is 
	-- also possible that multiple kwsrc's can share a common 'seq' value,
	-- but have different 'smin' and 'smax' values -- again, don't do that!
	-- The rather elaborate join below is done to make sure we get a row
	-- for every kwsrc.seq value, even if there are no entries that
	-- reference that kwsrc row. 

	OPEN cur FOR 
	    SELECT ks.sqname, COALESCE(ke.mxseq,ks.smin,1) 
	    FROM 
		(SELECT seq AS sqname, MIN(smin) AS smin
		FROM kwsrc 
		GROUP BY seq) AS ks
	    LEFT JOIN	-- Find the max entr.seq number in use, but ignoring
			-- any that are autside the min/max bounds of the kwsrc's
			-- sequence.
		(SELECT k.seq AS sqname, MAX(e.seq) AS mxseq
		FROM entr e 
		JOIN kwsrc k ON k.id=e.src 
		WHERE e.seq BETWEEN COALESCE(k.smin,1)
		    AND COALESCE(k.smax,9223372036854775807)
		GROUP BY k.seq,k.smin) AS ke 
	    ON ke.sqname=ks.sqname;
	LOOP
	    FETCH cur INTO seqname, maxseq;
	    EXIT WHEN NOT FOUND;
	    EXECUTE 'SELECT setval(''' || seqname || ''', ' || maxseq || ')';
	    END LOOP;
	END;
    $$;


ALTER FUNCTION jmdict_en.syncseq() OWNER TO postgres;

SET search_path = kanjidic2, pg_catalog;

--
-- TOC entry 524 (class 1255 OID 509594)
-- Name: f_kanji_radical_hint(character varying, character varying); Type: FUNCTION; Schema: kanjidic2; Owner: postgres
--

CREATE FUNCTION f_kanji_radical_hint(_kanji character varying, _delimiter character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
        declare
			_limit int;
			_c int;
			_result text;
        begin			
			CREATE TEMPORARY TABLE IF NOT EXISTS _tmp_primitive_hint(primitive character varying(1)) ON COMMIT DELETE ROWS;
			
			insert into _tmp_primitive_hint(primitive) 
				SELECT b.primitive FROM kanjidic2.mtm_kanji_primitive a 
				LEFT JOIN kanjidic2.kanji_primitive b ON a.primitive_id=b.id 
				WHERE a.kanji_id=(SELECT id FROM kanjidic2.kanji WHERE literal=_kanji);
			
			
			_c:= (select count(*) from _tmp_primitive_hint);
						
			_limit := (SELECT _c * 2 + ( 10 - (_c * 2 % 10)));
			
			insert into _tmp_primitive_hint(primitive)
				SELECT a.primitive FROM (SELECT primitive, random() AS rand FROM kanjidic2.kanji_primitive ORDER BY rand LIMIT _limit - _c) a;
               
			_result:=(SELECT array_to_string(ARRAY(
				select b.primitive from (SELECT primitive, random() AS rand FROM _tmp_primitive_hint ORDER BY rand) b), 
			_delimiter)); 
			
			return _result;
        end;
$$;


ALTER FUNCTION kanjidic2.f_kanji_radical_hint(_kanji character varying, _delimiter character varying) OWNER TO postgres;

--
-- TOC entry 525 (class 1255 OID 509595)
-- Name: f_kanji_readings_jp(character varying); Type: FUNCTION; Schema: kanjidic2; Owner: postgres
--

CREATE FUNCTION f_kanji_readings_jp(_kanji character varying) RETURNS refcursor
    LANGUAGE plpgsql
    AS $$
        declare
			_cursor REFCURSOR := 'f_kanji_readings_jp';
        begin
		OPEN _cursor FOR 
			
			SELECT c.literal FROM kanjidic2.kanji_reading c RIGHT JOIN (
				SELECT a.id, a.reading_id FROM kanjidic2.mtm_kanji_reading a 
				LEFT JOIN kanjidic2.kanji b ON a.kanji_id=b.id 
				WHERE b.literal = _kanji ORDER BY a.id) d 
			ON c.id=d.reading_id 
			WHERE c.cf_reading_type_id = 235 OR c.cf_reading_type_id = 234;		
			
		RETURN (_cursor);
        end;
$$;


ALTER FUNCTION kanjidic2.f_kanji_readings_jp(_kanji character varying) OWNER TO postgres;

SET search_path = public, pg_catalog;

--
-- TOC entry 527 (class 1255 OID 509596)
-- Name: dep_compd_from_freq_nres_by_heisig6(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dep_compd_from_freq_nres_by_heisig6(_h6_from integer, _h6_to integer, _cpdlen_from integer, _cpdlen_to integer) RETURNS refcursor
    LANGUAGE plpgsql
    AS $$
        declare
			_cursor REFCURSOR := 'nres_h6';
        begin
		OPEN _cursor FOR 

			WITH excl_list AS (
				SELECT a.nres_id, TRUE AS excl FROM freq.mtm_nres_kanji a 
				LEFT JOIN heisig.heisig6 b ON a.kanji_id=b.kanji_id 
				WHERE b.id IS NULL OR b.id NOT BETWEEN _h6_from AND _h6_to 
				GROUP BY a.nres_id),
			incl_list AS (
				SELECT c.nres_id, d.excl FROM freq.mtm_nres_kanji c 
				LEFT JOIN (SELECT nres_id, excl FROM excl_list) d 
				ON c.nres_id = d.nres_id 
				WHERE d.excl IS NULL),
			incl_nres AS (
				SELECT f.id, f.jp, f.freq, f.types, count(f.id) AS count_kanjis
				FROM incl_list e
				LEFT JOIN freq.jp_nres_base_aggr f ON e.nres_id=f.id
				GROUP BY f.id, f.jp, f.freq, f.types
			)

			SELECT g.id, g.freq, g.jp, g.types, g.count_kanjis FROM incl_nres g
			WHERE g.count_kanjis BETWEEN _cpdlen_from AND _cpdlen_to
			ORDER BY g.id DESC;
			
		RETURN (_cursor);
        end;
$$;


ALTER FUNCTION public.dep_compd_from_freq_nres_by_heisig6(_h6_from integer, _h6_to integer, _cpdlen_from integer, _cpdlen_to integer) OWNER TO postgres;

--
-- TOC entry 528 (class 1255 OID 509597)
-- Name: f_compd_core_10k_by_kanji(text, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_compd_core_10k_by_kanji(_kanjis text, _compdlfrom integer, _compdlto integer) RETURNS refcursor
    LANGUAGE plpgsql
    AS $$
        declare
			_cursor REFCURSOR := 'core_10k_by_kanji';
        begin
		OPEN _cursor FOR 

			WITH exclude_kanji_list AS (
				SELECT id FROM core.core_10k_kanji WHERE kanji NOT IN (SELECT unnest(string_to_array(_kanjis, ',')))
			), exclude_core_10k_list AS (
				SELECT core_10k_id FROM core.mtm_core_10k_kanji 
				WHERE core_10k_kanji_id IN (SELECT id FROM exclude_kanji_list) GROUP BY core_10k_id
			), include_core_10k_list AS (
				SELECT core_10k_id, count(core_10k_kanji_id) AS kanji_count FROM core.mtm_core_10k_kanji 
				WHERE core_10k_id NOT IN (SELECT core_10k_id FROM exclude_core_10k_list) GROUP BY core_10k_id
			)

			SELECT b.* , a.kanji_count FROM include_core_10k_list a LEFT JOIN core.core_10k b ON a.core_10k_id=b.id 
			WHERE a.kanji_count BETWEEN _compdlfrom AND _compdlto and b.with_jmdict = true;
			
		RETURN (_cursor);
        end;
$$;


ALTER FUNCTION public.f_compd_core_10k_by_kanji(_kanjis text, _compdlfrom integer, _compdlto integer) OWNER TO postgres;

--
-- TOC entry 529 (class 1255 OID 509598)
-- Name: f_compd_core_6k_by_kanji(text, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_compd_core_6k_by_kanji(_kanjis text, _compdlfrom integer, _compdlto integer) RETURNS refcursor
    LANGUAGE plpgsql
    AS $$
        declare
			_cursor REFCURSOR := 'core_6k_by_kanji';
        begin
		OPEN _cursor FOR 

			WITH exclude_kanji_list AS (
				SELECT id FROM core.core_6k_kanji WHERE kanji NOT IN (SELECT unnest(string_to_array(_kanjis, ',')))
			), exclude_core_6k_list AS (
				SELECT core_6k_id FROM core.mtm_core_6k_kanji 
				WHERE core_6k_kanji_id IN (SELECT id FROM exclude_kanji_list) GROUP BY core_6k_id
			), include_core_6k_list AS (
				SELECT core_6k_id, count(core_6k_kanji_id) AS kanji_count FROM core.mtm_core_6k_kanji 
				WHERE core_6k_id NOT IN (SELECT core_6k_id FROM exclude_core_6k_list) GROUP BY core_6k_id
			)

			SELECT b.* , a.kanji_count FROM include_core_6k_list a LEFT JOIN core.core_6k b ON a.core_6k_id=b.id 
			WHERE a.kanji_count BETWEEN _compdlfrom AND _compdlto and b.with_jmdict = true;
			
		RETURN (_cursor);
        end;
$$;


ALTER FUNCTION public.f_compd_core_6k_by_kanji(_kanjis text, _compdlfrom integer, _compdlto integer) OWNER TO postgres;

--
-- TOC entry 530 (class 1255 OID 509599)
-- Name: f_compd_ilo_by_kanji(text, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_compd_ilo_by_kanji(_kanjis text, _compdlfrom integer, _compdlto integer) RETURNS refcursor
    LANGUAGE plpgsql
    AS $$
        declare
			_cursor REFCURSOR := 'ilo_by_kanji';
        begin
		OPEN _cursor FOR 

			WITH exclude_kanji_list AS (
				SELECT id FROM core.ilo_kanji WHERE kanji NOT IN (SELECT unnest(string_to_array(_kanjis, ',')))
			), exclude_ilo_list AS (
				SELECT ilo_id FROM core.mtm_ilo_kanji 
				WHERE ilo_kanji_id IN (SELECT id FROM exclude_kanji_list) GROUP BY ilo_id
			), include_ilo_list AS (
				SELECT ilo_id, count(ilo_kanji_id) AS kanji_count FROM core.mtm_ilo_kanji 
				WHERE ilo_id NOT IN (SELECT ilo_id FROM exclude_ilo_list) GROUP BY ilo_id
			)

			SELECT b.* , a.kanji_count FROM include_ilo_list a LEFT JOIN core.ilo b ON a.ilo_id=b.id 
			WHERE a.kanji_count BETWEEN _compdlfrom AND _compdlto and b.with_jmdict = true;
			
		RETURN (_cursor);
        end;
$$;


ALTER FUNCTION public.f_compd_ilo_by_kanji(_kanjis text, _compdlfrom integer, _compdlto integer) OWNER TO postgres;

--
-- TOC entry 531 (class 1255 OID 509600)
-- Name: f_compd_nres_by_kanji(text, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_compd_nres_by_kanji(_kanjis text, _compdlfrom integer, _compdlto integer) RETURNS refcursor
    LANGUAGE plpgsql
    AS $$
        declare
			_cursor REFCURSOR := 'cmpd_nres';
        begin
		OPEN _cursor FOR 

			WITH exclude_kanji_list AS (
				SELECT id FROM freq.nres_kanji WHERE kanji NOT IN (SELECT unnest(string_to_array(_kanjis, ',')))
			), exclude_list AS (
				SELECT nres_id FROM freq.mtm_nres_kanji 
				WHERE nres_kanji_id IN (SELECT id FROM exclude_kanji_list) GROUP BY nres_id
			), include_list AS (
				SELECT nres_id, count(nres_kanji_id) AS kanji_count FROM freq.mtm_nres_kanji
				WHERE nres_id NOT IN (SELECT nres_id FROM exclude_list) GROUP BY nres_id
			)

			SELECT b.* , a.kanji_count FROM include_list a LEFT JOIN freq.jp_nres_base_aggr b ON a.nres_id=b.id 
			WHERE kanji_count BETWEEN _compdlfrom AND _compdlto;
			
		RETURN (_cursor);
        end;
$$;


ALTER FUNCTION public.f_compd_nres_by_kanji(_kanjis text, _compdlfrom integer, _compdlto integer) OWNER TO postgres;

--
-- TOC entry 532 (class 1255 OID 509601)
-- Name: f_count_gloss_by_kanj(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_count_gloss_by_kanj(_kanj character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $$
	declare
		_result integer;
	begin
		_result := (SELECT count(*) FROM jmdict.gloss WHERE
			entr IN (SELECT entr FROM jmdict.kanj WHERE txt = _kanj));
			
		return _result;
	end;
$$;


ALTER FUNCTION public.f_count_gloss_by_kanj(_kanj character varying) OWNER TO postgres;

--
-- TOC entry 533 (class 1255 OID 509602)
-- Name: f_en_examples_by_kanj_freq(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_en_examples_by_kanj_freq(_jp character varying, _count integer) RETURNS refcursor
    LANGUAGE plpgsql
    AS $$
        declare
			_cursor REFCURSOR;
			_i int;
			_rec record;
        begin
                
        CREATE TEMPORARY TABLE IF NOT EXISTS _tmp_jmdict_en(
			ktxt text,
			rtxt text,
			stxt text) ON COMMIT DELETE ROWS;
        
        _i:=0;
        
        FOR _rec IN select entr from v_jmdict_en_kanj_freq WHERE kanj LIKE _jp order by freq DESC
		LOOP
			if _i >= _count then exit; end if;
						
			insert into _tmp_jmdict_en(ktxt,rtxt,stxt) 
				SELECT 
					(SELECT txt FROM jmdict_en.kanj WHERE entr=_rec.entr LIMIT 1) AS ktxt,
					(SELECT rtxt FROM jmdict_en.vt_rdng WHERE entr=_rec.entr LIMIT 1) AS rtxt,
					(SELECT stxt FROM jmdict_en.vt_sens WHERE entr=_rec.entr LIMIT 1) AS stxt;				
			
			_i:=_i + 1;			
		END LOOP;
        
        OPEN _cursor FOR SELECT * from _tmp_jmdict_en;			
        
		RETURN (_cursor);
        end;
$$;


ALTER FUNCTION public.f_en_examples_by_kanj_freq(_jp character varying, _count integer) OWNER TO postgres;

--
-- TOC entry 534 (class 1255 OID 509603)
-- Name: f_en_sens_by_kanj_and_rdng(character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_en_sens_by_kanj_and_rdng(_kanj character varying, _rdng character varying, _sens integer) RETURNS refcursor
    LANGUAGE plpgsql
    AS $$
        declare
			_cursor REFCURSOR := 'jm_en_sens';
        begin
		OPEN _cursor FOR 
			select * from jmdict_en.sens where sens = _sens and entr = (SELECT id FROM jmdict_en.rk_validity WHERE rtxt=_rdng AND ktxt=_kanj limit 1);
			
		RETURN (_cursor);
        end;
$$;


ALTER FUNCTION public.f_en_sens_by_kanj_and_rdng(_kanj character varying, _rdng character varying, _sens integer) OWNER TO postgres;

--
-- TOC entry 535 (class 1255 OID 509604)
-- Name: f_entr_data_for_estjap(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_entr_data_for_estjap(_entr integer) RETURNS refcursor
    LANGUAGE plpgsql
    AS $$
        declare
			_cursor REFCURSOR := 'entr';
        begin
        
		OPEN _cursor FOR 
			SELECT 
				(SELECT ktxt FROM jmdict.vt_kanj WHERE entr=_entr limit 1) AS ktxt,
				(SELECT rtxt FROM jmdict.vt_rdng WHERE entr=_entr limit 1) AS rtxt,
				(SELECT stxt FROM jmdict.vt_sens3 WHERE entr=_entr limit 1) AS stxt;	
		RETURN (_cursor);
        end;
$$;


ALTER FUNCTION public.f_entr_data_for_estjap(_entr integer) OWNER TO postgres;

--
-- TOC entry 526 (class 1255 OID 509605)
-- Name: f_entr_data_for_japest(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_entr_data_for_japest(_entr integer) RETURNS refcursor
    LANGUAGE plpgsql
    AS $$
        declare
			_cursor REFCURSOR := 'entr';
        begin
        
		OPEN _cursor FOR 
			SELECT 
				(SELECT ktxt FROM jmdict.vt_kanj WHERE entr=_entr limit 1) AS ktxt,
				(SELECT rtxt FROM jmdict.vt_rdng WHERE entr=_entr limit 1) AS rtxt,
				(SELECT stxt FROM jmdict.vt_sens3 WHERE entr=_entr limit 1) AS stxt;	
		RETURN (_cursor);
        end;
$$;


ALTER FUNCTION public.f_entr_data_for_japest(_entr integer) OWNER TO postgres;

--
-- TOC entry 536 (class 1255 OID 509606)
-- Name: f_et_order_et_pagination_small_curs(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_et_order_et_pagination_small_curs(_from integer, _to integer) RETURNS refcursor
    LANGUAGE plpgsql
    AS $$
        declare
			_cursor REFCURSOR := 'et_order_et_pagination_small_curs';
			_sql text;
        begin
		OPEN _cursor FOR 
			SELECT et.id, 
				et.et, 
				ARRAY(SELECT cf_et_sonaliik FROM voca_et WHERE phrase_et_id=et.id) AS cf_et_sonaliigid
			FROM phrase_et et
			WHERE et.id IN 
				(SELECT p.id FROM 
					(SELECT id, (row_number() OVER(ORDER BY et COLLATE "estonian")) AS rn FROM phrase_et) p 
						WHERE p.rn >= _from AND p.rn <= _to
				) 
			ORDER BY et.et COLLATE "estonian";
		RETURN (_cursor);
        end;
$$;


ALTER FUNCTION public.f_et_order_et_pagination_small_curs(_from integer, _to integer) OWNER TO postgres;

--
-- TOC entry 537 (class 1255 OID 509607)
-- Name: f_et_sonaliigid(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_et_sonaliigid(_et text) RETURNS text[]
    LANGUAGE plpgsql
    AS $$
	DECLARE
		_result text[];
	BEGIN
		_result:= (SELECT ARRAY(
			SELECT DISTINCT b.pos FROM estwn.variant a LEFT JOIN estwn.word_meaning b ON a.word_meaning_id=b.id WHERE a.literal = _et) AS sonaliigid);
		
		return _result;
	END;
$$;


ALTER FUNCTION public.f_et_sonaliigid(_et text) OWNER TO postgres;

--
-- TOC entry 538 (class 1255 OID 509608)
-- Name: f_get_entr_et_like(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_get_entr_et_like(_txt character varying, _limit integer) RETURNS refcursor
    LANGUAGE plpgsql
    AS $$
        declare
			_cursor REFCURSOR := 'entr_et';
        begin
		OPEN _cursor FOR 
			SELECT txt, entr FROM jmdict.gloss WHERE upper(txt) LIKE upper(_txt) ORDER BY txt COLLATE "estonian" limit _limit;		
		RETURN (_cursor);
        end;
$$;


ALTER FUNCTION public.f_get_entr_et_like(_txt character varying, _limit integer) OWNER TO postgres;

--
-- TOC entry 539 (class 1255 OID 509609)
-- Name: f_get_entr_jp_like(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_get_entr_jp_like(_txt character varying, _limit integer) RETURNS refcursor
    LANGUAGE plpgsql
    AS $$
        declare
			_cursor REFCURSOR := 'entr_jp';
        begin
		OPEN _cursor FOR 
			SELECT ktxt, entr FROM jmdict.rk_valid WHERE ktxt LIKE _txt  or rtxt like _txt ORDER BY ktxt COLLATE "japanese" limit _limit;
		RETURN (_cursor);
        end;
$$;


ALTER FUNCTION public.f_get_entr_jp_like(_txt character varying, _limit integer) OWNER TO postgres;

--
-- TOC entry 540 (class 1255 OID 509610)
-- Name: f_get_ref_tables(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_get_ref_tables(_table character varying) RETURNS refcursor
    LANGUAGE plpgsql
    AS $$
        declare
			_cursor REFCURSOR := 'ref_tables';
        begin
		OPEN _cursor FOR 
			SELECT
				tc.table_name, kcu.column_name
			FROM 
				information_schema.table_constraints AS tc 
				JOIN information_schema.key_column_usage AS kcu
				  ON tc.constraint_name = kcu.constraint_name
				JOIN information_schema.constraint_column_usage AS ccu
				  ON ccu.constraint_name = tc.constraint_name
			WHERE constraint_type = 'FOREIGN KEY' AND ccu.table_name=_table;
		
		RETURN (_cursor);
        end;
$$;


ALTER FUNCTION public.f_get_ref_tables(_table character varying) OWNER TO postgres;

--
-- TOC entry 541 (class 1255 OID 509611)
-- Name: f_hepburn_replace_long_vowels(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_hepburn_replace_long_vowels(roumaji text) RETURNS text
    LANGUAGE plpgsql
    AS $$
	DECLARE
	BEGIN
		roumaji := replace(roumaji, 'ƒÅ', 'aa');
		roumaji := replace(roumaji, 'ƒì', 'ee');
		roumaji := replace(roumaji, 'ƒ´', 'ii');
		roumaji := replace(roumaji, '≈ç', 'ou');
		roumaji := replace(roumaji, '≈´', 'uu');	
		RETURN roumaji;
	END;
$$;


ALTER FUNCTION public.f_hepburn_replace_long_vowels(roumaji text) OWNER TO postgres;

--
-- TOC entry 542 (class 1255 OID 509612)
-- Name: f_ins_classifier(character varying, character varying, character varying, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_ins_classifier(_table character varying, _title character varying, _descr character varying, _comment character varying, _order_in_line integer, _parent_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
        declare
        _classifier_id integer;
        _id integer;
        _sql text;
        begin
                        
		insert into classifier (title, descr, kommentaar, order_in_line, parent_id) values 
			(_title, _descr, _comment, _order_in_line, _parent_id) returning id into _classifier_id;
				
		_sql:='insert into ' || _table || ' (id, classifier_id) values (' || _classifier_id || ',' || _classifier_id || ');';
		execute _sql;	

		return _classifier_id;
        end;
$$;


ALTER FUNCTION public.f_ins_classifier(_table character varying, _title character varying, _descr character varying, _comment character varying, _order_in_line integer, _parent_id integer) OWNER TO postgres;

--
-- TOC entry 543 (class 1255 OID 509613)
-- Name: f_ins_et(character varying, integer, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_ins_et(_et character varying, _cf_et_sonaliik_id integer, _descr_et character varying, _et_audio_id integer, _cf_origin_for_phrase_et integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
	declare
		_voca_et_id integer;
		_phrase_et_id integer;
	begin
		
		--kas eestikeelne s√µna on juba olemas
		_phrase_et_id:=(select id from phrase_et where et=_et);
		
		if _phrase_et_id is null then
			--kui s√µna ei ole, siis j√§relikult on puudu nii phrase kui voca
			insert into phrase_et(et, audio_id, cf_origin_for_phrase_et) values 
				(_et, _et_audio_id, _cf_origin_for_phrase_et) returning id into _phrase_et_id;
			
			insert into voca_et(cf_et_sonaliik, descr, phrase_et_id) values
				(_cf_et_sonaliik_id, _descr_et, _phrase_et_id) returning id into _voca_et_id;
				
		elseif _phrase_et_id is not null then
							
			_voca_et_id:=(select id from voca_et where phrase_et_id=_phrase_et_id and cf_et_sonaliik=_cf_et_sonaliik_id);
			
			--kui sisestatud s√µnaliigiga eestikeelset s√µna ei ole
			if _voca_et_id is null then
				insert into voca_et(cf_et_sonaliik, descr, phrase_et_id) values
					(_cf_et_sonaliik_id, _descr_et, _phrase_et_id) returning id into _voca_et_id;
			end if;
		end if; 
						
		return _voca_et_id;
	end;
$$;


ALTER FUNCTION public.f_ins_et(_et character varying, _cf_et_sonaliik_id integer, _descr_et character varying, _et_audio_id integer, _cf_origin_for_phrase_et integer) OWNER TO postgres;

--
-- TOC entry 544 (class 1255 OID 509614)
-- Name: f_ins_jmdict_et_gloss(integer, integer, integer, character varying, text, text, integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_ins_jmdict_et_gloss(_entr integer, _sens integer, _gloss integer, _txt character varying, _et_inf text, _jp_inf text, _cf_origin integer, _jatik_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$        
        begin                
            INSERT INTO jmdict.gloss(entr, ginf, gloss, lang, sens, txt)  
				VALUES (_entr,1,_gloss,126,_sens,_txt);                
			
			if _jatik_id is not null then
				INSERT INTO public.jm_entr_jatik(entr, jatik_id) 
					VALUES (_entr, _jatik_id);
			end if;
			
			INSERT INTO public.jm_gloss_inf(entr, et_inf, gloss, jp_inf, sens, cf_origin) 
				VALUES (_entr, _et_inf, _gloss, _jp_inf, _sens, _cf_origin);
        end;
$$;


ALTER FUNCTION public.f_ins_jmdict_et_gloss(_entr integer, _sens integer, _gloss integer, _txt character varying, _et_inf text, _jp_inf text, _cf_origin integer, _jatik_id character varying) OWNER TO postgres;

--
-- TOC entry 545 (class 1255 OID 509615)
-- Name: f_ins_sentence(integer, text, integer, text, text, text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_ins_sentence(_cf_origin integer, _et_sentence text, _et_audio_id integer, _jp_sentence text, _jp_sentence_kana text, _jp_sentence_romaji text, _jp_audio_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
        declare
        _jp_sentence_id integer;
        _sql text;
        begin
                        
		insert into jp_sentence (cf_origin_for_jp_sentence, jp_sentence, jp_sentence_kana, jp_sentence_romaji, audio_id) values 
			(_cf_origin, _jp_sentence, _jp_sentence_kana, _jp_sentence_romaji, _jp_audio_id) returning id into _jp_sentence_id;
						
		insert into et_sentence (jp_sentence_id, cf_origin_for_et_sentence, et_sentence, audio_id) values ( 
			_jp_sentence_id,
			_cf_origin,
			_et_sentence,
			_et_audio_id);

        end;
$$;


ALTER FUNCTION public.f_ins_sentence(_cf_origin integer, _et_sentence text, _et_audio_id integer, _jp_sentence text, _jp_sentence_kana text, _jp_sentence_romaji text, _jp_audio_id integer) OWNER TO postgres;

--
-- TOC entry 546 (class 1255 OID 509616)
-- Name: f_ins_upd_kanji_stroke_image(character varying, character varying, bytea, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_ins_upd_kanji_stroke_image(_kanji character varying, _file_name character varying, _image_file bytea, _copyright character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $$
        declare
		_stroke_image_id integer;
        begin        
		_stroke_image_id:=(select stroke_image_id from kanji where kanji=_kanji);
		
		if _stroke_image_id is null then
			insert into image(file_name, image_file, copyright) values (_file_name, _image_file, _copyright) returning id into _stroke_image_id;			
		else
			update image set file_same=_file_name, image_file=_image_file, copyright=_copyright where id=_stroke_image_id; 
		end if; 

		update kanji set stroke_image_id=_stroke_image_id where kanji=_kanji;
                        
		return _stroke_image_id;
        end;
$$;


ALTER FUNCTION public.f_ins_upd_kanji_stroke_image(_kanji character varying, _file_name character varying, _image_file bytea, _copyright character varying) OWNER TO postgres;

--
-- TOC entry 547 (class 1255 OID 509617)
-- Name: f_ins_upd_report_file(integer, character varying, bytea, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_ins_upd_report_file(_cf_report_type integer, _file_name character varying, _binary_file bytea, _mime character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $$
        declare
			_bfile_id integer;
        begin        
		_bfile_id:=(select id from bfile where cf_report_type=_cf_report_type);
		
		if _bfile_id is null then
			insert into bfile(cf_report_type, file_name, binary_file, mime) values (_cf_report_type, _file_name, _binary_file, _mime) returning id into _bfile_id;			
		else
			update bfile set file_name=_file_name, binary_file=_binary_file, mime=_mime where id=_bfile_id; 
		end if; 
		                
		return _bfile_id;
        end;
$$;


ALTER FUNCTION public.f_ins_upd_report_file(_cf_report_type integer, _file_name character varying, _binary_file bytea, _mime character varying) OWNER TO postgres;

--
-- TOC entry 548 (class 1255 OID 509618)
-- Name: f_kanj_examples_by_freq(character varying, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_kanj_examples_by_freq(_kanj_example character varying, _max_char_length integer, _min_freq integer, _limit integer) RETURNS refcursor
    LANGUAGE plpgsql
    AS $$
        declare
			_cursor REFCURSOR := 'curs';
        begin
		OPEN _cursor FOR 
			
			SELECT 
				DISTINCT a.kanj, a.rdng, a.gloss, b.freq 
			FROM 
				jmdict_en.esum a LEFT JOIN public.v_jmdict_en_kanj_freq b ON a.kanj = b.kanj
			WHERE 
				a.kanj LIKE _kanj_example AND 
				_max_char_length >= char_length(a.kanj) AND 
				b.freq >= _min_freq 
			ORDER BY b.freq DESC LIMIT _limit;			
			
		RETURN (_cursor);
        end;
$$;


ALTER FUNCTION public.f_kanj_examples_by_freq(_kanj_example character varying, _max_char_length integer, _min_freq integer, _limit integer) OWNER TO postgres;

--
-- TOC entry 549 (class 1255 OID 509619)
-- Name: f_kanji_primitives(character, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_kanji_primitives(_kanji character, _delimiter character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
        declare
			_sql text;
			_result character varying;
        begin
			_result:=(SELECT array_to_string(ARRAY(SELECT primitive FROM mtm_kanji_primitive WHERE kanji=_kanji), _delimiter)); 
			return _result;
        end;
$$;


ALTER FUNCTION public.f_kanji_primitives(_kanji character, _delimiter character varying) OWNER TO postgres;

--
-- TOC entry 550 (class 1255 OID 509620)
-- Name: f_kun_yomis_by_kanji(character, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_kun_yomis_by_kanji(_kanji character, _delimiter character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
        declare
			_sql text;
			_result character varying;
        begin
			_result:=(SELECT array_to_string(ARRAY(SELECT kana FROM kun_yomi WHERE kanji=_kanji), _delimiter)); 
			return _result;
        end;
$$;


ALTER FUNCTION public.f_kun_yomis_by_kanji(_kanji character, _delimiter character varying) OWNER TO postgres;

--
-- TOC entry 551 (class 1255 OID 509621)
-- Name: f_on_yomis_by_kanji(character, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_on_yomis_by_kanji(_kanji character, _delimiter character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
        declare
			_result character varying;
        begin
			_result:=(SELECT array_to_string(ARRAY(SELECT kana FROM on_yomi WHERE kanji=_kanji), _delimiter)); 
			return _result;
        end;
$$;


ALTER FUNCTION public.f_on_yomis_by_kanji(_kanji character, _delimiter character varying) OWNER TO postgres;

--
-- TOC entry 552 (class 1255 OID 509622)
-- Name: f_order_jp_by_freq_count(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_order_jp_by_freq_count(_count_gloss_eq integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
        declare
			_result integer;
        begin
			_result := (select count(*) from freq.jp_nres_base_aggr WHERE
				CASE WHEN _count_gloss_eq > -1 THEN 
					public.f_count_gloss_by_kanj(jp) = _count_gloss_eq 
				ELSE TRUE END);
		 
		RETURN _result;
        end;
$$;


ALTER FUNCTION public.f_order_jp_by_freq_count(_count_gloss_eq integer) OWNER TO postgres;

--
-- TOC entry 553 (class 1255 OID 509623)
-- Name: f_order_jp_by_freq_paged(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_order_jp_by_freq_paged(_from integer, _to integer, _count_gloss_eq integer) RETURNS refcursor
    LANGUAGE plpgsql
    AS $$
        declare
			_cursor REFCURSOR := 'freq_jp_pag';
        begin
		OPEN _cursor FOR 
			SELECT fr.id, fr.freq, fr.jp, fr.types, f_count_gloss_by_kanj(jp) AS count_gloss
				FROM freq.jp_nres_base_aggr fr
				WHERE fr.id IN 
					(SELECT p.id FROM 
						(SELECT id, (row_number() OVER(ORDER BY freq DESC)) AS rn FROM freq.jp_nres_base_aggr
							WHERE CASE WHEN _count_gloss_eq > -1 THEN public.f_count_gloss_by_kanj(jp) = _count_gloss_eq ELSE TRUE END) p 
								WHERE p.rn >= _from AND p.rn <= _to
					) 
				ORDER BY fr.freq DESC;
		RETURN (_cursor);
        end;
$$;


ALTER FUNCTION public.f_order_jp_by_freq_paged(_from integer, _to integer, _count_gloss_eq integer) OWNER TO postgres;

--
-- TOC entry 554 (class 1255 OID 509624)
-- Name: f_sens_by_kanj_and_rdng(character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_sens_by_kanj_and_rdng(_kanj character varying, _rdng character varying, _sens integer) RETURNS refcursor
    LANGUAGE plpgsql
    AS $$
        declare
			_cursor REFCURSOR := 'jm_sens';
        begin
		OPEN _cursor FOR 

			--select * from jmdict.sens where sens = _sens and entr = (SELECT id FROM jmdict.rk_validity WHERE rtxt=_rdng AND ktxt=_kanj limit 1);
			select * from jmdict.sens where sens = _sens and entr = (SELECT entr FROM jmdict.rk_valid WHERE rtxt=_rdng AND ktxt=_kanj limit 1);
			
			
		RETURN (_cursor);
        end;
$$;


ALTER FUNCTION public.f_sens_by_kanj_and_rdng(_kanj character varying, _rdng character varying, _sens integer) OWNER TO postgres;

SET search_path = ac, pg_catalog;

--
-- TOC entry 182 (class 1259 OID 509625)
-- Name: authority; Type: TABLE; Schema: ac; Owner: postgres; Tablespace: 
--

CREATE TABLE authority (
    name character varying(50) NOT NULL
);


ALTER TABLE ac.authority OWNER TO postgres;

--
-- TOC entry 183 (class 1259 OID 509628)
-- Name: persistent_audit_event_event_id_seq; Type: SEQUENCE; Schema: ac; Owner: postgres
--

CREATE SEQUENCE persistent_audit_event_event_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ac.persistent_audit_event_event_id_seq OWNER TO postgres;

--
-- TOC entry 184 (class 1259 OID 509630)
-- Name: persistent_audit_event; Type: TABLE; Schema: ac; Owner: postgres; Tablespace: 
--

CREATE TABLE persistent_audit_event (
    event_id integer DEFAULT nextval('persistent_audit_event_event_id_seq'::regclass) NOT NULL,
    principal character varying(255) NOT NULL,
    event_date timestamp with time zone,
    event_type character varying(255)
);


ALTER TABLE ac.persistent_audit_event OWNER TO postgres;

--
-- TOC entry 185 (class 1259 OID 509637)
-- Name: persistent_audit_event_data; Type: TABLE; Schema: ac; Owner: postgres; Tablespace: 
--

CREATE TABLE persistent_audit_event_data (
    event_id integer NOT NULL,
    name character varying(255) NOT NULL,
    value character varying(255)
);


ALTER TABLE ac.persistent_audit_event_data OWNER TO postgres;

--
-- TOC entry 186 (class 1259 OID 509649)
-- Name: user; Type: TABLE; Schema: ac; Owner: postgres; Tablespace: 
--

CREATE TABLE "user" (
    login character varying(50) NOT NULL,
    password character varying(100),
    first_name character varying(50),
    last_name character varying(50),
    email character varying(100),
    activated boolean DEFAULT false NOT NULL,
    lang_key character varying(5),
    activation_key character varying(20),
    created_by character varying(50) DEFAULT 'system'::character varying NOT NULL,
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    last_modified_by character varying(50),
    last_modified_date timestamp with time zone
);


ALTER TABLE ac."user" OWNER TO postgres;

--
-- TOC entry 187 (class 1259 OID 509655)
-- Name: user_authority; Type: TABLE; Schema: ac; Owner: postgres; Tablespace: 
--

CREATE TABLE user_authority (
    login character varying(50) NOT NULL,
    name character varying(50) NOT NULL
);


ALTER TABLE ac.user_authority OWNER TO postgres;

SET search_path = core, pg_catalog;

--
-- TOC entry 188 (class 1259 OID 509666)
-- Name: core_10k_kanji; Type: TABLE; Schema: core; Owner: postgres; Tablespace: 
--

CREATE TABLE core_10k_kanji (
    id integer NOT NULL,
    kanji character varying(1) NOT NULL
);


ALTER TABLE core.core_10k_kanji OWNER TO postgres;

--
-- TOC entry 189 (class 1259 OID 509669)
-- Name: core_10k_kanji_id_seq; Type: SEQUENCE; Schema: core; Owner: postgres
--

CREATE SEQUENCE core_10k_kanji_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE core.core_10k_kanji_id_seq OWNER TO postgres;

--
-- TOC entry 4159 (class 0 OID 0)
-- Dependencies: 189
-- Name: core_10k_kanji_id_seq; Type: SEQUENCE OWNED BY; Schema: core; Owner: postgres
--

ALTER SEQUENCE core_10k_kanji_id_seq OWNED BY core_10k_kanji.id;


--
-- TOC entry 190 (class 1259 OID 509671)
-- Name: core_10k_raw_id_seq; Type: SEQUENCE; Schema: core; Owner: postgres
--

CREATE SEQUENCE core_10k_raw_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE core.core_10k_raw_id_seq OWNER TO postgres;

--
-- TOC entry 4160 (class 0 OID 0)
-- Dependencies: 190
-- Name: core_10k_raw_id_seq; Type: SEQUENCE OWNED BY; Schema: core; Owner: postgres
--

ALTER SEQUENCE core_10k_raw_id_seq OWNED BY core_10k.id;


--
-- TOC entry 191 (class 1259 OID 509673)
-- Name: core_6k; Type: TABLE; Schema: core; Owner: postgres; Tablespace: 
--

CREATE TABLE core_6k (
    word text NOT NULL,
    word_reading text NOT NULL,
    word_furigana text NOT NULL,
    word_romaji text NOT NULL,
    word_translation text NOT NULL,
    word_pos text NOT NULL,
    word_audio text NOT NULL,
    sentence text NOT NULL,
    sentence_reading text NOT NULL,
    sentence_furigana text NOT NULL,
    sentence_romaji text NOT NULL,
    sentence_translation text NOT NULL,
    sentence_audio text NOT NULL,
    sentence_picture text NOT NULL,
    id integer NOT NULL,
    with_jmdict boolean DEFAULT false NOT NULL
);


ALTER TABLE core.core_6k OWNER TO postgres;

--
-- TOC entry 4161 (class 0 OID 0)
-- Dependencies: 191
-- Name: TABLE core_6k; Type: COMMENT; Schema: core; Owner: postgres
--

COMMENT ON TABLE core_6k IS 'http://forum.koohii.com/viewtopic.php?id=10292';


--
-- TOC entry 192 (class 1259 OID 509680)
-- Name: core_6k_kanji; Type: TABLE; Schema: core; Owner: postgres; Tablespace: 
--

CREATE TABLE core_6k_kanji (
    id integer NOT NULL,
    kanji character varying(1) NOT NULL
);


ALTER TABLE core.core_6k_kanji OWNER TO postgres;

--
-- TOC entry 193 (class 1259 OID 509683)
-- Name: core_6k_kanji_id_seq; Type: SEQUENCE; Schema: core; Owner: postgres
--

CREATE SEQUENCE core_6k_kanji_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE core.core_6k_kanji_id_seq OWNER TO postgres;

--
-- TOC entry 4162 (class 0 OID 0)
-- Dependencies: 193
-- Name: core_6k_kanji_id_seq; Type: SEQUENCE OWNED BY; Schema: core; Owner: postgres
--

ALTER SEQUENCE core_6k_kanji_id_seq OWNED BY core_6k_kanji.id;


--
-- TOC entry 194 (class 1259 OID 509685)
-- Name: ilo; Type: TABLE; Schema: core; Owner: postgres; Tablespace: 
--

CREATE TABLE ilo (
    word_romaji text NOT NULL,
    word text NOT NULL,
    word_pos text NOT NULL,
    word_translation text NOT NULL,
    comment text,
    word_reading text NOT NULL,
    id integer NOT NULL,
    with_jmdict boolean NOT NULL
);


ALTER TABLE core.ilo OWNER TO postgres;

--
-- TOC entry 4163 (class 0 OID 0)
-- Dependencies: 194
-- Name: TABLE ilo; Type: COMMENT; Schema: core; Owner: postgres
--

COMMENT ON TABLE ilo IS 'ILO kollane Jaapani-Eesti taskus√µnastik. 2004';


--
-- TOC entry 195 (class 1259 OID 509691)
-- Name: ilo_id_seq; Type: SEQUENCE; Schema: core; Owner: postgres
--

CREATE SEQUENCE ilo_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE core.ilo_id_seq OWNER TO postgres;

--
-- TOC entry 4164 (class 0 OID 0)
-- Dependencies: 195
-- Name: ilo_id_seq; Type: SEQUENCE OWNED BY; Schema: core; Owner: postgres
--

ALTER SEQUENCE ilo_id_seq OWNED BY ilo.id;


--
-- TOC entry 196 (class 1259 OID 509693)
-- Name: ilo_kanji; Type: TABLE; Schema: core; Owner: postgres; Tablespace: 
--

CREATE TABLE ilo_kanji (
    id integer NOT NULL,
    kanji character varying(1) NOT NULL
);


ALTER TABLE core.ilo_kanji OWNER TO postgres;

--
-- TOC entry 4165 (class 0 OID 0)
-- Dependencies: 196
-- Name: TABLE ilo_kanji; Type: COMMENT; Schema: core; Owner: postgres
--

COMMENT ON TABLE ilo_kanji IS 'ILO s√µnastikust v√µetud jaapanikeelsete s√ºnade kanjid. K√µik erinevad kanjid, mis s√µnastikus saadaval olid';


--
-- TOC entry 197 (class 1259 OID 509696)
-- Name: ilo_kanji_id_seq; Type: SEQUENCE; Schema: core; Owner: postgres
--

CREATE SEQUENCE ilo_kanji_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE core.ilo_kanji_id_seq OWNER TO postgres;

--
-- TOC entry 4166 (class 0 OID 0)
-- Dependencies: 197
-- Name: ilo_kanji_id_seq; Type: SEQUENCE OWNED BY; Schema: core; Owner: postgres
--

ALTER SEQUENCE ilo_kanji_id_seq OWNED BY ilo_kanji.id;


--
-- TOC entry 198 (class 1259 OID 509698)
-- Name: mtm_core_10k_kanji; Type: TABLE; Schema: core; Owner: postgres; Tablespace: 
--

CREATE TABLE mtm_core_10k_kanji (
    id integer NOT NULL,
    core_10k_id integer NOT NULL,
    core_10k_kanji_id integer NOT NULL
);


ALTER TABLE core.mtm_core_10k_kanji OWNER TO postgres;

--
-- TOC entry 199 (class 1259 OID 509701)
-- Name: mtm_core_10k_kanji_id_seq; Type: SEQUENCE; Schema: core; Owner: postgres
--

CREATE SEQUENCE mtm_core_10k_kanji_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE core.mtm_core_10k_kanji_id_seq OWNER TO postgres;

--
-- TOC entry 4167 (class 0 OID 0)
-- Dependencies: 199
-- Name: mtm_core_10k_kanji_id_seq; Type: SEQUENCE OWNED BY; Schema: core; Owner: postgres
--

ALTER SEQUENCE mtm_core_10k_kanji_id_seq OWNED BY mtm_core_10k_kanji.id;


--
-- TOC entry 200 (class 1259 OID 509703)
-- Name: mtm_core_6k_kanji; Type: TABLE; Schema: core; Owner: postgres; Tablespace: 
--

CREATE TABLE mtm_core_6k_kanji (
    id integer NOT NULL,
    core_6k_id integer NOT NULL,
    core_6k_kanji_id integer NOT NULL
);


ALTER TABLE core.mtm_core_6k_kanji OWNER TO postgres;

--
-- TOC entry 201 (class 1259 OID 509706)
-- Name: mtm_core_6k_kanji_id_seq; Type: SEQUENCE; Schema: core; Owner: postgres
--

CREATE SEQUENCE mtm_core_6k_kanji_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE core.mtm_core_6k_kanji_id_seq OWNER TO postgres;

--
-- TOC entry 4168 (class 0 OID 0)
-- Dependencies: 201
-- Name: mtm_core_6k_kanji_id_seq; Type: SEQUENCE OWNED BY; Schema: core; Owner: postgres
--

ALTER SEQUENCE mtm_core_6k_kanji_id_seq OWNED BY mtm_core_6k_kanji.id;


--
-- TOC entry 202 (class 1259 OID 509708)
-- Name: mtm_ilo_kanji; Type: TABLE; Schema: core; Owner: postgres; Tablespace: 
--

CREATE TABLE mtm_ilo_kanji (
    id integer NOT NULL,
    ilo_id integer NOT NULL,
    ilo_kanji_id integer NOT NULL
);


ALTER TABLE core.mtm_ilo_kanji OWNER TO postgres;

--
-- TOC entry 203 (class 1259 OID 509711)
-- Name: mtm_ilo_kanji_id_seq; Type: SEQUENCE; Schema: core; Owner: postgres
--

CREATE SEQUENCE mtm_ilo_kanji_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE core.mtm_ilo_kanji_id_seq OWNER TO postgres;

--
-- TOC entry 4169 (class 0 OID 0)
-- Dependencies: 203
-- Name: mtm_ilo_kanji_id_seq; Type: SEQUENCE OWNED BY; Schema: core; Owner: postgres
--

ALTER SEQUENCE mtm_ilo_kanji_id_seq OWNED BY mtm_ilo_kanji.id;


--
-- TOC entry 204 (class 1259 OID 509713)
-- Name: v_core_10k; Type: TABLE; Schema: core; Owner: postgres; Tablespace: 
--

CREATE TABLE v_core_10k (
    word character varying(255),
    word_reading text,
    sentence text,
    sentence_audio text,
    word_audio text,
    word_translation text,
    mnemonic text,
    master_index text,
    level character varying,
    sentence_reading text,
    sentence_translation text,
    word_alt_def text,
    id integer,
    with_jmdict boolean,
    kanji_count bigint,
    ktxt_kanjis text
);


ALTER TABLE core.v_core_10k OWNER TO postgres;

--
-- TOC entry 205 (class 1259 OID 509719)
-- Name: v_core_10k_stats; Type: VIEW; Schema: core; Owner: postgres
--

CREATE VIEW v_core_10k_stats AS
 WITH core_view AS (
         SELECT v_core_10k.kanji_count,
            v_core_10k.with_jmdict
           FROM v_core_10k
        ), raw_stats AS (
         SELECT ( SELECT count(*) AS count
                   FROM core_view) AS word_count,
            ( SELECT count(*) AS count
                   FROM core_view
                  WHERE (core_view.kanji_count > 0)) AS words_with_kanji_count,
            ( SELECT max(core_view.kanji_count) AS max
                   FROM core_view) AS max_kanji_count,
            ( SELECT round(avg(core_view.kanji_count), 2) AS round
                   FROM core_view
                  WHERE (core_view.kanji_count > 0)) AS avg_kanji_count,
            ( SELECT count(*) AS count
                   FROM core_view
                  WHERE (core_view.with_jmdict = true)) AS with_jmdict_count
        )
 SELECT a.word_count,
    a.words_with_kanji_count,
    a.max_kanji_count,
    a.avg_kanji_count,
    a.with_jmdict_count,
    ( SELECT round(((1.0 * (a.with_jmdict_count)::numeric) / (a.word_count)::numeric), 2) AS round) AS with_jmdict_share
   FROM raw_stats a;


ALTER TABLE core.v_core_10k_stats OWNER TO postgres;

--
-- TOC entry 206 (class 1259 OID 509724)
-- Name: v_core_6k; Type: TABLE; Schema: core; Owner: postgres; Tablespace: 
--

CREATE TABLE v_core_6k (
    word text,
    word_reading text,
    word_furigana text,
    word_romaji text,
    word_translation text,
    word_pos text,
    word_audio text,
    sentence text,
    sentence_reading text,
    sentence_furigana text,
    sentence_romaji text,
    sentence_translation text,
    sentence_audio text,
    sentence_picture text,
    id integer,
    with_jmdict boolean,
    kanji_count bigint,
    ktxt_kanjis text
);


ALTER TABLE core.v_core_6k OWNER TO postgres;

--
-- TOC entry 207 (class 1259 OID 509730)
-- Name: v_core_6k_stats; Type: VIEW; Schema: core; Owner: postgres
--

CREATE VIEW v_core_6k_stats AS
 WITH core_view AS (
         SELECT v_core_6k.kanji_count,
            v_core_6k.with_jmdict
           FROM v_core_6k
        ), raw_stats AS (
         SELECT ( SELECT count(*) AS count
                   FROM core_view) AS word_count,
            ( SELECT count(*) AS count
                   FROM core_view
                  WHERE (core_view.kanji_count > 0)) AS words_with_kanji_count,
            ( SELECT max(core_view.kanji_count) AS max
                   FROM core_view) AS max_kanji_count,
            ( SELECT round(avg(core_view.kanji_count), 2) AS round
                   FROM core_view
                  WHERE (core_view.kanji_count > 0)) AS avg_kanji_count,
            ( SELECT count(*) AS count
                   FROM core_view
                  WHERE (core_view.with_jmdict = true)) AS with_jmdict_count
        )
 SELECT a.word_count,
    a.words_with_kanji_count,
    a.max_kanji_count,
    a.avg_kanji_count,
    a.with_jmdict_count,
    ( SELECT round(((1.0 * (a.with_jmdict_count)::numeric) / (a.word_count)::numeric), 2) AS round) AS with_jmdict_share
   FROM raw_stats a;


ALTER TABLE core.v_core_6k_stats OWNER TO postgres;

--
-- TOC entry 208 (class 1259 OID 509735)
-- Name: v_ilo; Type: TABLE; Schema: core; Owner: postgres; Tablespace: 
--

CREATE TABLE v_ilo (
    romaji text,
    txt text,
    pos text,
    gloss text,
    comment text,
    rdng text,
    id integer,
    with_jmdict boolean,
    kanji_count bigint,
    ktxt_kanjis text
);


ALTER TABLE core.v_ilo OWNER TO postgres;

--
-- TOC entry 209 (class 1259 OID 509741)
-- Name: v_ilo_stats; Type: VIEW; Schema: core; Owner: postgres
--

CREATE VIEW v_ilo_stats AS
 WITH core_view AS (
         SELECT v_ilo.kanji_count,
            v_ilo.with_jmdict
           FROM v_ilo
        ), raw_stats AS (
         SELECT ( SELECT count(*) AS count
                   FROM core_view) AS word_count,
            ( SELECT count(*) AS count
                   FROM core_view
                  WHERE (core_view.kanji_count > 0)) AS words_with_kanji_count,
            ( SELECT max(core_view.kanji_count) AS max
                   FROM core_view) AS max_kanji_count,
            ( SELECT round(avg(core_view.kanji_count), 2) AS round
                   FROM core_view
                  WHERE (core_view.kanji_count > 0)) AS avg_kanji_count,
            ( SELECT count(*) AS count
                   FROM core_view
                  WHERE (core_view.with_jmdict = true)) AS with_jmdict_count
        )
 SELECT a.word_count,
    a.words_with_kanji_count,
    a.max_kanji_count,
    a.avg_kanji_count,
    a.with_jmdict_count,
    ( SELECT round(((1.0 * (a.with_jmdict_count)::numeric) / (a.word_count)::numeric), 2) AS round) AS with_jmdict_share
   FROM raw_stats a;


ALTER TABLE core.v_ilo_stats OWNER TO postgres;

--
-- TOC entry 486 (class 1259 OID 655230)
-- Name: v_core_stats; Type: VIEW; Schema: core; Owner: postgres
--

CREATE VIEW v_core_stats AS
 SELECT 'ilo'::text AS resource,
    v_ilo_stats.word_count,
    v_ilo_stats.words_with_kanji_count,
    v_ilo_stats.max_kanji_count,
    v_ilo_stats.avg_kanji_count,
    v_ilo_stats.with_jmdict_count,
    v_ilo_stats.with_jmdict_share
   FROM v_ilo_stats
UNION
 SELECT 'core_6k'::text AS resource,
    v_core_6k_stats.word_count,
    v_core_6k_stats.words_with_kanji_count,
    v_core_6k_stats.max_kanji_count,
    v_core_6k_stats.avg_kanji_count,
    v_core_6k_stats.with_jmdict_count,
    v_core_6k_stats.with_jmdict_share
   FROM v_core_6k_stats
UNION
 SELECT 'core_10k'::text AS resource,
    v_core_10k_stats.word_count,
    v_core_10k_stats.words_with_kanji_count,
    v_core_10k_stats.max_kanji_count,
    v_core_10k_stats.avg_kanji_count,
    v_core_10k_stats.with_jmdict_count,
    v_core_10k_stats.with_jmdict_share
   FROM v_core_10k_stats
  ORDER BY 1 DESC;


ALTER TABLE core.v_core_stats OWNER TO postgres;

SET search_path = estwn, pg_catalog;

--
-- TOC entry 210 (class 1259 OID 509746)
-- Name: example_id_seq; Type: SEQUENCE; Schema: estwn; Owner: postgres
--

CREATE SEQUENCE example_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE estwn.example_id_seq OWNER TO postgres;

--
-- TOC entry 211 (class 1259 OID 509748)
-- Name: example; Type: TABLE; Schema: estwn; Owner: postgres; Tablespace: 
--

CREATE TABLE example (
    example text NOT NULL,
    id integer DEFAULT nextval('example_id_seq'::regclass) NOT NULL,
    variant_id integer NOT NULL
);


ALTER TABLE estwn.example OWNER TO postgres;

--
-- TOC entry 212 (class 1259 OID 509755)
-- Name: variant_id_seq; Type: SEQUENCE; Schema: estwn; Owner: postgres
--

CREATE SEQUENCE variant_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE estwn.variant_id_seq OWNER TO postgres;

--
-- TOC entry 213 (class 1259 OID 509757)
-- Name: variant; Type: TABLE; Schema: estwn; Owner: postgres; Tablespace: 
--

CREATE TABLE variant (
    definition text,
    id integer DEFAULT nextval('variant_id_seq'::regclass) NOT NULL,
    literal text NOT NULL,
    word_meaning_id integer NOT NULL
);


ALTER TABLE estwn.variant OWNER TO postgres;

--
-- TOC entry 214 (class 1259 OID 509764)
-- Name: word_meaning; Type: TABLE; Schema: estwn; Owner: postgres; Tablespace: 
--

CREATE TABLE word_meaning (
    id integer NOT NULL,
    pos character varying(1) NOT NULL
);


ALTER TABLE estwn.word_meaning OWNER TO postgres;

--
-- TOC entry 215 (class 1259 OID 509767)
-- Name: word_meaning_id_seq; Type: SEQUENCE; Schema: estwn; Owner: postgres
--

CREATE SEQUENCE word_meaning_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE estwn.word_meaning_id_seq OWNER TO postgres;

--
-- TOC entry 4170 (class 0 OID 0)
-- Dependencies: 215
-- Name: word_meaning_id_seq; Type: SEQUENCE OWNED BY; Schema: estwn; Owner: postgres
--

ALTER SEQUENCE word_meaning_id_seq OWNED BY word_meaning.id;


SET search_path = freq, pg_catalog;

--
-- TOC entry 216 (class 1259 OID 509769)
-- Name: jp_nres_base_aggr; Type: TABLE; Schema: freq; Owner: postgres; Tablespace: 
--

CREATE TABLE jp_nres_base_aggr (
    jp text NOT NULL,
    types text NOT NULL,
    freq integer NOT NULL,
    id integer NOT NULL,
    kanji_ids integer[]
);


ALTER TABLE freq.jp_nres_base_aggr OWNER TO postgres;

--
-- TOC entry 217 (class 1259 OID 509775)
-- Name: jp_freq_id_seq; Type: SEQUENCE; Schema: freq; Owner: postgres
--

CREATE SEQUENCE jp_freq_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE freq.jp_freq_id_seq OWNER TO postgres;

--
-- TOC entry 4171 (class 0 OID 0)
-- Dependencies: 217
-- Name: jp_freq_id_seq; Type: SEQUENCE OWNED BY; Schema: freq; Owner: postgres
--

ALTER SEQUENCE jp_freq_id_seq OWNED BY jp_nres_base_aggr.id;


--
-- TOC entry 218 (class 1259 OID 509777)
-- Name: mtm_nres_kanji; Type: TABLE; Schema: freq; Owner: postgres; Tablespace: 
--

CREATE TABLE mtm_nres_kanji (
    id integer NOT NULL,
    nres_id integer NOT NULL,
    nres_kanji_id integer NOT NULL,
    kanji_id integer
);


ALTER TABLE freq.mtm_nres_kanji OWNER TO postgres;

--
-- TOC entry 219 (class 1259 OID 509780)
-- Name: mtm_nres_kanji_id_seq; Type: SEQUENCE; Schema: freq; Owner: postgres
--

CREATE SEQUENCE mtm_nres_kanji_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE freq.mtm_nres_kanji_id_seq OWNER TO postgres;

--
-- TOC entry 4172 (class 0 OID 0)
-- Dependencies: 219
-- Name: mtm_nres_kanji_id_seq; Type: SEQUENCE OWNED BY; Schema: freq; Owner: postgres
--

ALTER SEQUENCE mtm_nres_kanji_id_seq OWNED BY mtm_nres_kanji.id;


--
-- TOC entry 220 (class 1259 OID 509782)
-- Name: nres_kanji; Type: TABLE; Schema: freq; Owner: postgres; Tablespace: 
--

CREATE TABLE nres_kanji (
    id integer NOT NULL,
    kanji character varying(1) NOT NULL
);


ALTER TABLE freq.nres_kanji OWNER TO postgres;

--
-- TOC entry 221 (class 1259 OID 509785)
-- Name: nres_kanji_id_seq; Type: SEQUENCE; Schema: freq; Owner: postgres
--

CREATE SEQUENCE nres_kanji_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE freq.nres_kanji_id_seq OWNER TO postgres;

--
-- TOC entry 4173 (class 0 OID 0)
-- Dependencies: 221
-- Name: nres_kanji_id_seq; Type: SEQUENCE OWNED BY; Schema: freq; Owner: postgres
--

ALTER SEQUENCE nres_kanji_id_seq OWNED BY nres_kanji.id;


--
-- TOC entry 489 (class 1259 OID 655410)
-- Name: tofu_sentence; Type: TABLE; Schema: freq; Owner: postgres; Tablespace: 
--

CREATE TABLE tofu_sentence (
    id integer NOT NULL,
    word text NOT NULL,
    sentence text NOT NULL
);


ALTER TABLE freq.tofu_sentence OWNER TO postgres;

--
-- TOC entry 4174 (class 0 OID 0)
-- Dependencies: 489
-- Name: TABLE tofu_sentence; Type: COMMENT; Schema: freq; Owner: postgres
--

COMMENT ON TABLE tofu_sentence IS 'Tofugu 4500 sentences';


--
-- TOC entry 488 (class 1259 OID 655408)
-- Name: tofu_sentence_id_seq; Type: SEQUENCE; Schema: freq; Owner: postgres
--

CREATE SEQUENCE tofu_sentence_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE freq.tofu_sentence_id_seq OWNER TO postgres;

--
-- TOC entry 4175 (class 0 OID 0)
-- Dependencies: 488
-- Name: tofu_sentence_id_seq; Type: SEQUENCE OWNED BY; Schema: freq; Owner: postgres
--

ALTER SEQUENCE tofu_sentence_id_seq OWNED BY tofu_sentence.id;


--
-- TOC entry 490 (class 1259 OID 655439)
-- Name: tofu_sentence_translation; Type: TABLE; Schema: freq; Owner: postgres; Tablespace: 
--

CREATE TABLE tofu_sentence_translation (
    created_by character varying(50) NOT NULL,
    lang character varying(2) NOT NULL,
    tofu_sentence_id integer NOT NULL,
    translation text NOT NULL,
    id integer NOT NULL
);


ALTER TABLE freq.tofu_sentence_translation OWNER TO postgres;

--
-- TOC entry 491 (class 1259 OID 663822)
-- Name: tofu_sentence_translation_id_seq; Type: SEQUENCE; Schema: freq; Owner: postgres
--

CREATE SEQUENCE tofu_sentence_translation_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE freq.tofu_sentence_translation_id_seq OWNER TO postgres;

--
-- TOC entry 4176 (class 0 OID 0)
-- Dependencies: 491
-- Name: tofu_sentence_translation_id_seq; Type: SEQUENCE OWNED BY; Schema: freq; Owner: postgres
--

ALTER SEQUENCE tofu_sentence_translation_id_seq OWNED BY tofu_sentence_translation.id;


SET search_path = heisig, pg_catalog;

--
-- TOC entry 222 (class 1259 OID 509787)
-- Name: heisig4; Type: TABLE; Schema: heisig; Owner: postgres; Tablespace: 
--

CREATE TABLE heisig4 (
    constituent text[],
    heisig_comment text,
    heisig_story text,
    id integer NOT NULL,
    kanji character varying(1) NOT NULL,
    keyword_en text NOT NULL,
    lesson_no integer NOT NULL,
    my_story text
);


ALTER TABLE heisig.heisig4 OWNER TO postgres;

--
-- TOC entry 4177 (class 0 OID 0)
-- Dependencies: 222
-- Name: TABLE heisig4; Type: COMMENT; Schema: heisig; Owner: postgres
--

COMMENT ON TABLE heisig4 IS 'Heisig RTK1 tr√ºkk nr.4 kanjide nimekiri';


--
-- TOC entry 4178 (class 0 OID 0)
-- Dependencies: 222
-- Name: COLUMN heisig4.id; Type: COMMENT; Schema: heisig; Owner: postgres
--

COMMENT ON COLUMN heisig4.id IS 'Heisig4 frame number';


--
-- TOC entry 223 (class 1259 OID 509793)
-- Name: heisig6; Type: TABLE; Schema: heisig; Owner: postgres; Tablespace: 
--

CREATE TABLE heisig6 (
    constituents text,
    heisig_comment text,
    heisig_story text,
    id integer NOT NULL,
    kanji character varying(1) NOT NULL,
    keyword_en text NOT NULL,
    keyword_et text,
    keyword_jp text,
    lesson_no integer NOT NULL,
    my_story text,
    kanji_id integer NOT NULL
);


ALTER TABLE heisig.heisig6 OWNER TO postgres;

--
-- TOC entry 4179 (class 0 OID 0)
-- Dependencies: 223
-- Name: TABLE heisig6; Type: COMMENT; Schema: heisig; Owner: postgres
--

COMMENT ON TABLE heisig6 IS 'This table consists of data from the Anki deck
https://ankiweb.net/shared/info/1064504798

Plus my own addition of Estonian keywords and the stories that help me to memorize the kanji.';


--
-- TOC entry 4180 (class 0 OID 0)
-- Dependencies: 223
-- Name: COLUMN heisig6.heisig_story; Type: COMMENT; Schema: heisig; Owner: postgres
--

COMMENT ON COLUMN heisig6.heisig_story IS 'Heisig story';


--
-- TOC entry 4181 (class 0 OID 0)
-- Dependencies: 223
-- Name: COLUMN heisig6.id; Type: COMMENT; Schema: heisig; Owner: postgres
--

COMMENT ON COLUMN heisig6.id IS 'Heisig6 frame number';


--
-- TOC entry 4182 (class 0 OID 0)
-- Dependencies: 223
-- Name: COLUMN heisig6.keyword_en; Type: COMMENT; Schema: heisig; Owner: postgres
--

COMMENT ON COLUMN heisig6.keyword_en IS 'Heisig6 keyword';


--
-- TOC entry 4183 (class 0 OID 0)
-- Dependencies: 223
-- Name: COLUMN heisig6.lesson_no; Type: COMMENT; Schema: heisig; Owner: postgres
--

COMMENT ON COLUMN heisig6.lesson_no IS 'Heisig RTK6 lesson';


--
-- TOC entry 224 (class 1259 OID 509799)
-- Name: heisig_core_kw; Type: TABLE; Schema: heisig; Owner: postgres; Tablespace: 
--

CREATE TABLE heisig_core_kw (
    id integer NOT NULL,
    kanji character varying(1) NOT NULL,
    keyword_en character varying(2044),
    word text NOT NULL,
    word_reading text NOT NULL,
    word_translation text,
    audio_addr text,
    word_audio bytea,
    word_audio_file_name text
);


ALTER TABLE heisig.heisig_core_kw OWNER TO postgres;

--
-- TOC entry 225 (class 1259 OID 509805)
-- Name: heisig_katakana; Type: TABLE; Schema: heisig; Owner: postgres; Tablespace: 
--

CREATE TABLE heisig_katakana (
    kana character varying(1) NOT NULL,
    lesson integer NOT NULL,
    lesson_seq integer NOT NULL,
    my_story character varying
);


ALTER TABLE heisig.heisig_katakana OWNER TO postgres;

--
-- TOC entry 226 (class 1259 OID 509811)
-- Name: heisig_katakana_voca_id_seq; Type: SEQUENCE; Schema: heisig; Owner: postgres
--

CREATE SEQUENCE heisig_katakana_voca_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE heisig.heisig_katakana_voca_id_seq OWNER TO postgres;

--
-- TOC entry 227 (class 1259 OID 509813)
-- Name: heisig_katakana_voca; Type: TABLE; Schema: heisig; Owner: postgres; Tablespace: 
--

CREATE TABLE heisig_katakana_voca (
    id integer DEFAULT nextval('heisig_katakana_voca_id_seq'::regclass) NOT NULL,
    kana_in_focus character varying(1) NOT NULL,
    word_en character varying(128) NOT NULL,
    word_et character varying(128),
    word_kana character varying(128) NOT NULL,
    word_romaji character varying(128) NOT NULL
);


ALTER TABLE heisig.heisig_katakana_voca OWNER TO postgres;

--
-- TOC entry 228 (class 1259 OID 509820)
-- Name: koohii_story; Type: TABLE; Schema: heisig; Owner: postgres; Tablespace: 
--

CREATE TABLE koohii_story (
    kanji character varying(1) NOT NULL,
    story text NOT NULL,
    story_seq integer,
    id integer NOT NULL
);


ALTER TABLE heisig.koohii_story OWNER TO postgres;

--
-- TOC entry 229 (class 1259 OID 509826)
-- Name: koohii_story_id_seq; Type: SEQUENCE; Schema: heisig; Owner: postgres
--

CREATE SEQUENCE koohii_story_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE heisig.koohii_story_id_seq OWNER TO postgres;

--
-- TOC entry 4184 (class 0 OID 0)
-- Dependencies: 229
-- Name: koohii_story_id_seq; Type: SEQUENCE OWNED BY; Schema: heisig; Owner: postgres
--

ALTER SEQUENCE koohii_story_id_seq OWNED BY koohii_story.id;


SET search_path = kanjidic2, pg_catalog;

--
-- TOC entry 230 (class 1259 OID 509828)
-- Name: kanji; Type: TABLE; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

CREATE TABLE kanji (
    id integer NOT NULL,
    freq integer NOT NULL,
    grade integer NOT NULL,
    jlpt integer NOT NULL,
    literal character varying(1) NOT NULL,
    stroke_count integer NOT NULL,
    ucp_dec integer NOT NULL,
    grade_idx integer
);


ALTER TABLE kanjidic2.kanji OWNER TO postgres;

--
-- TOC entry 231 (class 1259 OID 509831)
-- Name: kanji_reading; Type: TABLE; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

CREATE TABLE kanji_reading (
    audio_id integer,
    id integer NOT NULL,
    literal text NOT NULL,
    romaji text,
    cf_reading_type_id integer NOT NULL
);


ALTER TABLE kanjidic2.kanji_reading OWNER TO postgres;

--
-- TOC entry 232 (class 1259 OID 509837)
-- Name: mtm_kanji_image_id_seq; Type: SEQUENCE; Schema: kanjidic2; Owner: postgres
--

CREATE SEQUENCE mtm_kanji_image_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE kanjidic2.mtm_kanji_image_id_seq OWNER TO postgres;

--
-- TOC entry 233 (class 1259 OID 509839)
-- Name: mtm_kanji_image; Type: TABLE; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

CREATE TABLE mtm_kanji_image (
    id integer DEFAULT nextval('mtm_kanji_image_id_seq'::regclass) NOT NULL,
    kanji_id integer NOT NULL,
    stroke_image_id integer NOT NULL,
    seq integer NOT NULL
);


ALTER TABLE kanjidic2.mtm_kanji_image OWNER TO postgres;

--
-- TOC entry 234 (class 1259 OID 509843)
-- Name: mtm_kanji_reading; Type: TABLE; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

CREATE TABLE mtm_kanji_reading (
    id integer NOT NULL,
    kanji_id integer NOT NULL,
    reading_id integer NOT NULL
);


ALTER TABLE kanjidic2.mtm_kanji_reading OWNER TO postgres;

--
-- TOC entry 235 (class 1259 OID 509846)
-- Name: v_kanji_reading; Type: VIEW; Schema: kanjidic2; Owner: postgres
--

CREATE VIEW v_kanji_reading AS
 SELECT a.id,
    a.literal AS kanji,
    a.freq,
    a.grade,
    a.jlpt,
    a.stroke_count,
    b.literal AS rtxt,
    b.romaji,
    b.cf_reading_type_id,
    b.audio_id
   FROM (kanji a
     LEFT JOIN ( SELECT a_1.kanji_id,
            b_1.literal,
            b_1.romaji,
            b_1.cf_reading_type_id,
            b_1.audio_id
           FROM (mtm_kanji_reading a_1
             LEFT JOIN kanji_reading b_1 ON ((a_1.reading_id = b_1.id)))) b ON ((a.id = b.kanji_id)));


ALTER TABLE kanjidic2.v_kanji_reading OWNER TO postgres;

--
-- TOC entry 236 (class 1259 OID 509851)
-- Name: vm_kanji_data_with_yomi; Type: MATERIALIZED VIEW; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

CREATE MATERIALIZED VIEW vm_kanji_data_with_yomi AS
 SELECT a.literal,
    a.grade,
    a.jlpt,
    a.stroke_count,
    b.stroke_image_id,
    ( SELECT array_to_string(ARRAY( SELECT v_kanji_reading.rtxt
                   FROM v_kanji_reading
                  WHERE ((v_kanji_reading.id = a.id) AND (v_kanji_reading.cf_reading_type_id = 234))), ', '::text) AS array_to_string) AS on_yomi,
    ( SELECT array_to_string(ARRAY( SELECT v_kanji_reading.rtxt
                   FROM v_kanji_reading
                  WHERE ((v_kanji_reading.id = a.id) AND (v_kanji_reading.cf_reading_type_id = 235))), ', '::text) AS array_to_string) AS kun_yomi
   FROM (kanji a
     LEFT JOIN mtm_kanji_image b ON ((a.id = b.kanji_id)))
  WITH NO DATA;


ALTER TABLE kanjidic2.vm_kanji_data_with_yomi OWNER TO postgres;

SET search_path = public, pg_catalog;

--
-- TOC entry 237 (class 1259 OID 509859)
-- Name: image; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE image (
    id integer NOT NULL,
    image_file bytea,
    file_name character varying NOT NULL,
    copyright character varying NOT NULL,
    mime_type character varying(2044),
    cf_origin_id integer
);


ALTER TABLE public.image OWNER TO postgres;

--
-- TOC entry 4185 (class 0 OID 0)
-- Dependencies: 237
-- Name: COLUMN image.image_file; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN image.image_file IS 'v√µib salvestada ainult faili nime ja selle j√§rgi failis√ºsteemist fail v√µtta';


SET search_path = heisig, pg_catalog;

--
-- TOC entry 238 (class 1259 OID 509865)
-- Name: v_heisig6_custom; Type: VIEW; Schema: heisig; Owner: postgres
--

CREATE VIEW v_heisig6_custom AS
 WITH h6_koohii AS (
         SELECT h2.id,
            h2.koohii_story_1,
            k2.story AS koohii_story_2
           FROM (( SELECT h.id,
                    h.kanji,
                    k.story AS koohii_story_1
                   FROM (heisig6 h
                     LEFT JOIN koohii_story k ON (((h.kanji)::text = (k.kanji)::text)))
                  WHERE (k.story_seq = 1)) h2
             LEFT JOIN koohii_story k2 ON (((h2.kanji)::text = (k2.kanji)::text)))
          WHERE (k2.story_seq = 2)
        ), kdata AS (
         SELECT h6_1.id,
            vk.stroke_count,
            vk.stroke_image_id,
            vk.on_yomi,
            vk.kun_yomi
           FROM (heisig6 h6_1
             LEFT JOIN kanjidic2.vm_kanji_data_with_yomi vk ON (((h6_1.kanji)::text = (vk.literal)::text)))
        ), kdata_and_img AS (
         SELECT a.id,
            a.stroke_count,
            a.stroke_image_id,
            a.on_yomi,
            a.kun_yomi,
            b.image_file,
            b.file_name
           FROM (kdata a
             LEFT JOIN public.image b ON ((a.stroke_image_id = b.id)))
        ), h6_kwd AS (
         SELECT heisig_core_kw.id,
            heisig_core_kw.word,
            heisig_core_kw.word_reading,
            heisig_core_kw.word_audio,
            heisig_core_kw.word_audio_file_name,
            heisig_core_kw.word_translation
           FROM heisig_core_kw
        ), h4 AS (
         SELECT a.id,
            b.id AS frame_no4
           FROM (heisig6 a
             LEFT JOIN heisig4 b ON (((a.kanji)::text = (b.kanji)::text)))
        )
 SELECT h6.id,
    h6.kanji,
    h6.heisig_story,
    h6.heisig_comment,
    h6.keyword_en,
    h6.keyword_et,
    h6_kwd.word,
    h6_kwd.word_reading,
    h6_kwd.word_audio,
    h6_kwd.word_audio_file_name,
    h6_kwd.word_translation,
    h6.my_story,
    kdata_and_img.stroke_count,
    kdata_and_img.stroke_image_id,
    kdata_and_img.image_file AS stroke_image,
    kdata_and_img.file_name AS stroke_file_name,
    h6.constituents,
    h6.lesson_no,
    kdata_and_img.on_yomi,
    kdata_and_img.kun_yomi,
    h6_koohii.koohii_story_1,
    h6_koohii.koohii_story_2,
    h4.frame_no4
   FROM ((((heisig6 h6
     LEFT JOIN h6_koohii ON ((h6.id = h6_koohii.id)))
     LEFT JOIN kdata_and_img ON ((h6.id = kdata_and_img.id)))
     LEFT JOIN h6_kwd ON ((h6.id = h6_kwd.id)))
     LEFT JOIN h4 ON ((h6.id = h4.id)))
  ORDER BY h6.id;


ALTER TABLE heisig.v_heisig6_custom OWNER TO postgres;

SET search_path = public, pg_catalog;

--
-- TOC entry 239 (class 1259 OID 509870)
-- Name: katakana; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE katakana (
    kana character varying(2) NOT NULL,
    romaji character varying(4) NOT NULL,
    stroke_count integer,
    stroke_image_id integer,
    audio_id integer
);


ALTER TABLE public.katakana OWNER TO postgres;

SET search_path = heisig, pg_catalog;

--
-- TOC entry 240 (class 1259 OID 509873)
-- Name: v_heisig_katakana_voca; Type: VIEW; Schema: heisig; Owner: postgres
--

CREATE VIEW v_heisig_katakana_voca AS
 SELECT a.id,
    a.word_et,
    a.word_en,
    a.word_kana,
    a.word_romaji,
    public.f_hepburn_replace_long_vowels((a.word_romaji)::text) AS romaji_non_hepburn,
    a.kana_in_focus,
    ( SELECT katakana.romaji
           FROM public.katakana
          WHERE ((katakana.kana)::bpchar = (a.kana_in_focus)::bpchar)) AS kana_romaji,
    b.lesson
   FROM (heisig_katakana_voca a
     LEFT JOIN heisig_katakana b ON (((a.kana_in_focus)::text = (b.kana)::text)))
  ORDER BY a.id;


ALTER TABLE heisig.v_heisig_katakana_voca OWNER TO postgres;

SET search_path = jmdict, pg_catalog;

--
-- TOC entry 241 (class 1259 OID 509878)
-- Name: chr; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE chr (
    entr integer NOT NULL,
    chr character(1) NOT NULL,
    bushu integer,
    strokes integer,
    freq integer,
    grade integer,
    jlpt integer,
    radname character varying(50)
);


ALTER TABLE jmdict.chr OWNER TO postgres;

--
-- TOC entry 242 (class 1259 OID 509881)
-- Name: cinf; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE cinf (
    entr integer NOT NULL,
    kw integer NOT NULL,
    value character varying(50) NOT NULL,
    mctype character varying(50) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE jmdict.cinf OWNER TO postgres;

--
-- TOC entry 243 (class 1259 OID 509885)
-- Name: dbpatch; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE dbpatch (
    level integer NOT NULL,
    dt timestamp without time zone DEFAULT timezone('utc'::text, now())
);


ALTER TABLE jmdict.dbpatch OWNER TO postgres;

--
-- TOC entry 244 (class 1259 OID 509889)
-- Name: dial; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE dial (
    entr integer NOT NULL,
    sens integer NOT NULL,
    ord integer NOT NULL,
    kw integer DEFAULT 1 NOT NULL
);


ALTER TABLE jmdict.dial OWNER TO postgres;

--
-- TOC entry 245 (class 1259 OID 509893)
-- Name: entr_id_seq; Type: SEQUENCE; Schema: jmdict; Owner: postgres
--

CREATE SEQUENCE entr_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE jmdict.entr_id_seq OWNER TO postgres;

--
-- TOC entry 4186 (class 0 OID 0)
-- Dependencies: 245
-- Name: entr_id_seq; Type: SEQUENCE OWNED BY; Schema: jmdict; Owner: postgres
--

ALTER SEQUENCE entr_id_seq OWNED BY entr.id;


--
-- TOC entry 246 (class 1259 OID 509895)
-- Name: entrsnd; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE entrsnd (
    entr integer NOT NULL,
    ord integer NOT NULL,
    snd integer NOT NULL
);


ALTER TABLE jmdict.entrsnd OWNER TO postgres;

--
-- TOC entry 247 (class 1259 OID 509898)
-- Name: gloss; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE gloss (
    entr integer NOT NULL,
    sens integer NOT NULL,
    gloss integer NOT NULL,
    lang integer DEFAULT 1 NOT NULL,
    ginf integer DEFAULT 1 NOT NULL,
    txt character varying(2048) NOT NULL,
    inserted date DEFAULT now(),
    CONSTRAINT gloss_gloss_check CHECK ((gloss > 0))
);


ALTER TABLE jmdict.gloss OWNER TO postgres;

--
-- TOC entry 248 (class 1259 OID 509908)
-- Name: kanj; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE kanj (
    entr integer NOT NULL,
    kanj integer NOT NULL,
    txt character varying(2048) NOT NULL,
    CONSTRAINT kanj_kanj_check CHECK ((kanj > 0))
);


ALTER TABLE jmdict.kanj OWNER TO postgres;

--
-- TOC entry 249 (class 1259 OID 509915)
-- Name: rdng; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE rdng (
    entr integer NOT NULL,
    rdng integer NOT NULL,
    txt character varying(2048) NOT NULL,
    CONSTRAINT rdng_rdng_check CHECK ((rdng > 0))
);


ALTER TABLE jmdict.rdng OWNER TO postgres;

--
-- TOC entry 250 (class 1259 OID 509922)
-- Name: hdwds; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW hdwds AS
 SELECT e.id,
    e.src,
    e.stat,
    e.seq,
    e.dfrm,
    e.unap,
    e.srcnote,
    e.notes,
    r.txt AS rtxt,
    k.txt AS ktxt
   FROM ((entr e
     LEFT JOIN rdng r ON ((r.entr = e.id)))
     LEFT JOIN kanj k ON ((k.entr = e.id)))
  WHERE (((r.rdng = 1) OR (r.rdng IS NULL)) AND ((k.kanj = 1) OR (k.kanj IS NULL)));


ALTER TABLE jmdict.hdwds OWNER TO postgres;

--
-- TOC entry 251 (class 1259 OID 509927)
-- Name: sens; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE sens (
    entr integer NOT NULL,
    sens integer NOT NULL,
    notes text,
    CONSTRAINT sens_sens_check CHECK ((sens > 0))
);


ALTER TABLE jmdict.sens OWNER TO postgres;

--
-- TOC entry 252 (class 1259 OID 509934)
-- Name: ssum; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW ssum AS
 SELECT s.entr,
    s.sens,
    ( SELECT array_to_string(array_agg(sg.txt), '; '::text) AS array_to_string
           FROM ( SELECT g.txt
                   FROM gloss g
                  WHERE ((g.sens = s.sens) AND (g.entr = s.entr))
                  ORDER BY g.gloss) sg
          ORDER BY s.entr, s.sens) AS gloss,
    s.notes
   FROM sens s;


ALTER TABLE jmdict.ssum OWNER TO postgres;

--
-- TOC entry 253 (class 1259 OID 509938)
-- Name: essum; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW essum AS
 SELECT e.id,
    e.seq,
    e.src,
    e.stat,
    s.sens,
    h.rtxt AS rdng,
    h.ktxt AS kanj,
    s.gloss,
    ( SELECT count(*) AS count
           FROM sens
          WHERE (sens.entr = e.id)) AS nsens
   FROM ((entr e
     JOIN hdwds h ON ((h.id = e.id)))
     JOIN ssum s ON ((s.entr = e.id)));


ALTER TABLE jmdict.essum OWNER TO postgres;

SET default_with_oids = true;

--
-- TOC entry 254 (class 1259 OID 509943)
-- Name: freq; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE freq (
    entr integer NOT NULL,
    rdng integer,
    kanj integer,
    kw integer NOT NULL,
    value integer,
    id integer NOT NULL,
    CONSTRAINT freq_check CHECK (((rdng IS NOT NULL) OR (kanj IS NOT NULL)))
);


ALTER TABLE jmdict.freq OWNER TO postgres;

--
-- TOC entry 255 (class 1259 OID 509947)
-- Name: is_p; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW is_p AS
 SELECT e.id,
    e.src,
    e.stat,
    e.seq,
    e.dfrm,
    e.unap,
    e.srcnote,
    e.notes,
    (EXISTS ( SELECT f.entr,
            f.rdng,
            f.kanj,
            f.kw,
            f.value
           FROM freq f
          WHERE ((f.entr = e.id) AND (((f.kw = ANY (ARRAY[1, 2, 7])) AND (f.value = 1)) OR (f.kw = 4))))) AS p
   FROM entr e;


ALTER TABLE jmdict.is_p OWNER TO postgres;

--
-- TOC entry 256 (class 1259 OID 509951)
-- Name: esum; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW esum AS
 SELECT e.id,
    e.seq,
    e.stat,
    e.src,
    e.dfrm,
    e.unap,
    e.notes,
    e.srcnote,
    h.rtxt AS rdng,
    h.ktxt AS kanj,
    ( SELECT array_to_string(array_agg(ss.gtxt), ' / '::text) AS array_to_string
           FROM ( SELECT ( SELECT array_to_string(array_agg(sg.txt), '; '::text) AS array_to_string
                           FROM ( SELECT g.txt
                                   FROM gloss g
                                  WHERE ((g.sens = s.sens) AND (g.entr = s.entr))
                                  ORDER BY g.gloss) sg
                          ORDER BY s.entr, s.sens) AS gtxt
                   FROM sens s
                  WHERE (s.entr = e.id)
                  ORDER BY s.sens) ss) AS gloss,
    ( SELECT count(*) AS count
           FROM sens
          WHERE (sens.entr = e.id)) AS nsens,
    ( SELECT is_p.p
           FROM is_p
          WHERE (is_p.id = e.id)) AS p
   FROM (entr e
     JOIN hdwds h ON ((h.id = e.id)));


ALTER TABLE jmdict.esum OWNER TO postgres;

SET default_with_oids = false;

--
-- TOC entry 257 (class 1259 OID 509956)
-- Name: fld; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE fld (
    entr integer NOT NULL,
    sens integer NOT NULL,
    ord integer NOT NULL,
    kw integer NOT NULL
);


ALTER TABLE jmdict.fld OWNER TO postgres;

--
-- TOC entry 258 (class 1259 OID 509959)
-- Name: freq_id_seq; Type: SEQUENCE; Schema: jmdict; Owner: postgres
--

CREATE SEQUENCE freq_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE jmdict.freq_id_seq OWNER TO postgres;

--
-- TOC entry 4187 (class 0 OID 0)
-- Dependencies: 258
-- Name: freq_id_seq; Type: SEQUENCE OWNED BY; Schema: jmdict; Owner: postgres
--

ALTER SEQUENCE freq_id_seq OWNED BY freq.id;


--
-- TOC entry 259 (class 1259 OID 509961)
-- Name: grp; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE grp (
    entr integer NOT NULL,
    kw integer NOT NULL,
    ord integer NOT NULL,
    notes character varying(250)
);


ALTER TABLE jmdict.grp OWNER TO postgres;

--
-- TOC entry 260 (class 1259 OID 509964)
-- Name: hist; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE hist (
    entr integer NOT NULL,
    hist integer NOT NULL,
    stat integer NOT NULL,
    unap boolean NOT NULL,
    dt timestamp without time zone DEFAULT now() NOT NULL,
    userid character varying(20),
    name character varying(60),
    email character varying(120),
    diff text,
    refs text,
    notes text,
    CONSTRAINT hist_hist_check CHECK ((hist > 0))
);


ALTER TABLE jmdict.hist OWNER TO postgres;

--
-- TOC entry 261 (class 1259 OID 509972)
-- Name: item_cnts; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW item_cnts AS
 SELECT e.id,
    e.seq,
    ( SELECT count(*) AS count
           FROM rdng r
          WHERE (r.entr = e.id)) AS nrdng,
    ( SELECT count(*) AS count
           FROM kanj k
          WHERE (k.entr = e.id)) AS nkanj,
    ( SELECT count(*) AS count
           FROM sens s
          WHERE (s.entr = e.id)) AS nsens
   FROM entr e;


ALTER TABLE jmdict.item_cnts OWNER TO postgres;

--
-- TOC entry 262 (class 1259 OID 509976)
-- Name: kinf; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE kinf (
    entr integer NOT NULL,
    kanj integer NOT NULL,
    ord integer NOT NULL,
    kw integer NOT NULL
);


ALTER TABLE jmdict.kinf OWNER TO postgres;

--
-- TOC entry 263 (class 1259 OID 509979)
-- Name: kresolv; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE kresolv (
    entr integer NOT NULL,
    kw integer NOT NULL,
    value character varying(50) NOT NULL
);


ALTER TABLE jmdict.kresolv OWNER TO postgres;

--
-- TOC entry 264 (class 1259 OID 509982)
-- Name: kwcinf; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE kwcinf (
    id integer NOT NULL,
    kw character varying(50) NOT NULL,
    descr character varying(250)
);


ALTER TABLE jmdict.kwcinf OWNER TO postgres;

--
-- TOC entry 265 (class 1259 OID 509985)
-- Name: kwdial; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE kwdial (
    id integer NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict.kwdial OWNER TO postgres;

--
-- TOC entry 266 (class 1259 OID 509988)
-- Name: kwfld; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE kwfld (
    id integer NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict.kwfld OWNER TO postgres;

--
-- TOC entry 267 (class 1259 OID 509991)
-- Name: kwfreq; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE kwfreq (
    id integer NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict.kwfreq OWNER TO postgres;

--
-- TOC entry 268 (class 1259 OID 509994)
-- Name: kwginf; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE kwginf (
    id integer NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict.kwginf OWNER TO postgres;

--
-- TOC entry 269 (class 1259 OID 509997)
-- Name: kwgrp; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE kwgrp (
    id integer NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict.kwgrp OWNER TO postgres;

--
-- TOC entry 270 (class 1259 OID 510000)
-- Name: kwgrp_id_seq; Type: SEQUENCE; Schema: jmdict; Owner: postgres
--

CREATE SEQUENCE kwgrp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE jmdict.kwgrp_id_seq OWNER TO postgres;

--
-- TOC entry 4188 (class 0 OID 0)
-- Dependencies: 270
-- Name: kwgrp_id_seq; Type: SEQUENCE OWNED BY; Schema: jmdict; Owner: postgres
--

ALTER SEQUENCE kwgrp_id_seq OWNED BY kwgrp.id;


--
-- TOC entry 271 (class 1259 OID 510002)
-- Name: kwkinf; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE kwkinf (
    id integer NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict.kwkinf OWNER TO postgres;

--
-- TOC entry 272 (class 1259 OID 510005)
-- Name: kwlang; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE kwlang (
    id integer NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict.kwlang OWNER TO postgres;

--
-- TOC entry 273 (class 1259 OID 510008)
-- Name: kwmisc; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE kwmisc (
    id integer NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict.kwmisc OWNER TO postgres;

--
-- TOC entry 274 (class 1259 OID 510011)
-- Name: kwpos; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE kwpos (
    id integer NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict.kwpos OWNER TO postgres;

--
-- TOC entry 275 (class 1259 OID 510014)
-- Name: kwrinf; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE kwrinf (
    id integer NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict.kwrinf OWNER TO postgres;

--
-- TOC entry 276 (class 1259 OID 510017)
-- Name: kwsrc; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE kwsrc (
    id integer NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255),
    dt date,
    notes character varying(255),
    seq character varying(20) NOT NULL,
    sinc integer,
    smin bigint,
    smax bigint
);


ALTER TABLE jmdict.kwsrc OWNER TO postgres;

--
-- TOC entry 277 (class 1259 OID 510023)
-- Name: kwstat; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE kwstat (
    id integer NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict.kwstat OWNER TO postgres;

--
-- TOC entry 278 (class 1259 OID 510026)
-- Name: kwxref; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE kwxref (
    id integer NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict.kwxref OWNER TO postgres;

--
-- TOC entry 279 (class 1259 OID 510029)
-- Name: lsrc; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE lsrc (
    entr integer NOT NULL,
    sens integer NOT NULL,
    ord integer NOT NULL,
    lang integer DEFAULT 1 NOT NULL,
    txt character varying(250) NOT NULL,
    part boolean DEFAULT false,
    wasei boolean DEFAULT false
);


ALTER TABLE jmdict.lsrc OWNER TO postgres;

--
-- TOC entry 280 (class 1259 OID 510035)
-- Name: misc; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE misc (
    entr integer NOT NULL,
    sens integer NOT NULL,
    ord integer NOT NULL,
    kw integer NOT NULL
);


ALTER TABLE jmdict.misc OWNER TO postgres;

--
-- TOC entry 281 (class 1259 OID 510038)
-- Name: pkfreq; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW pkfreq AS
 SELECT k.entr,
    k.kanj,
    k.txt,
    (EXISTS ( SELECT f.entr,
            f.rdng,
            f.kanj,
            f.kw,
            f.value
           FROM freq f
          WHERE (((f.entr = k.entr) AND (f.kanj = k.kanj)) AND ((f.kw = ANY (ARRAY[1, 2, 3, 4])) AND (f.value = 1))))) AS p
   FROM kanj k;


ALTER TABLE jmdict.pkfreq OWNER TO postgres;

--
-- TOC entry 282 (class 1259 OID 510042)
-- Name: pos; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE pos (
    entr integer NOT NULL,
    sens integer NOT NULL,
    ord integer NOT NULL,
    kw integer NOT NULL
);


ALTER TABLE jmdict.pos OWNER TO postgres;

--
-- TOC entry 283 (class 1259 OID 510045)
-- Name: prfreq; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW prfreq AS
 SELECT r.entr,
    r.rdng,
    r.txt,
    (EXISTS ( SELECT f.entr,
            f.rdng,
            f.kanj,
            f.kw,
            f.value
           FROM freq f
          WHERE (((f.entr = r.entr) AND (f.rdng = r.rdng)) AND ((f.kw = ANY (ARRAY[1, 2, 3, 4])) AND (f.value = 1))))) AS p
   FROM rdng r;


ALTER TABLE jmdict.prfreq OWNER TO postgres;

--
-- TOC entry 284 (class 1259 OID 510049)
-- Name: rad; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE rad (
    num integer NOT NULL,
    var integer NOT NULL,
    rchr character(1),
    chr character(1),
    strokes integer,
    loc character(1),
    name character varying(50),
    examples character varying(20),
    CONSTRAINT rad_loc_check CHECK (((loc IS NULL) OR (loc = ANY (ARRAY['O'::bpchar, 'T'::bpchar, 'B'::bpchar, 'R'::bpchar, 'L'::bpchar, 'E'::bpchar, 'V'::bpchar]))))
);


ALTER TABLE jmdict.rad OWNER TO postgres;

--
-- TOC entry 285 (class 1259 OID 510053)
-- Name: rdngsnd; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE rdngsnd (
    entr integer NOT NULL,
    rdng integer NOT NULL,
    ord integer NOT NULL,
    snd integer NOT NULL
);


ALTER TABLE jmdict.rdngsnd OWNER TO postgres;

--
-- TOC entry 286 (class 1259 OID 510056)
-- Name: restr; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE restr (
    entr integer NOT NULL,
    rdng integer NOT NULL,
    kanj integer NOT NULL
);


ALTER TABLE jmdict.restr OWNER TO postgres;

--
-- TOC entry 287 (class 1259 OID 510059)
-- Name: re_nokanji; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW re_nokanji AS
 SELECT e.id,
    e.seq,
    r.rdng,
    r.txt
   FROM ((entr e
     JOIN rdng r ON ((r.entr = e.id)))
     JOIN restr z ON (((z.entr = r.entr) AND (z.rdng = r.rdng))))
  GROUP BY e.id, e.seq, r.rdng, r.txt
 HAVING (count(z.kanj) = ( SELECT count(*) AS count
           FROM kanj k
          WHERE (k.entr = e.id)));


ALTER TABLE jmdict.re_nokanji OWNER TO postgres;

--
-- TOC entry 288 (class 1259 OID 510064)
-- Name: rinf; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE rinf (
    entr integer NOT NULL,
    rdng integer NOT NULL,
    ord integer NOT NULL,
    kw integer NOT NULL
);


ALTER TABLE jmdict.rinf OWNER TO postgres;

--
-- TOC entry 289 (class 1259 OID 510067)
-- Name: rk_valid; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW rk_valid AS
 SELECT r.entr,
    r.rdng,
    r.txt AS rtxt,
    k.kanj,
    k.txt AS ktxt
   FROM (rdng r
     JOIN kanj k ON ((k.entr = r.entr)))
  WHERE (NOT (EXISTS ( SELECT z.entr,
            z.rdng,
            z.kanj
           FROM restr z
          WHERE (((z.entr = r.entr) AND (z.kanj = k.kanj)) AND (z.rdng = r.rdng)))));


ALTER TABLE jmdict.rk_valid OWNER TO postgres;

--
-- TOC entry 290 (class 1259 OID 510071)
-- Name: rk_validity; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW rk_validity AS
 SELECT e.id,
    e.seq,
    r.rdng,
    r.txt AS rtxt,
    k.kanj,
    k.txt AS ktxt,
        CASE
            WHEN (z.kanj IS NOT NULL) THEN 'X'::text
            ELSE NULL::text
        END AS valid
   FROM (((entr e
     LEFT JOIN rdng r ON ((r.entr = e.id)))
     LEFT JOIN kanj k ON ((k.entr = e.id)))
     LEFT JOIN restr z ON ((((z.entr = e.id) AND (r.rdng = z.rdng)) AND (k.kanj = z.kanj))));


ALTER TABLE jmdict.rk_validity OWNER TO postgres;

--
-- TOC entry 291 (class 1259 OID 510076)
-- Name: seq_jmdict; Type: SEQUENCE; Schema: jmdict; Owner: postgres
--

CREATE SEQUENCE seq_jmdict
    START WITH 1000000
    INCREMENT BY 10
    MINVALUE 1000000
    MAXVALUE 8999999
    CACHE 1;


ALTER TABLE jmdict.seq_jmdict OWNER TO postgres;

--
-- TOC entry 292 (class 1259 OID 510078)
-- Name: seq_test; Type: SEQUENCE; Schema: jmdict; Owner: postgres
--

CREATE SEQUENCE seq_test
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE jmdict.seq_test OWNER TO postgres;

--
-- TOC entry 293 (class 1259 OID 510080)
-- Name: stagk; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE stagk (
    entr integer NOT NULL,
    sens integer NOT NULL,
    kanj integer NOT NULL
);


ALTER TABLE jmdict.stagk OWNER TO postgres;

--
-- TOC entry 294 (class 1259 OID 510083)
-- Name: sk_valid; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW sk_valid AS
 SELECT s.entr,
    s.sens,
    k.kanj,
    k.txt AS ktxt
   FROM (sens s
     JOIN kanj k ON ((k.entr = s.entr)))
  WHERE (NOT (EXISTS ( SELECT z.entr,
            z.sens,
            z.kanj
           FROM stagk z
          WHERE (((z.entr = s.entr) AND (z.sens = s.sens)) AND (z.kanj = k.kanj)))));


ALTER TABLE jmdict.sk_valid OWNER TO postgres;

--
-- TOC entry 295 (class 1259 OID 510087)
-- Name: snd; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE snd (
    id integer NOT NULL,
    file integer NOT NULL,
    strt integer DEFAULT 0 NOT NULL,
    leng integer DEFAULT 0 NOT NULL,
    trns text,
    notes character varying(255)
);


ALTER TABLE jmdict.snd OWNER TO postgres;

--
-- TOC entry 296 (class 1259 OID 510095)
-- Name: snd_id_seq; Type: SEQUENCE; Schema: jmdict; Owner: postgres
--

CREATE SEQUENCE snd_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE jmdict.snd_id_seq OWNER TO postgres;

--
-- TOC entry 4189 (class 0 OID 0)
-- Dependencies: 296
-- Name: snd_id_seq; Type: SEQUENCE OWNED BY; Schema: jmdict; Owner: postgres
--

ALTER SEQUENCE snd_id_seq OWNED BY snd.id;


--
-- TOC entry 297 (class 1259 OID 510097)
-- Name: sndfile; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE sndfile (
    id integer NOT NULL,
    vol integer NOT NULL,
    title character varying(50),
    loc character varying(500),
    type integer,
    notes text
);


ALTER TABLE jmdict.sndfile OWNER TO postgres;

--
-- TOC entry 298 (class 1259 OID 510103)
-- Name: sndfile_id_seq; Type: SEQUENCE; Schema: jmdict; Owner: postgres
--

CREATE SEQUENCE sndfile_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE jmdict.sndfile_id_seq OWNER TO postgres;

--
-- TOC entry 4190 (class 0 OID 0)
-- Dependencies: 298
-- Name: sndfile_id_seq; Type: SEQUENCE OWNED BY; Schema: jmdict; Owner: postgres
--

ALTER SEQUENCE sndfile_id_seq OWNED BY sndfile.id;


--
-- TOC entry 299 (class 1259 OID 510105)
-- Name: sndvol; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE sndvol (
    id integer NOT NULL,
    title character varying(50),
    loc character varying(500),
    type integer NOT NULL,
    idstr character varying(100),
    corp integer,
    notes text
);


ALTER TABLE jmdict.sndvol OWNER TO postgres;

--
-- TOC entry 300 (class 1259 OID 510111)
-- Name: sndvol_id_seq; Type: SEQUENCE; Schema: jmdict; Owner: postgres
--

CREATE SEQUENCE sndvol_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE jmdict.sndvol_id_seq OWNER TO postgres;

--
-- TOC entry 4191 (class 0 OID 0)
-- Dependencies: 300
-- Name: sndvol_id_seq; Type: SEQUENCE OWNED BY; Schema: jmdict; Owner: postgres
--

ALTER SEQUENCE sndvol_id_seq OWNED BY sndvol.id;


--
-- TOC entry 301 (class 1259 OID 510113)
-- Name: stagr; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE stagr (
    entr integer NOT NULL,
    sens integer NOT NULL,
    rdng integer NOT NULL
);


ALTER TABLE jmdict.stagr OWNER TO postgres;

--
-- TOC entry 302 (class 1259 OID 510116)
-- Name: sr_valid; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW sr_valid AS
 SELECT s.entr,
    s.sens,
    r.rdng,
    r.txt AS rtxt
   FROM (sens s
     JOIN rdng r ON ((r.entr = s.entr)))
  WHERE (NOT (EXISTS ( SELECT z.entr,
            z.sens,
            z.rdng
           FROM stagr z
          WHERE (((z.entr = s.entr) AND (z.sens = s.sens)) AND (z.rdng = r.rdng)))));


ALTER TABLE jmdict.sr_valid OWNER TO postgres;

--
-- TOC entry 303 (class 1259 OID 510120)
-- Name: vsnd; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW vsnd AS
 SELECT snd.id,
    snd.strt,
    snd.leng,
    sndfile.loc AS sfile,
    sndvol.loc AS sdir,
    (sndvol.type = 2) AS iscd,
    sndvol.id AS sdid,
    snd.trns
   FROM ((sndvol
     JOIN sndfile ON ((sndvol.id = sndfile.vol)))
     JOIN snd ON ((sndfile.id = snd.file)));


ALTER TABLE jmdict.vsnd OWNER TO postgres;

--
-- TOC entry 304 (class 1259 OID 510124)
-- Name: vt_gloss; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW vt_gloss AS
 SELECT g.entr,
    g.sens,
    ( SELECT array_to_string(array_agg(g2.txt), '; '::text) AS array_to_string
           FROM ( SELECT g3.txt
                   FROM gloss g3
                  WHERE ((g3.entr = g.entr) AND (g3.sens = g.sens))
                  ORDER BY g3.gloss) g2) AS gtxt
   FROM ( SELECT DISTINCT gloss.entr,
            gloss.sens
           FROM gloss) g;


ALTER TABLE jmdict.vt_gloss OWNER TO postgres;

--
-- TOC entry 305 (class 1259 OID 510128)
-- Name: vt_kanj; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW vt_kanj AS
 SELECT k.entr,
    ( SELECT array_to_string(array_agg(k2.txt), '; '::text) AS array_to_string
           FROM ( SELECT k3.txt
                   FROM kanj k3
                  WHERE (k3.entr = k.entr)
                  ORDER BY k3.kanj) k2) AS ktxt
   FROM ( SELECT DISTINCT kanj.entr
           FROM kanj) k;


ALTER TABLE jmdict.vt_kanj OWNER TO postgres;

--
-- TOC entry 4192 (class 0 OID 0)
-- Dependencies: 305
-- Name: VIEW vt_kanj; Type: COMMENT; Schema: jmdict; Owner: postgres
--

COMMENT ON VIEW vt_kanj IS 'kaks tulpa - entry id, kanji tekst';


--
-- TOC entry 306 (class 1259 OID 510132)
-- Name: vt_rdng; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW vt_rdng AS
 SELECT r.entr,
    ( SELECT array_to_string(array_agg(r2.txt), '; '::text) AS array_to_string
           FROM ( SELECT r3.txt
                   FROM rdng r3
                  WHERE (r3.entr = r.entr)
                  ORDER BY r3.rdng) r2) AS rtxt
   FROM ( SELECT DISTINCT rdng.entr
           FROM rdng) r;


ALTER TABLE jmdict.vt_rdng OWNER TO postgres;

--
-- TOC entry 307 (class 1259 OID 510136)
-- Name: vt_sens; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW vt_sens AS
 SELECT s.entr,
    ( SELECT array_to_string(array_agg(g2.txt), ' / '::text) AS array_to_string
           FROM ( SELECT g3.gtxt AS txt
                   FROM vt_gloss g3
                  WHERE (g3.entr = s.entr)
                  ORDER BY g3.entr, g3.sens) g2) AS stxt
   FROM ( SELECT DISTINCT sens.entr
           FROM sens) s;


ALTER TABLE jmdict.vt_sens OWNER TO postgres;

--
-- TOC entry 308 (class 1259 OID 510140)
-- Name: vt_entr; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW vt_entr AS
 SELECT e.id,
    e.src,
    e.stat,
    e.seq,
    e.dfrm,
    e.unap,
    e.srcnote,
    e.notes,
    r.rtxt,
    k.ktxt,
    s.stxt,
    ( SELECT count(*) AS count
           FROM sens
          WHERE (sens.entr = e.id)) AS nsens,
    ( SELECT is_p.p
           FROM is_p
          WHERE (is_p.id = e.id)) AS p
   FROM (((entr e
     LEFT JOIN vt_rdng r ON ((r.entr = e.id)))
     LEFT JOIN vt_kanj k ON ((k.entr = e.id)))
     LEFT JOIN vt_sens s ON ((s.entr = e.id)));


ALTER TABLE jmdict.vt_entr OWNER TO postgres;

--
-- TOC entry 309 (class 1259 OID 510145)
-- Name: vt_gloss2; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW vt_gloss2 AS
 SELECT g.entr,
    g.sens,
    ( SELECT array_to_string(array_agg(g2.txt), '; '::text) AS array_to_string
           FROM ( SELECT (
                        CASE g3.ginf
                            WHEN 1 THEN ''::text
                            ELSE COALESCE((('['::text || (kw.kw)::text) || '] '::text), ''::text)
                        END || (g3.txt)::text) AS txt
                   FROM (gloss g3
                     JOIN kwginf kw ON ((kw.id = g3.ginf)))
                  WHERE ((g3.entr = g.entr) AND (g3.sens = g.sens))
                  ORDER BY g3.gloss) g2) AS gtxt
   FROM ( SELECT DISTINCT gloss.entr,
            gloss.sens
           FROM gloss) g;


ALTER TABLE jmdict.vt_gloss2 OWNER TO postgres;

--
-- TOC entry 310 (class 1259 OID 510150)
-- Name: vt_kinf; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW vt_kinf AS
 SELECT k.entr,
    k.kanj,
    ( SELECT array_to_string(array_agg(k2.txt), ','::text) AS array_to_string
           FROM ( SELECT kw.kw AS txt
                   FROM (kinf k3
                     JOIN kwkinf kw ON ((kw.id = k3.kw)))
                  WHERE ((k3.entr = k.entr) AND (k3.kanj = k.kanj))
                  ORDER BY k3.ord) k2) AS kitxt
   FROM ( SELECT DISTINCT kanj.entr,
            kanj.kanj
           FROM kanj) k;


ALTER TABLE jmdict.vt_kinf OWNER TO postgres;

--
-- TOC entry 311 (class 1259 OID 510155)
-- Name: vt_kanj2; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW vt_kanj2 AS
 SELECT k.entr,
    ( SELECT array_to_string(array_agg(k2.txt), '; '::text) AS array_to_string
           FROM ( SELECT ((k3.txt)::text || COALESCE((('['::text || i.kitxt) || ']'::text), ''::text)) AS txt
                   FROM (kanj k3
                     LEFT JOIN vt_kinf i ON (((i.entr = k3.entr) AND (i.kanj = k3.kanj))))
                  WHERE (k3.entr = k.entr)
                  ORDER BY k3.kanj) k2) AS ktxt
   FROM ( SELECT DISTINCT kanj.entr
           FROM kanj) k;


ALTER TABLE jmdict.vt_kanj2 OWNER TO postgres;

--
-- TOC entry 4193 (class 0 OID 0)
-- Dependencies: 311
-- Name: VIEW vt_kanj2; Type: COMMENT; Schema: jmdict; Owner: postgres
--

COMMENT ON VIEW vt_kanj2 IS '2 tulpa - entry id, erinevad kanji kirjapildid kokku liidetuna, ; eraldaja. n√§iteks arigatou saab kirjutada mitme kanjiga. esimene on levinuim';


--
-- TOC entry 312 (class 1259 OID 510160)
-- Name: vt_misc; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW vt_misc AS
 SELECT m.entr,
    m.sens,
    ( SELECT array_to_string(array_agg(m2.txt), ','::text) AS array_to_string
           FROM ( SELECT kw.kw AS txt
                   FROM (misc m3
                     JOIN kwmisc kw ON ((kw.id = m3.kw)))
                  WHERE ((m3.entr = m.entr) AND (m3.sens = m.sens))
                  ORDER BY m3.ord) m2) AS mtxt
   FROM ( SELECT DISTINCT misc.entr,
            misc.sens
           FROM misc) m;


ALTER TABLE jmdict.vt_misc OWNER TO postgres;

--
-- TOC entry 313 (class 1259 OID 510165)
-- Name: vt_pos; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW vt_pos AS
 SELECT p.entr,
    p.sens,
    ( SELECT array_to_string(array_agg(p2.txt), ','::text) AS array_to_string
           FROM ( SELECT kw.kw AS txt
                   FROM (pos p3
                     JOIN kwpos kw ON ((kw.id = p3.kw)))
                  WHERE ((p3.entr = p.entr) AND (p3.sens = p.sens))
                  ORDER BY p3.ord) p2) AS ptxt
   FROM ( SELECT DISTINCT pos.entr,
            pos.sens
           FROM pos) p;


ALTER TABLE jmdict.vt_pos OWNER TO postgres;

--
-- TOC entry 314 (class 1259 OID 510170)
-- Name: vt_rinf; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW vt_rinf AS
 SELECT r.entr,
    r.rdng,
    ( SELECT array_to_string(array_agg(r2.txt), ','::text) AS array_to_string
           FROM ( SELECT kw.kw AS txt
                   FROM (rinf r3
                     JOIN kwrinf kw ON ((kw.id = r3.kw)))
                  WHERE ((r3.entr = r.entr) AND (r3.rdng = r.rdng))
                  ORDER BY r3.ord) r2) AS ritxt
   FROM ( SELECT DISTINCT rdng.entr,
            rdng.rdng
           FROM rdng) r;


ALTER TABLE jmdict.vt_rinf OWNER TO postgres;

--
-- TOC entry 315 (class 1259 OID 510175)
-- Name: vt_rdng2; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW vt_rdng2 AS
 SELECT r.entr,
    ( SELECT array_to_string(array_agg(r2.txt), '; '::text) AS array_to_string
           FROM ( SELECT ((r3.txt)::text || COALESCE((('['::text || i.ritxt) || ']'::text), ''::text)) AS txt
                   FROM (rdng r3
                     LEFT JOIN vt_rinf i ON (((i.entr = r3.entr) AND (i.rdng = r3.rdng))))
                  WHERE (r3.entr = r.entr)
                  ORDER BY r3.rdng) r2) AS rtxt
   FROM ( SELECT DISTINCT rdng.entr
           FROM rdng) r;


ALTER TABLE jmdict.vt_rdng2 OWNER TO postgres;

--
-- TOC entry 316 (class 1259 OID 510180)
-- Name: vt_sens3; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW vt_sens3 AS
 SELECT s.entr,
    (( SELECT array_to_string(array_agg(g2.txt), ' / '::text) AS array_to_string
           FROM ( SELECT (((COALESCE((('['::text || p.ptxt) || ']'::text), ''::text) || COALESCE((('['::text || m.mtxt) || ']'::text), ''::text)) ||
                        CASE
                            WHEN ((p.ptxt IS NULL) AND (m.mtxt IS NULL)) THEN ''::text
                            ELSE ' '::text
                        END) || g3.gtxt) AS txt
                   FROM ((vt_gloss2 g3
                     LEFT JOIN vt_pos p ON (((p.entr = g3.entr) AND (p.sens = g3.sens))))
                     LEFT JOIN vt_misc m ON (((m.entr = g3.entr) AND (m.sens = g3.sens))))
                  WHERE (g3.entr = s.entr)
                  ORDER BY g3.entr, g3.sens) g2) || COALESCE(((' „Ää'::text || s.notes) || '„Äã'::text), ''::text)) AS stxt
   FROM ( SELECT DISTINCT sens.entr,
            sens.notes
           FROM sens) s;


ALTER TABLE jmdict.vt_sens3 OWNER TO postgres;

--
-- TOC entry 317 (class 1259 OID 510185)
-- Name: vt_entr3; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW vt_entr3 AS
 SELECT e.id,
    e.src,
    e.stat,
    e.seq,
    e.dfrm,
    e.unap,
    e.srcnote,
    e.notes,
    r.rtxt,
    k.ktxt,
    s.stxt,
    ( SELECT count(*) AS count
           FROM sens
          WHERE (sens.entr = e.id)) AS nsens,
    ( SELECT is_p.p
           FROM is_p
          WHERE (is_p.id = e.id)) AS p
   FROM (((entr e
     LEFT JOIN vt_rdng2 r ON ((r.entr = e.id)))
     LEFT JOIN vt_kanj2 k ON ((k.entr = e.id)))
     LEFT JOIN vt_sens3 s ON ((s.entr = e.id)));


ALTER TABLE jmdict.vt_entr3 OWNER TO postgres;

--
-- TOC entry 318 (class 1259 OID 510190)
-- Name: vt_sens2; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW vt_sens2 AS
 SELECT s.entr,
    (( SELECT array_to_string(array_agg(g2.txt), ' / '::text) AS array_to_string
           FROM ( SELECT g3.gtxt AS txt
                   FROM vt_gloss g3
                  WHERE (g3.entr = s.entr)
                  ORDER BY g3.entr, g3.sens) g2) || COALESCE(((' „Ää'::text || s.notes) || '„Äã'::text), ''::text)) AS stxt
   FROM ( SELECT DISTINCT sens.entr,
            sens.notes
           FROM sens) s;


ALTER TABLE jmdict.vt_sens2 OWNER TO postgres;

--
-- TOC entry 319 (class 1259 OID 510194)
-- Name: xref; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE xref (
    entr integer NOT NULL,
    sens integer NOT NULL,
    xref integer NOT NULL,
    typ integer NOT NULL,
    xentr integer NOT NULL,
    xsens integer NOT NULL,
    rdng integer,
    kanj integer,
    notes text,
    CONSTRAINT xref_check CHECK ((xentr <> entr)),
    CONSTRAINT xref_check1 CHECK (((kanj IS NOT NULL) OR (rdng IS NOT NULL))),
    CONSTRAINT xref_xref_check CHECK ((xref > 0))
);


ALTER TABLE jmdict.xref OWNER TO postgres;

--
-- TOC entry 320 (class 1259 OID 510203)
-- Name: xrefhw; Type: VIEW; Schema: jmdict; Owner: postgres
--

CREATE VIEW xrefhw AS
 SELECT r.entr,
    rm.sens,
    r.txt AS rtxt,
    k.kanj,
    k.txt AS ktxt
   FROM (((( SELECT sr_valid.entr,
            sr_valid.sens,
            min(sr_valid.rdng) AS rdng
           FROM sr_valid
          GROUP BY sr_valid.entr, sr_valid.sens) rm
     JOIN rdng r ON (((r.entr = rm.entr) AND (r.rdng = rm.rdng))))
     LEFT JOIN ( SELECT sk_valid.entr,
            sk_valid.sens,
            min(sk_valid.kanj) AS kanj
           FROM sk_valid
          GROUP BY sk_valid.entr, sk_valid.sens) km ON (((km.entr = r.entr) AND (km.sens = rm.sens))))
     LEFT JOIN kanj k ON (((k.entr = km.entr) AND (k.kanj = km.kanj))));


ALTER TABLE jmdict.xrefhw OWNER TO postgres;

--
-- TOC entry 321 (class 1259 OID 510208)
-- Name: xresolv; Type: TABLE; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE TABLE xresolv (
    entr integer NOT NULL,
    sens integer NOT NULL,
    typ integer NOT NULL,
    ord integer NOT NULL,
    rtxt character varying(250),
    ktxt character varying(250),
    tsens integer,
    notes character varying(250),
    prio boolean DEFAULT false,
    CONSTRAINT xresolv_check CHECK (((rtxt IS NOT NULL) OR (ktxt IS NOT NULL)))
);


ALTER TABLE jmdict.xresolv OWNER TO postgres;

SET search_path = jmdict_en, pg_catalog;

--
-- TOC entry 322 (class 1259 OID 510216)
-- Name: chr; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE chr (
    entr integer NOT NULL,
    chr character(1) NOT NULL,
    bushu smallint,
    strokes smallint,
    freq smallint,
    grade smallint,
    jlpt smallint,
    radname character varying(50)
);


ALTER TABLE jmdict_en.chr OWNER TO postgres;

--
-- TOC entry 323 (class 1259 OID 510219)
-- Name: cinf; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE cinf (
    entr integer NOT NULL,
    kw smallint NOT NULL,
    value character varying(50) NOT NULL,
    mctype character varying(50) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE jmdict_en.cinf OWNER TO postgres;

--
-- TOC entry 324 (class 1259 OID 510223)
-- Name: conj; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE conj (
    id smallint NOT NULL,
    name character varying(50)
);


ALTER TABLE jmdict_en.conj OWNER TO postgres;

--
-- TOC entry 325 (class 1259 OID 510226)
-- Name: conjo; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE conjo (
    pos smallint NOT NULL,
    conj smallint NOT NULL,
    neg boolean DEFAULT false NOT NULL,
    fml boolean DEFAULT false NOT NULL,
    onum smallint DEFAULT 1 NOT NULL,
    stem smallint DEFAULT 1,
    okuri character varying(50) NOT NULL,
    euphr character varying(50) DEFAULT NULL::character varying,
    euphk character varying(50) DEFAULT NULL::character varying,
    pos2 smallint
);


ALTER TABLE jmdict_en.conjo OWNER TO postgres;

--
-- TOC entry 326 (class 1259 OID 510235)
-- Name: conjo_notes; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE conjo_notes (
    pos smallint NOT NULL,
    conj smallint NOT NULL,
    neg boolean NOT NULL,
    fml boolean NOT NULL,
    onum smallint NOT NULL,
    note smallint NOT NULL
);


ALTER TABLE jmdict_en.conjo_notes OWNER TO postgres;

--
-- TOC entry 327 (class 1259 OID 510238)
-- Name: conotes; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE conotes (
    id integer NOT NULL,
    txt text NOT NULL
);


ALTER TABLE jmdict_en.conotes OWNER TO postgres;

--
-- TOC entry 328 (class 1259 OID 510244)
-- Name: dbpatch; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE dbpatch (
    level integer NOT NULL,
    dt timestamp without time zone DEFAULT timezone('utc'::text, now())
);


ALTER TABLE jmdict_en.dbpatch OWNER TO postgres;

--
-- TOC entry 329 (class 1259 OID 510248)
-- Name: dial; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE dial (
    entr integer NOT NULL,
    sens integer NOT NULL,
    ord smallint NOT NULL,
    kw smallint DEFAULT 1 NOT NULL
);


ALTER TABLE jmdict_en.dial OWNER TO postgres;

--
-- TOC entry 330 (class 1259 OID 510252)
-- Name: entr_id_seq; Type: SEQUENCE; Schema: jmdict_en; Owner: postgres
--

CREATE SEQUENCE entr_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE jmdict_en.entr_id_seq OWNER TO postgres;

--
-- TOC entry 4194 (class 0 OID 0)
-- Dependencies: 330
-- Name: entr_id_seq; Type: SEQUENCE OWNED BY; Schema: jmdict_en; Owner: postgres
--

ALTER SEQUENCE entr_id_seq OWNED BY entr.id;


--
-- TOC entry 331 (class 1259 OID 510254)
-- Name: entrsnd; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE entrsnd (
    entr integer NOT NULL,
    ord smallint NOT NULL,
    snd integer NOT NULL
);


ALTER TABLE jmdict_en.entrsnd OWNER TO postgres;

--
-- TOC entry 332 (class 1259 OID 510257)
-- Name: gloss; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE gloss (
    entr integer NOT NULL,
    sens smallint NOT NULL,
    gloss smallint NOT NULL,
    lang smallint DEFAULT 1 NOT NULL,
    ginf smallint DEFAULT 1 NOT NULL,
    txt character varying(2048) NOT NULL,
    CONSTRAINT gloss_gloss_check CHECK ((gloss > 0))
);


ALTER TABLE jmdict_en.gloss OWNER TO postgres;

--
-- TOC entry 333 (class 1259 OID 510266)
-- Name: kanj; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE kanj (
    entr integer NOT NULL,
    kanj smallint NOT NULL,
    txt character varying(2048) NOT NULL,
    CONSTRAINT kanj_kanj_check CHECK ((kanj > 0))
);


ALTER TABLE jmdict_en.kanj OWNER TO postgres;

--
-- TOC entry 334 (class 1259 OID 510273)
-- Name: rdng; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE rdng (
    entr integer NOT NULL,
    rdng smallint NOT NULL,
    txt character varying(2048) NOT NULL,
    CONSTRAINT rdng_rdng_check CHECK ((rdng > 0))
);


ALTER TABLE jmdict_en.rdng OWNER TO postgres;

--
-- TOC entry 335 (class 1259 OID 510280)
-- Name: hdwds; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW hdwds AS
 SELECT e.id,
    e.src,
    e.stat,
    e.seq,
    e.dfrm,
    e.unap,
    e.srcnote,
    e.notes,
    r.txt AS rtxt,
    k.txt AS ktxt
   FROM ((entr e
     LEFT JOIN rdng r ON ((r.entr = e.id)))
     LEFT JOIN kanj k ON ((k.entr = e.id)))
  WHERE (((r.rdng = 1) OR (r.rdng IS NULL)) AND ((k.kanj = 1) OR (k.kanj IS NULL)));


ALTER TABLE jmdict_en.hdwds OWNER TO postgres;

--
-- TOC entry 336 (class 1259 OID 510285)
-- Name: sens; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE sens (
    entr integer NOT NULL,
    sens smallint NOT NULL,
    notes text,
    CONSTRAINT sens_sens_check CHECK ((sens > 0))
);


ALTER TABLE jmdict_en.sens OWNER TO postgres;

--
-- TOC entry 337 (class 1259 OID 510292)
-- Name: ssum; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW ssum AS
 SELECT s.entr,
    s.sens,
    ( SELECT array_to_string(array_agg(sg.txt), '; '::text) AS array_to_string
           FROM ( SELECT g.txt
                   FROM gloss g
                  WHERE ((g.sens = s.sens) AND (g.entr = s.entr))
                  ORDER BY g.gloss) sg
          ORDER BY s.entr, s.sens) AS gloss,
    s.notes
   FROM sens s;


ALTER TABLE jmdict_en.ssum OWNER TO postgres;

--
-- TOC entry 338 (class 1259 OID 510296)
-- Name: essum; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW essum AS
 SELECT e.id,
    e.seq,
    e.src,
    e.stat,
    s.sens,
    h.rtxt AS rdng,
    h.ktxt AS kanj,
    s.gloss,
    ( SELECT count(*) AS count
           FROM sens
          WHERE (sens.entr = e.id)) AS nsens
   FROM ((entr e
     JOIN hdwds h ON ((h.id = e.id)))
     JOIN ssum s ON ((s.entr = e.id)));


ALTER TABLE jmdict_en.essum OWNER TO postgres;

SET default_with_oids = true;

--
-- TOC entry 339 (class 1259 OID 510301)
-- Name: freq; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE freq (
    entr integer NOT NULL,
    rdng smallint,
    kanj smallint,
    kw smallint NOT NULL,
    value integer,
    id integer NOT NULL,
    CONSTRAINT freq_check CHECK (((rdng IS NOT NULL) OR (kanj IS NOT NULL)))
);


ALTER TABLE jmdict_en.freq OWNER TO postgres;

--
-- TOC entry 340 (class 1259 OID 510305)
-- Name: is_p; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW is_p AS
 SELECT e.id,
    e.src,
    e.stat,
    e.seq,
    e.dfrm,
    e.unap,
    e.srcnote,
    e.notes,
    (EXISTS ( SELECT f.entr,
            f.rdng,
            f.kanj,
            f.kw,
            f.value
           FROM freq f
          WHERE ((f.entr = e.id) AND (((f.kw = ANY (ARRAY[1, 2, 7])) AND (f.value = 1)) OR (f.kw = 4))))) AS p
   FROM entr e;


ALTER TABLE jmdict_en.is_p OWNER TO postgres;

--
-- TOC entry 341 (class 1259 OID 510309)
-- Name: esum; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW esum AS
 SELECT e.id,
    e.seq,
    e.stat,
    e.src,
    e.dfrm,
    e.unap,
    e.notes,
    e.srcnote,
    h.rtxt AS rdng,
    h.ktxt AS kanj,
    ( SELECT array_to_string(array_agg(ss.gtxt), ' / '::text) AS array_to_string
           FROM ( SELECT ( SELECT array_to_string(array_agg(sg.txt), '; '::text) AS array_to_string
                           FROM ( SELECT g.txt
                                   FROM gloss g
                                  WHERE ((g.sens = s.sens) AND (g.entr = s.entr))
                                  ORDER BY g.gloss) sg
                          ORDER BY s.entr, s.sens) AS gtxt
                   FROM sens s
                  WHERE (s.entr = e.id)
                  ORDER BY s.sens) ss) AS gloss,
    ( SELECT count(*) AS count
           FROM sens
          WHERE (sens.entr = e.id)) AS nsens,
    ( SELECT is_p.p
           FROM is_p
          WHERE (is_p.id = e.id)) AS p
   FROM (entr e
     JOIN hdwds h ON ((h.id = e.id)));


ALTER TABLE jmdict_en.esum OWNER TO postgres;

SET default_with_oids = false;

--
-- TOC entry 342 (class 1259 OID 510314)
-- Name: fld; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE fld (
    entr integer NOT NULL,
    sens smallint NOT NULL,
    ord smallint NOT NULL,
    kw smallint NOT NULL
);


ALTER TABLE jmdict_en.fld OWNER TO postgres;

--
-- TOC entry 343 (class 1259 OID 510317)
-- Name: freq_id_seq; Type: SEQUENCE; Schema: jmdict_en; Owner: postgres
--

CREATE SEQUENCE freq_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE jmdict_en.freq_id_seq OWNER TO postgres;

--
-- TOC entry 4195 (class 0 OID 0)
-- Dependencies: 343
-- Name: freq_id_seq; Type: SEQUENCE OWNED BY; Schema: jmdict_en; Owner: postgres
--

ALTER SEQUENCE freq_id_seq OWNED BY freq.id;


--
-- TOC entry 344 (class 1259 OID 510319)
-- Name: grp; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE grp (
    entr integer NOT NULL,
    kw integer NOT NULL,
    ord integer NOT NULL,
    notes character varying(250)
);


ALTER TABLE jmdict_en.grp OWNER TO postgres;

--
-- TOC entry 345 (class 1259 OID 510322)
-- Name: hist; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE hist (
    entr integer NOT NULL,
    hist smallint NOT NULL,
    stat smallint NOT NULL,
    unap boolean NOT NULL,
    dt timestamp without time zone DEFAULT now() NOT NULL,
    userid character varying(20),
    name character varying(60),
    email character varying(120),
    diff text,
    refs text,
    notes text,
    CONSTRAINT hist_hist_check CHECK ((hist > 0))
);


ALTER TABLE jmdict_en.hist OWNER TO postgres;

--
-- TOC entry 346 (class 1259 OID 510330)
-- Name: item_cnts; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW item_cnts AS
 SELECT e.id,
    e.seq,
    ( SELECT count(*) AS count
           FROM rdng r
          WHERE (r.entr = e.id)) AS nrdng,
    ( SELECT count(*) AS count
           FROM kanj k
          WHERE (k.entr = e.id)) AS nkanj,
    ( SELECT count(*) AS count
           FROM sens s
          WHERE (s.entr = e.id)) AS nsens
   FROM entr e;


ALTER TABLE jmdict_en.item_cnts OWNER TO postgres;

--
-- TOC entry 347 (class 1259 OID 510334)
-- Name: kinf; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE kinf (
    entr integer NOT NULL,
    kanj smallint NOT NULL,
    ord smallint NOT NULL,
    kw smallint NOT NULL
);


ALTER TABLE jmdict_en.kinf OWNER TO postgres;

--
-- TOC entry 348 (class 1259 OID 510337)
-- Name: kresolv; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE kresolv (
    entr integer NOT NULL,
    kw smallint NOT NULL,
    value character varying(50) NOT NULL
);


ALTER TABLE jmdict_en.kresolv OWNER TO postgres;

--
-- TOC entry 349 (class 1259 OID 510340)
-- Name: kwcinf; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE kwcinf (
    id smallint NOT NULL,
    kw character varying(50) NOT NULL,
    descr character varying(250)
);


ALTER TABLE jmdict_en.kwcinf OWNER TO postgres;

--
-- TOC entry 350 (class 1259 OID 510343)
-- Name: kwdial; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE kwdial (
    id smallint NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict_en.kwdial OWNER TO postgres;

--
-- TOC entry 351 (class 1259 OID 510346)
-- Name: kwfld; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE kwfld (
    id smallint NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict_en.kwfld OWNER TO postgres;

--
-- TOC entry 352 (class 1259 OID 510349)
-- Name: kwfreq; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE kwfreq (
    id smallint NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict_en.kwfreq OWNER TO postgres;

--
-- TOC entry 353 (class 1259 OID 510352)
-- Name: kwginf; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE kwginf (
    id smallint NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict_en.kwginf OWNER TO postgres;

--
-- TOC entry 354 (class 1259 OID 510355)
-- Name: kwgrp; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE kwgrp (
    id integer NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict_en.kwgrp OWNER TO postgres;

--
-- TOC entry 355 (class 1259 OID 510358)
-- Name: kwgrp_id_seq; Type: SEQUENCE; Schema: jmdict_en; Owner: postgres
--

CREATE SEQUENCE kwgrp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE jmdict_en.kwgrp_id_seq OWNER TO postgres;

--
-- TOC entry 4196 (class 0 OID 0)
-- Dependencies: 355
-- Name: kwgrp_id_seq; Type: SEQUENCE OWNED BY; Schema: jmdict_en; Owner: postgres
--

ALTER SEQUENCE kwgrp_id_seq OWNED BY kwgrp.id;


--
-- TOC entry 356 (class 1259 OID 510360)
-- Name: kwkinf; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE kwkinf (
    id smallint NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict_en.kwkinf OWNER TO postgres;

--
-- TOC entry 357 (class 1259 OID 510363)
-- Name: kwlang; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE kwlang (
    id smallint NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict_en.kwlang OWNER TO postgres;

--
-- TOC entry 358 (class 1259 OID 510366)
-- Name: kwmisc; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE kwmisc (
    id smallint NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict_en.kwmisc OWNER TO postgres;

--
-- TOC entry 359 (class 1259 OID 510369)
-- Name: kwpos; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE kwpos (
    id smallint NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict_en.kwpos OWNER TO postgres;

--
-- TOC entry 360 (class 1259 OID 510372)
-- Name: kwrinf; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE kwrinf (
    id smallint NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict_en.kwrinf OWNER TO postgres;

--
-- TOC entry 361 (class 1259 OID 510375)
-- Name: kwsrc; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE kwsrc (
    id smallint NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255),
    dt date,
    notes character varying(255),
    seq character varying(20) NOT NULL,
    sinc smallint,
    smin bigint,
    smax bigint,
    srct smallint NOT NULL
);


ALTER TABLE jmdict_en.kwsrc OWNER TO postgres;

--
-- TOC entry 362 (class 1259 OID 510381)
-- Name: kwsrct; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE kwsrct (
    id smallint NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict_en.kwsrct OWNER TO postgres;

--
-- TOC entry 363 (class 1259 OID 510384)
-- Name: kwstat; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE kwstat (
    id smallint NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict_en.kwstat OWNER TO postgres;

--
-- TOC entry 364 (class 1259 OID 510387)
-- Name: kwxref; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE kwxref (
    id smallint NOT NULL,
    kw character varying(20) NOT NULL,
    descr character varying(255)
);


ALTER TABLE jmdict_en.kwxref OWNER TO postgres;

--
-- TOC entry 365 (class 1259 OID 510390)
-- Name: lsrc; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE lsrc (
    entr integer NOT NULL,
    sens smallint NOT NULL,
    ord smallint NOT NULL,
    lang smallint DEFAULT 1 NOT NULL,
    txt character varying(250) NOT NULL,
    part boolean DEFAULT false,
    wasei boolean DEFAULT false
);


ALTER TABLE jmdict_en.lsrc OWNER TO postgres;

--
-- TOC entry 366 (class 1259 OID 510396)
-- Name: misc; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE misc (
    entr integer NOT NULL,
    sens smallint NOT NULL,
    ord smallint NOT NULL,
    kw smallint NOT NULL
);


ALTER TABLE jmdict_en.misc OWNER TO postgres;

--
-- TOC entry 367 (class 1259 OID 510399)
-- Name: pkfreq; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW pkfreq AS
 SELECT k.entr,
    k.kanj,
    k.txt,
    (EXISTS ( SELECT f.entr,
            f.rdng,
            f.kanj,
            f.kw,
            f.value
           FROM freq f
          WHERE (((f.entr = k.entr) AND (f.kanj = k.kanj)) AND ((f.kw = ANY (ARRAY[1, 2, 3, 4])) AND (f.value = 1))))) AS p
   FROM kanj k;


ALTER TABLE jmdict_en.pkfreq OWNER TO postgres;

--
-- TOC entry 368 (class 1259 OID 510403)
-- Name: pos; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE pos (
    entr integer NOT NULL,
    sens smallint NOT NULL,
    ord smallint NOT NULL,
    kw smallint NOT NULL
);


ALTER TABLE jmdict_en.pos OWNER TO postgres;

--
-- TOC entry 369 (class 1259 OID 510406)
-- Name: prfreq; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW prfreq AS
 SELECT r.entr,
    r.rdng,
    r.txt,
    (EXISTS ( SELECT f.entr,
            f.rdng,
            f.kanj,
            f.kw,
            f.value
           FROM freq f
          WHERE (((f.entr = r.entr) AND (f.rdng = r.rdng)) AND ((f.kw = ANY (ARRAY[1, 2, 3, 4])) AND (f.value = 1))))) AS p
   FROM rdng r;


ALTER TABLE jmdict_en.prfreq OWNER TO postgres;

--
-- TOC entry 370 (class 1259 OID 510410)
-- Name: rad; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE rad (
    num smallint NOT NULL,
    var smallint NOT NULL,
    rchr character(1),
    chr character(1),
    strokes smallint,
    loc character(1),
    name character varying(50),
    examples character varying(20),
    CONSTRAINT rad_loc_check CHECK (((loc IS NULL) OR (loc = ANY (ARRAY['O'::bpchar, 'T'::bpchar, 'B'::bpchar, 'R'::bpchar, 'L'::bpchar, 'E'::bpchar, 'V'::bpchar]))))
);


ALTER TABLE jmdict_en.rad OWNER TO postgres;

--
-- TOC entry 371 (class 1259 OID 510414)
-- Name: rdngsnd; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE rdngsnd (
    entr integer NOT NULL,
    rdng integer NOT NULL,
    ord smallint NOT NULL,
    snd integer NOT NULL
);


ALTER TABLE jmdict_en.rdngsnd OWNER TO postgres;

--
-- TOC entry 372 (class 1259 OID 510417)
-- Name: restr; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE restr (
    entr integer NOT NULL,
    rdng smallint NOT NULL,
    kanj smallint NOT NULL
);


ALTER TABLE jmdict_en.restr OWNER TO postgres;

--
-- TOC entry 373 (class 1259 OID 510420)
-- Name: re_nokanji; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW re_nokanji AS
 SELECT e.id,
    e.seq,
    r.rdng,
    r.txt
   FROM ((entr e
     JOIN rdng r ON ((r.entr = e.id)))
     JOIN restr z ON (((z.entr = r.entr) AND (z.rdng = r.rdng))))
  GROUP BY e.id, e.seq, r.rdng, r.txt
 HAVING (count(z.kanj) = ( SELECT count(*) AS count
           FROM kanj k
          WHERE (k.entr = e.id)));


ALTER TABLE jmdict_en.re_nokanji OWNER TO postgres;

--
-- TOC entry 374 (class 1259 OID 510425)
-- Name: rinf; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE rinf (
    entr integer NOT NULL,
    rdng smallint NOT NULL,
    ord smallint NOT NULL,
    kw smallint NOT NULL
);


ALTER TABLE jmdict_en.rinf OWNER TO postgres;

--
-- TOC entry 375 (class 1259 OID 510428)
-- Name: rk_valid; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW rk_valid AS
 SELECT r.entr,
    r.rdng,
    r.txt AS rtxt,
    k.kanj,
    k.txt AS ktxt
   FROM (rdng r
     JOIN kanj k ON ((k.entr = r.entr)))
  WHERE (NOT (EXISTS ( SELECT z.entr,
            z.rdng,
            z.kanj
           FROM restr z
          WHERE (((z.entr = r.entr) AND (z.kanj = k.kanj)) AND (z.rdng = r.rdng)))));


ALTER TABLE jmdict_en.rk_valid OWNER TO postgres;

--
-- TOC entry 376 (class 1259 OID 510432)
-- Name: rk_validity; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW rk_validity AS
 SELECT e.id,
    e.seq,
    r.rdng,
    r.txt AS rtxt,
    k.kanj,
    k.txt AS ktxt,
        CASE
            WHEN (z.kanj IS NOT NULL) THEN 'X'::text
            ELSE NULL::text
        END AS valid
   FROM (((entr e
     LEFT JOIN rdng r ON ((r.entr = e.id)))
     LEFT JOIN kanj k ON ((k.entr = e.id)))
     LEFT JOIN restr z ON ((((z.entr = e.id) AND (r.rdng = z.rdng)) AND (k.kanj = z.kanj))));


ALTER TABLE jmdict_en.rk_validity OWNER TO postgres;

--
-- TOC entry 377 (class 1259 OID 510437)
-- Name: seq_jmdict; Type: SEQUENCE; Schema: jmdict_en; Owner: postgres
--

CREATE SEQUENCE seq_jmdict
    START WITH 1000000
    INCREMENT BY 10
    MINVALUE 1000000
    MAXVALUE 8999999
    CACHE 1;


ALTER TABLE jmdict_en.seq_jmdict OWNER TO postgres;

--
-- TOC entry 378 (class 1259 OID 510439)
-- Name: seq_test; Type: SEQUENCE; Schema: jmdict_en; Owner: postgres
--

CREATE SEQUENCE seq_test
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE jmdict_en.seq_test OWNER TO postgres;

--
-- TOC entry 379 (class 1259 OID 510441)
-- Name: stagk; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE stagk (
    entr integer NOT NULL,
    sens smallint NOT NULL,
    kanj smallint NOT NULL
);


ALTER TABLE jmdict_en.stagk OWNER TO postgres;

--
-- TOC entry 380 (class 1259 OID 510444)
-- Name: sk_valid; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW sk_valid AS
 SELECT s.entr,
    s.sens,
    k.kanj,
    k.txt AS ktxt
   FROM (sens s
     JOIN kanj k ON ((k.entr = s.entr)))
  WHERE (NOT (EXISTS ( SELECT z.entr,
            z.sens,
            z.kanj
           FROM stagk z
          WHERE (((z.entr = s.entr) AND (z.sens = s.sens)) AND (z.kanj = k.kanj)))));


ALTER TABLE jmdict_en.sk_valid OWNER TO postgres;

--
-- TOC entry 381 (class 1259 OID 510448)
-- Name: snd; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE snd (
    id integer NOT NULL,
    file smallint NOT NULL,
    strt integer DEFAULT 0 NOT NULL,
    leng integer DEFAULT 0 NOT NULL,
    trns text,
    notes character varying(255)
);


ALTER TABLE jmdict_en.snd OWNER TO postgres;

--
-- TOC entry 382 (class 1259 OID 510456)
-- Name: snd_id_seq; Type: SEQUENCE; Schema: jmdict_en; Owner: postgres
--

CREATE SEQUENCE snd_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE jmdict_en.snd_id_seq OWNER TO postgres;

--
-- TOC entry 4197 (class 0 OID 0)
-- Dependencies: 382
-- Name: snd_id_seq; Type: SEQUENCE OWNED BY; Schema: jmdict_en; Owner: postgres
--

ALTER SEQUENCE snd_id_seq OWNED BY snd.id;


--
-- TOC entry 383 (class 1259 OID 510458)
-- Name: sndfile; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE sndfile (
    id integer NOT NULL,
    vol integer NOT NULL,
    title character varying(50),
    loc character varying(500),
    type smallint,
    notes text
);


ALTER TABLE jmdict_en.sndfile OWNER TO postgres;

--
-- TOC entry 384 (class 1259 OID 510464)
-- Name: sndfile_id_seq; Type: SEQUENCE; Schema: jmdict_en; Owner: postgres
--

CREATE SEQUENCE sndfile_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE jmdict_en.sndfile_id_seq OWNER TO postgres;

--
-- TOC entry 4198 (class 0 OID 0)
-- Dependencies: 384
-- Name: sndfile_id_seq; Type: SEQUENCE OWNED BY; Schema: jmdict_en; Owner: postgres
--

ALTER SEQUENCE sndfile_id_seq OWNED BY sndfile.id;


--
-- TOC entry 385 (class 1259 OID 510466)
-- Name: sndvol; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE sndvol (
    id integer NOT NULL,
    title character varying(50),
    loc character varying(500),
    type smallint NOT NULL,
    idstr character varying(100),
    corp integer,
    notes text
);


ALTER TABLE jmdict_en.sndvol OWNER TO postgres;

--
-- TOC entry 386 (class 1259 OID 510472)
-- Name: sndvol_id_seq; Type: SEQUENCE; Schema: jmdict_en; Owner: postgres
--

CREATE SEQUENCE sndvol_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE jmdict_en.sndvol_id_seq OWNER TO postgres;

--
-- TOC entry 4199 (class 0 OID 0)
-- Dependencies: 386
-- Name: sndvol_id_seq; Type: SEQUENCE OWNED BY; Schema: jmdict_en; Owner: postgres
--

ALTER SEQUENCE sndvol_id_seq OWNED BY sndvol.id;


--
-- TOC entry 387 (class 1259 OID 510474)
-- Name: stagr; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE stagr (
    entr integer NOT NULL,
    sens smallint NOT NULL,
    rdng smallint NOT NULL
);


ALTER TABLE jmdict_en.stagr OWNER TO postgres;

--
-- TOC entry 388 (class 1259 OID 510477)
-- Name: sr_valid; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW sr_valid AS
 SELECT s.entr,
    s.sens,
    r.rdng,
    r.txt AS rtxt
   FROM (sens s
     JOIN rdng r ON ((r.entr = s.entr)))
  WHERE (NOT (EXISTS ( SELECT z.entr,
            z.sens,
            z.rdng
           FROM stagr z
          WHERE (((z.entr = s.entr) AND (z.sens = s.sens)) AND (z.rdng = r.rdng)))));


ALTER TABLE jmdict_en.sr_valid OWNER TO postgres;

--
-- TOC entry 389 (class 1259 OID 510481)
-- Name: vconj; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW vconj AS
 SELECT conjo.pos,
    kwpos.kw AS ptxt,
    conj.id AS conj,
    conj.name AS ctxt,
    conjo.neg,
    conjo.fml
   FROM ((conj
     JOIN conjo ON ((conj.id = conjo.conj)))
     JOIN kwpos ON ((kwpos.id = conjo.pos)))
  ORDER BY conjo.pos, conjo.conj, conjo.neg, conjo.fml;


ALTER TABLE jmdict_en.vconj OWNER TO postgres;

--
-- TOC entry 390 (class 1259 OID 510485)
-- Name: vconotes; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW vconotes AS
 SELECT DISTINCT k.id AS pos,
    k.kw AS ptxt,
    m.id,
    m.txt
   FROM (((kwpos k
     JOIN conjo c ON ((c.pos = k.id)))
     JOIN conjo_notes n ON ((n.pos = c.pos)))
     JOIN conotes m ON ((m.id = n.note)))
  ORDER BY m.id;


ALTER TABLE jmdict_en.vconotes OWNER TO postgres;

--
-- TOC entry 391 (class 1259 OID 510490)
-- Name: vcopos; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW vcopos AS
 SELECT p.id,
    p.kw,
    p.descr
   FROM (kwpos p
     JOIN ( SELECT DISTINCT conjo.pos
           FROM conjo) c ON ((c.pos = p.id)));


ALTER TABLE jmdict_en.vcopos OWNER TO postgres;

--
-- TOC entry 392 (class 1259 OID 510494)
-- Name: vinfl; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW vinfl AS
 SELECT u.id,
    u.seq,
    u.src,
    u.unap,
    u.pos,
    u.ptxt,
    u.knum,
    u.ktxt,
    u.rnum,
    u.rtxt,
    u.conj,
    u.ctxt,
    u.neg,
    u.fml,
    ((
        CASE
            WHEN u.neg THEN 'neg'::text
            ELSE 'aff'::text
        END || '-'::text) ||
        CASE
            WHEN u.fml THEN 'polite'::text
            ELSE 'plain'::text
        END) AS t,
    u.onum,
    (
        CASE
            WHEN ((u.ktxt)::text ~ '[^„ÅÇ-„Çì].$'::text) THEN COALESCE(("left"((u.ktxt)::text, ((length((u.ktxt)::text) - u.stem) - 1)) || (u.euphk)::text), "left"((u.ktxt)::text, (length((u.ktxt)::text) - u.stem)))
            ELSE COALESCE(("left"((u.ktxt)::text, ((length((u.ktxt)::text) - u.stem) - 1)) || (u.euphr)::text), "left"((u.ktxt)::text, (length((u.ktxt)::text) - u.stem)))
        END || (u.okuri)::text) AS kitxt,
    (COALESCE(("left"((u.rtxt)::text, ((length((u.rtxt)::text) - u.stem) - 1)) || (u.euphr)::text), "left"((u.rtxt)::text, (length((u.rtxt)::text) - u.stem))) || (u.okuri)::text) AS ritxt,
    ( SELECT array_agg(n.note ORDER BY n.note) AS array_agg
           FROM conjo_notes n
          WHERE (((((u.pos = n.pos) AND (u.conj = n.conj)) AND (u.neg = n.neg)) AND (u.fml = n.fml)) AND (u.onum = n.onum))) AS notes
   FROM ( SELECT DISTINCT entr.id,
            entr.seq,
            entr.src,
            entr.unap,
            kanj.txt AS ktxt,
            rdng.txt AS rtxt,
            pos.kw AS pos,
            kwpos.kw AS ptxt,
            conj.id AS conj,
            conj.name AS ctxt,
            conjo.onum,
            conjo.okuri,
            conjo.neg,
            conjo.fml,
            kanj.kanj AS knum,
            rdng.rdng AS rnum,
            conjo.stem,
            conjo.euphr,
            conjo.euphk
           FROM (((((((entr
             JOIN sens ON ((entr.id = sens.entr)))
             JOIN pos ON (((pos.entr = sens.entr) AND (pos.sens = sens.sens))))
             JOIN kwpos ON ((kwpos.id = pos.kw)))
             JOIN conjo ON ((conjo.pos = pos.kw)))
             JOIN conj ON ((conj.id = conjo.conj)))
             LEFT JOIN kanj ON ((entr.id = kanj.entr)))
             LEFT JOIN rdng ON ((entr.id = rdng.entr)))
          WHERE ((((conjo.okuri IS NOT NULL) AND (NOT (EXISTS ( SELECT 1
                   FROM stagr
                  WHERE (((stagr.entr = entr.id) AND (stagr.sens = sens.sens)) AND (stagr.rdng = rdng.rdng)))))) AND (NOT (EXISTS ( SELECT 1
                   FROM stagk
                  WHERE (((stagk.entr = entr.id) AND (stagk.sens = sens.sens)) AND (stagk.kanj = kanj.kanj)))))) AND (NOT (EXISTS ( SELECT 1
                   FROM restr
                  WHERE (((restr.entr = entr.id) AND (restr.rdng = rdng.rdng)) AND (restr.kanj = kanj.kanj))))))) u
  ORDER BY u.id, u.pos, u.knum, u.rnum, u.conj, u.neg, u.fml, u.onum;


ALTER TABLE jmdict_en.vinfl OWNER TO postgres;

--
-- TOC entry 393 (class 1259 OID 510499)
-- Name: vinflxt_; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW vinflxt_ AS
 SELECT vinfl.id,
    vinfl.seq,
    vinfl.src,
    vinfl.unap,
    vinfl.pos,
    vinfl.ptxt,
    vinfl.knum,
    vinfl.ktxt,
    vinfl.rnum,
    vinfl.rtxt,
    vinfl.conj,
    vinfl.ctxt,
    vinfl.t,
    string_agg(((((((COALESCE(vinfl.kitxt, ''::text) ||
        CASE
            WHEN (vinfl.kitxt IS NOT NULL) THEN '„Äê'::text
            ELSE ''::text
        END) || COALESCE(vinfl.ritxt, ''::text)) ||
        CASE
            WHEN (vinfl.kitxt IS NOT NULL) THEN '„Äë'::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (vinfl.notes IS NOT NULL) THEN ' ['::text
            ELSE ''::text
        END) || COALESCE(array_to_string(vinfl.notes, ','::text), ''::text)) ||
        CASE
            WHEN (vinfl.notes IS NOT NULL) THEN ']'::text
            ELSE ''::text
        END), ',
'::text ORDER BY vinfl.onum) AS word
   FROM vinfl
  GROUP BY vinfl.id, vinfl.seq, vinfl.src, vinfl.unap, vinfl.pos, vinfl.ptxt, vinfl.knum, vinfl.ktxt, vinfl.rnum, vinfl.rtxt, vinfl.conj, vinfl.ctxt, vinfl.t
  ORDER BY vinfl.id, vinfl.pos, vinfl.ptxt, vinfl.knum, vinfl.rnum, vinfl.conj;


ALTER TABLE jmdict_en.vinflxt_ OWNER TO postgres;

--
-- TOC entry 394 (class 1259 OID 510504)
-- Name: vinflxt; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW vinflxt AS
 SELECT vinflxt_.id,
    vinflxt_.seq,
    vinflxt_.src,
    vinflxt_.unap,
    vinflxt_.pos,
    vinflxt_.ptxt,
    vinflxt_.knum,
    vinflxt_.ktxt,
    vinflxt_.rnum,
    vinflxt_.rtxt,
    vinflxt_.conj,
    vinflxt_.ctxt,
    min(
        CASE vinflxt_.t
            WHEN 'aff-plain'::text THEN vinflxt_.word
            ELSE NULL::text
        END) AS w0,
    min(
        CASE vinflxt_.t
            WHEN 'aff-polite'::text THEN vinflxt_.word
            ELSE NULL::text
        END) AS w1,
    min(
        CASE vinflxt_.t
            WHEN 'neg-plain'::text THEN vinflxt_.word
            ELSE NULL::text
        END) AS w2,
    min(
        CASE vinflxt_.t
            WHEN 'neg-polite'::text THEN vinflxt_.word
            ELSE NULL::text
        END) AS w3
   FROM vinflxt_
  GROUP BY vinflxt_.id, vinflxt_.seq, vinflxt_.src, vinflxt_.unap, vinflxt_.pos, vinflxt_.ptxt, vinflxt_.knum, vinflxt_.ktxt, vinflxt_.rnum, vinflxt_.rtxt, vinflxt_.conj, vinflxt_.ctxt
  ORDER BY vinflxt_.id, vinflxt_.pos, vinflxt_.knum, vinflxt_.rnum, vinflxt_.conj;


ALTER TABLE jmdict_en.vinflxt OWNER TO postgres;

--
-- TOC entry 395 (class 1259 OID 510509)
-- Name: vsnd; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW vsnd AS
 SELECT snd.id,
    snd.strt,
    snd.leng,
    sndfile.loc AS sfile,
    sndvol.loc AS sdir,
    (sndvol.type = 2) AS iscd,
    sndvol.id AS sdid,
    snd.trns
   FROM ((sndvol
     JOIN sndfile ON ((sndvol.id = sndfile.vol)))
     JOIN snd ON ((sndfile.id = snd.file)));


ALTER TABLE jmdict_en.vsnd OWNER TO postgres;

--
-- TOC entry 396 (class 1259 OID 510513)
-- Name: vt_gloss; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW vt_gloss AS
 SELECT g.entr,
    g.sens,
    ( SELECT array_to_string(array_agg(g2.txt), '; '::text) AS array_to_string
           FROM ( SELECT g3.txt
                   FROM gloss g3
                  WHERE ((g3.entr = g.entr) AND (g3.sens = g.sens))
                  ORDER BY g3.gloss) g2) AS gtxt
   FROM ( SELECT DISTINCT gloss.entr,
            gloss.sens
           FROM gloss) g;


ALTER TABLE jmdict_en.vt_gloss OWNER TO postgres;

--
-- TOC entry 397 (class 1259 OID 510517)
-- Name: vt_kanj; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW vt_kanj AS
 SELECT k.entr,
    ( SELECT array_to_string(array_agg(k2.txt), '; '::text) AS array_to_string
           FROM ( SELECT k3.txt
                   FROM kanj k3
                  WHERE (k3.entr = k.entr)
                  ORDER BY k3.kanj) k2) AS ktxt
   FROM ( SELECT DISTINCT kanj.entr
           FROM kanj) k;


ALTER TABLE jmdict_en.vt_kanj OWNER TO postgres;

--
-- TOC entry 398 (class 1259 OID 510521)
-- Name: vt_rdng; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW vt_rdng AS
 SELECT r.entr,
    ( SELECT array_to_string(array_agg(r2.txt), '; '::text) AS array_to_string
           FROM ( SELECT r3.txt
                   FROM rdng r3
                  WHERE (r3.entr = r.entr)
                  ORDER BY r3.rdng) r2) AS rtxt
   FROM ( SELECT DISTINCT rdng.entr
           FROM rdng) r;


ALTER TABLE jmdict_en.vt_rdng OWNER TO postgres;

--
-- TOC entry 399 (class 1259 OID 510525)
-- Name: vt_sens; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW vt_sens AS
 SELECT s.entr,
    ( SELECT array_to_string(array_agg(g2.txt), ' / '::text) AS array_to_string
           FROM ( SELECT g3.gtxt AS txt
                   FROM vt_gloss g3
                  WHERE (g3.entr = s.entr)
                  ORDER BY g3.entr, g3.sens) g2) AS stxt
   FROM ( SELECT DISTINCT sens.entr
           FROM sens) s;


ALTER TABLE jmdict_en.vt_sens OWNER TO postgres;

--
-- TOC entry 400 (class 1259 OID 510529)
-- Name: vt_entr; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW vt_entr AS
 SELECT e.id,
    e.src,
    e.stat,
    e.seq,
    e.dfrm,
    e.unap,
    e.srcnote,
    e.notes,
    r.rtxt,
    k.ktxt,
    s.stxt,
    ( SELECT count(*) AS count
           FROM sens
          WHERE (sens.entr = e.id)) AS nsens,
    ( SELECT is_p.p
           FROM is_p
          WHERE (is_p.id = e.id)) AS p
   FROM (((entr e
     LEFT JOIN vt_rdng r ON ((r.entr = e.id)))
     LEFT JOIN vt_kanj k ON ((k.entr = e.id)))
     LEFT JOIN vt_sens s ON ((s.entr = e.id)));


ALTER TABLE jmdict_en.vt_entr OWNER TO postgres;

--
-- TOC entry 401 (class 1259 OID 510534)
-- Name: vt_gloss2; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW vt_gloss2 AS
 SELECT g.entr,
    g.sens,
    ( SELECT array_to_string(array_agg(g2.txt), '; '::text) AS array_to_string
           FROM ( SELECT (
                        CASE g3.ginf
                            WHEN 1 THEN ''::text
                            ELSE COALESCE((('['::text || (kw.kw)::text) || '] '::text), ''::text)
                        END || (g3.txt)::text) AS txt
                   FROM (gloss g3
                     JOIN kwginf kw ON ((kw.id = g3.ginf)))
                  WHERE ((g3.entr = g.entr) AND (g3.sens = g.sens))
                  ORDER BY g3.gloss) g2) AS gtxt
   FROM ( SELECT DISTINCT gloss.entr,
            gloss.sens
           FROM gloss) g;


ALTER TABLE jmdict_en.vt_gloss2 OWNER TO postgres;

--
-- TOC entry 402 (class 1259 OID 510539)
-- Name: vt_kinf; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW vt_kinf AS
 SELECT k.entr,
    k.kanj,
    ( SELECT array_to_string(array_agg(k2.txt), ','::text) AS array_to_string
           FROM ( SELECT kw.kw AS txt
                   FROM (kinf k3
                     JOIN kwkinf kw ON ((kw.id = k3.kw)))
                  WHERE ((k3.entr = k.entr) AND (k3.kanj = k.kanj))
                  ORDER BY k3.ord) k2) AS kitxt
   FROM ( SELECT DISTINCT kanj.entr,
            kanj.kanj
           FROM kanj) k;


ALTER TABLE jmdict_en.vt_kinf OWNER TO postgres;

--
-- TOC entry 403 (class 1259 OID 510544)
-- Name: vt_kanj2; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW vt_kanj2 AS
 SELECT k.entr,
    ( SELECT array_to_string(array_agg(k2.txt), '; '::text) AS array_to_string
           FROM ( SELECT ((k3.txt)::text || COALESCE((('['::text || i.kitxt) || ']'::text), ''::text)) AS txt
                   FROM (kanj k3
                     LEFT JOIN vt_kinf i ON (((i.entr = k3.entr) AND (i.kanj = k3.kanj))))
                  WHERE (k3.entr = k.entr)
                  ORDER BY k3.kanj) k2) AS ktxt
   FROM ( SELECT DISTINCT kanj.entr
           FROM kanj) k;


ALTER TABLE jmdict_en.vt_kanj2 OWNER TO postgres;

--
-- TOC entry 404 (class 1259 OID 510549)
-- Name: vt_misc; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW vt_misc AS
 SELECT m.entr,
    m.sens,
    ( SELECT array_to_string(array_agg(m2.txt), ','::text) AS array_to_string
           FROM ( SELECT kw.kw AS txt
                   FROM (misc m3
                     JOIN kwmisc kw ON ((kw.id = m3.kw)))
                  WHERE ((m3.entr = m.entr) AND (m3.sens = m.sens))
                  ORDER BY m3.ord) m2) AS mtxt
   FROM ( SELECT DISTINCT misc.entr,
            misc.sens
           FROM misc) m;


ALTER TABLE jmdict_en.vt_misc OWNER TO postgres;

--
-- TOC entry 405 (class 1259 OID 510554)
-- Name: vt_pos; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW vt_pos AS
 SELECT p.entr,
    p.sens,
    ( SELECT array_to_string(array_agg(p2.txt), ','::text) AS array_to_string
           FROM ( SELECT kw.kw AS txt
                   FROM (pos p3
                     JOIN kwpos kw ON ((kw.id = p3.kw)))
                  WHERE ((p3.entr = p.entr) AND (p3.sens = p.sens))
                  ORDER BY p3.ord) p2) AS ptxt
   FROM ( SELECT DISTINCT pos.entr,
            pos.sens
           FROM pos) p;


ALTER TABLE jmdict_en.vt_pos OWNER TO postgres;

--
-- TOC entry 406 (class 1259 OID 510559)
-- Name: vt_rinf; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW vt_rinf AS
 SELECT r.entr,
    r.rdng,
    ( SELECT array_to_string(array_agg(r2.txt), ','::text) AS array_to_string
           FROM ( SELECT kw.kw AS txt
                   FROM (rinf r3
                     JOIN kwrinf kw ON ((kw.id = r3.kw)))
                  WHERE ((r3.entr = r.entr) AND (r3.rdng = r.rdng))
                  ORDER BY r3.ord) r2) AS ritxt
   FROM ( SELECT DISTINCT rdng.entr,
            rdng.rdng
           FROM rdng) r;


ALTER TABLE jmdict_en.vt_rinf OWNER TO postgres;

--
-- TOC entry 407 (class 1259 OID 510564)
-- Name: vt_rdng2; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW vt_rdng2 AS
 SELECT r.entr,
    ( SELECT array_to_string(array_agg(r2.txt), '; '::text) AS array_to_string
           FROM ( SELECT ((r3.txt)::text || COALESCE((('['::text || i.ritxt) || ']'::text), ''::text)) AS txt
                   FROM (rdng r3
                     LEFT JOIN vt_rinf i ON (((i.entr = r3.entr) AND (i.rdng = r3.rdng))))
                  WHERE (r3.entr = r.entr)
                  ORDER BY r3.rdng) r2) AS rtxt
   FROM ( SELECT DISTINCT rdng.entr
           FROM rdng) r;


ALTER TABLE jmdict_en.vt_rdng2 OWNER TO postgres;

--
-- TOC entry 408 (class 1259 OID 510569)
-- Name: vt_sens3; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW vt_sens3 AS
 SELECT s.entr,
    (( SELECT array_to_string(array_agg(g2.txt), ' / '::text) AS array_to_string
           FROM ( SELECT (((COALESCE((('['::text || p.ptxt) || ']'::text), ''::text) || COALESCE((('['::text || m.mtxt) || ']'::text), ''::text)) ||
                        CASE
                            WHEN ((p.ptxt IS NULL) AND (m.mtxt IS NULL)) THEN ''::text
                            ELSE ' '::text
                        END) || g3.gtxt) AS txt
                   FROM ((vt_gloss2 g3
                     LEFT JOIN vt_pos p ON (((p.entr = g3.entr) AND (p.sens = g3.sens))))
                     LEFT JOIN vt_misc m ON (((m.entr = g3.entr) AND (m.sens = g3.sens))))
                  WHERE (g3.entr = s.entr)
                  ORDER BY g3.entr, g3.sens) g2) || COALESCE(((' „Ää'::text || s.notes) || '„Äã'::text), ''::text)) AS stxt
   FROM ( SELECT DISTINCT sens.entr,
            sens.notes
           FROM sens) s;


ALTER TABLE jmdict_en.vt_sens3 OWNER TO postgres;

--
-- TOC entry 409 (class 1259 OID 510574)
-- Name: vt_entr3; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW vt_entr3 AS
 SELECT e.id,
    e.src,
    e.stat,
    e.seq,
    e.dfrm,
    e.unap,
    e.srcnote,
    e.notes,
    r.rtxt,
    k.ktxt,
    s.stxt,
    ( SELECT count(*) AS count
           FROM sens
          WHERE (sens.entr = e.id)) AS nsens,
    ( SELECT is_p.p
           FROM is_p
          WHERE (is_p.id = e.id)) AS p
   FROM (((entr e
     LEFT JOIN vt_rdng2 r ON ((r.entr = e.id)))
     LEFT JOIN vt_kanj2 k ON ((k.entr = e.id)))
     LEFT JOIN vt_sens3 s ON ((s.entr = e.id)));


ALTER TABLE jmdict_en.vt_entr3 OWNER TO postgres;

--
-- TOC entry 410 (class 1259 OID 510579)
-- Name: vt_sens2; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW vt_sens2 AS
 SELECT s.entr,
    (( SELECT array_to_string(array_agg(g2.txt), ' / '::text) AS array_to_string
           FROM ( SELECT g3.gtxt AS txt
                   FROM vt_gloss g3
                  WHERE (g3.entr = s.entr)
                  ORDER BY g3.entr, g3.sens) g2) || COALESCE(((' „Ää'::text || s.notes) || '„Äã'::text), ''::text)) AS stxt
   FROM ( SELECT DISTINCT sens.entr,
            sens.notes
           FROM sens) s;


ALTER TABLE jmdict_en.vt_sens2 OWNER TO postgres;

--
-- TOC entry 411 (class 1259 OID 510583)
-- Name: xref; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE xref (
    entr integer NOT NULL,
    sens smallint NOT NULL,
    xref smallint NOT NULL,
    typ smallint NOT NULL,
    xentr integer NOT NULL,
    xsens smallint NOT NULL,
    rdng smallint,
    kanj smallint,
    notes text,
    CONSTRAINT xref_check CHECK ((xentr <> entr)),
    CONSTRAINT xref_check1 CHECK (((kanj IS NOT NULL) OR (rdng IS NOT NULL))),
    CONSTRAINT xref_xref_check CHECK ((xref > 0))
);


ALTER TABLE jmdict_en.xref OWNER TO postgres;

--
-- TOC entry 412 (class 1259 OID 510592)
-- Name: xrefhw; Type: VIEW; Schema: jmdict_en; Owner: postgres
--

CREATE VIEW xrefhw AS
 SELECT r.entr,
    rm.sens,
    r.txt AS rtxt,
    k.kanj,
    k.txt AS ktxt
   FROM (((( SELECT sr_valid.entr,
            sr_valid.sens,
            min(sr_valid.rdng) AS rdng
           FROM sr_valid
          GROUP BY sr_valid.entr, sr_valid.sens) rm
     JOIN rdng r ON (((r.entr = rm.entr) AND (r.rdng = rm.rdng))))
     LEFT JOIN ( SELECT sk_valid.entr,
            sk_valid.sens,
            min(sk_valid.kanj) AS kanj
           FROM sk_valid
          GROUP BY sk_valid.entr, sk_valid.sens) km ON (((km.entr = r.entr) AND (km.sens = rm.sens))))
     LEFT JOIN kanj k ON (((k.entr = km.entr) AND (k.kanj = km.kanj))));


ALTER TABLE jmdict_en.xrefhw OWNER TO postgres;

--
-- TOC entry 413 (class 1259 OID 510597)
-- Name: xresolv; Type: TABLE; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE TABLE xresolv (
    entr integer NOT NULL,
    sens smallint NOT NULL,
    typ smallint NOT NULL,
    ord smallint NOT NULL,
    rtxt character varying(250),
    ktxt character varying(250),
    tsens smallint,
    notes character varying(250),
    prio boolean DEFAULT false,
    CONSTRAINT xresolv_check CHECK (((rtxt IS NOT NULL) OR (ktxt IS NOT NULL)))
);


ALTER TABLE jmdict_en.xresolv OWNER TO postgres;

SET search_path = kanjidic2, pg_catalog;

--
-- TOC entry 414 (class 1259 OID 510605)
-- Name: cf_reading_type; Type: TABLE; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

CREATE TABLE cf_reading_type (
    classifier_id integer NOT NULL,
    id integer NOT NULL
);


ALTER TABLE kanjidic2.cf_reading_type OWNER TO postgres;

--
-- TOC entry 415 (class 1259 OID 510608)
-- Name: codepoint; Type: TABLE; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

CREATE TABLE codepoint (
    id integer NOT NULL,
    cp_type text NOT NULL,
    cp_value text NOT NULL,
    kanji_id integer NOT NULL
);


ALTER TABLE kanjidic2.codepoint OWNER TO postgres;

--
-- TOC entry 4200 (class 0 OID 0)
-- Dependencies: 415
-- Name: TABLE codepoint; Type: COMMENT; Schema: kanjidic2; Owner: postgres
--

COMMENT ON TABLE codepoint IS 'ucs - unicode hex value of kanji literal';


--
-- TOC entry 416 (class 1259 OID 510614)
-- Name: codepoint_id_seq; Type: SEQUENCE; Schema: kanjidic2; Owner: postgres
--

CREATE SEQUENCE codepoint_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE kanjidic2.codepoint_id_seq OWNER TO postgres;

--
-- TOC entry 4201 (class 0 OID 0)
-- Dependencies: 416
-- Name: codepoint_id_seq; Type: SEQUENCE OWNED BY; Schema: kanjidic2; Owner: postgres
--

ALTER SEQUENCE codepoint_id_seq OWNED BY codepoint.id;


--
-- TOC entry 417 (class 1259 OID 510616)
-- Name: dic_number; Type: TABLE; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

CREATE TABLE dic_number (
    id integer NOT NULL,
    dic_ref text NOT NULL,
    dr_type text NOT NULL,
    kanji_id integer NOT NULL
);


ALTER TABLE kanjidic2.dic_number OWNER TO postgres;

--
-- TOC entry 418 (class 1259 OID 510622)
-- Name: dic_number_id_seq; Type: SEQUENCE; Schema: kanjidic2; Owner: postgres
--

CREATE SEQUENCE dic_number_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE kanjidic2.dic_number_id_seq OWNER TO postgres;

--
-- TOC entry 4202 (class 0 OID 0)
-- Dependencies: 418
-- Name: dic_number_id_seq; Type: SEQUENCE OWNED BY; Schema: kanjidic2; Owner: postgres
--

ALTER SEQUENCE dic_number_id_seq OWNED BY dic_number.id;


--
-- TOC entry 419 (class 1259 OID 510624)
-- Name: jinmei; Type: TABLE; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

CREATE TABLE jinmei (
    jinmei_seq integer NOT NULL,
    kanji_id integer NOT NULL
);


ALTER TABLE kanjidic2.jinmei OWNER TO postgres;

--
-- TOC entry 420 (class 1259 OID 510627)
-- Name: jouyou; Type: TABLE; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

CREATE TABLE jouyou (
    grade integer NOT NULL,
    grade_seq integer NOT NULL,
    meaning_en character varying NOT NULL,
    old_kanji character varying(1),
    radical character varying(3),
    year_added integer,
    kanji_id integer NOT NULL,
    jouyou_id integer
);


ALTER TABLE kanjidic2.jouyou OWNER TO postgres;

--
-- TOC entry 421 (class 1259 OID 510633)
-- Name: kanji_id_seq; Type: SEQUENCE; Schema: kanjidic2; Owner: postgres
--

CREATE SEQUENCE kanji_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE kanjidic2.kanji_id_seq OWNER TO postgres;

--
-- TOC entry 4203 (class 0 OID 0)
-- Dependencies: 421
-- Name: kanji_id_seq; Type: SEQUENCE OWNED BY; Schema: kanjidic2; Owner: postgres
--

ALTER SEQUENCE kanji_id_seq OWNED BY kanji.id;


--
-- TOC entry 422 (class 1259 OID 510635)
-- Name: kanji_meaning; Type: TABLE; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

CREATE TABLE kanji_meaning (
    id integer NOT NULL,
    m_lang text,
    meaning text NOT NULL,
    kanji_id integer NOT NULL
);


ALTER TABLE kanjidic2.kanji_meaning OWNER TO postgres;

--
-- TOC entry 423 (class 1259 OID 510641)
-- Name: kanji_meaning_id_seq; Type: SEQUENCE; Schema: kanjidic2; Owner: postgres
--

CREATE SEQUENCE kanji_meaning_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE kanjidic2.kanji_meaning_id_seq OWNER TO postgres;

--
-- TOC entry 4204 (class 0 OID 0)
-- Dependencies: 423
-- Name: kanji_meaning_id_seq; Type: SEQUENCE OWNED BY; Schema: kanjidic2; Owner: postgres
--

ALTER SEQUENCE kanji_meaning_id_seq OWNED BY kanji_meaning.id;


--
-- TOC entry 424 (class 1259 OID 510643)
-- Name: kanji_primitive; Type: TABLE; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

CREATE TABLE kanji_primitive (
    primitive character varying(1) NOT NULL,
    id integer NOT NULL
);


ALTER TABLE kanjidic2.kanji_primitive OWNER TO postgres;

--
-- TOC entry 425 (class 1259 OID 510646)
-- Name: kanji_primitive_id_seq; Type: SEQUENCE; Schema: kanjidic2; Owner: postgres
--

CREATE SEQUENCE kanji_primitive_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE kanjidic2.kanji_primitive_id_seq OWNER TO postgres;

--
-- TOC entry 4205 (class 0 OID 0)
-- Dependencies: 425
-- Name: kanji_primitive_id_seq; Type: SEQUENCE OWNED BY; Schema: kanjidic2; Owner: postgres
--

ALTER SEQUENCE kanji_primitive_id_seq OWNED BY kanji_primitive.id;


--
-- TOC entry 426 (class 1259 OID 510648)
-- Name: kanji_radical; Type: TABLE; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

CREATE TABLE kanji_radical (
    id integer NOT NULL,
    rad_type text NOT NULL,
    rad_value text NOT NULL,
    kanji_id integer NOT NULL
);


ALTER TABLE kanjidic2.kanji_radical OWNER TO postgres;

--
-- TOC entry 427 (class 1259 OID 510654)
-- Name: kanji_radical_id_seq; Type: SEQUENCE; Schema: kanjidic2; Owner: postgres
--

CREATE SEQUENCE kanji_radical_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE kanjidic2.kanji_radical_id_seq OWNER TO postgres;

--
-- TOC entry 4206 (class 0 OID 0)
-- Dependencies: 427
-- Name: kanji_radical_id_seq; Type: SEQUENCE OWNED BY; Schema: kanjidic2; Owner: postgres
--

ALTER SEQUENCE kanji_radical_id_seq OWNED BY kanji_radical.id;


--
-- TOC entry 428 (class 1259 OID 510656)
-- Name: kanji_reading_id_seq; Type: SEQUENCE; Schema: kanjidic2; Owner: postgres
--

CREATE SEQUENCE kanji_reading_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE kanjidic2.kanji_reading_id_seq OWNER TO postgres;

--
-- TOC entry 4207 (class 0 OID 0)
-- Dependencies: 428
-- Name: kanji_reading_id_seq; Type: SEQUENCE OWNED BY; Schema: kanjidic2; Owner: postgres
--

ALTER SEQUENCE kanji_reading_id_seq OWNED BY kanji_reading.id;


--
-- TOC entry 429 (class 1259 OID 510658)
-- Name: kanji_variant; Type: TABLE; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

CREATE TABLE kanji_variant (
    id integer NOT NULL,
    var_type text NOT NULL,
    variant text NOT NULL,
    kanji_id integer
);


ALTER TABLE kanjidic2.kanji_variant OWNER TO postgres;

--
-- TOC entry 430 (class 1259 OID 510664)
-- Name: kanji_variant_id_seq; Type: SEQUENCE; Schema: kanjidic2; Owner: postgres
--

CREATE SEQUENCE kanji_variant_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE kanjidic2.kanji_variant_id_seq OWNER TO postgres;

--
-- TOC entry 4208 (class 0 OID 0)
-- Dependencies: 430
-- Name: kanji_variant_id_seq; Type: SEQUENCE OWNED BY; Schema: kanjidic2; Owner: postgres
--

ALTER SEQUENCE kanji_variant_id_seq OWNED BY kanji_variant.id;


--
-- TOC entry 431 (class 1259 OID 510666)
-- Name: mtm_kanji_primitive_id_seq; Type: SEQUENCE; Schema: kanjidic2; Owner: postgres
--

CREATE SEQUENCE mtm_kanji_primitive_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE kanjidic2.mtm_kanji_primitive_id_seq OWNER TO postgres;

--
-- TOC entry 432 (class 1259 OID 510668)
-- Name: mtm_kanji_primitive; Type: TABLE; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

CREATE TABLE mtm_kanji_primitive (
    id integer DEFAULT nextval('mtm_kanji_primitive_id_seq'::regclass) NOT NULL,
    kanji_id integer NOT NULL,
    primitive_id integer NOT NULL
);


ALTER TABLE kanjidic2.mtm_kanji_primitive OWNER TO postgres;

--
-- TOC entry 433 (class 1259 OID 510672)
-- Name: mtm_kanji_reading_id_seq; Type: SEQUENCE; Schema: kanjidic2; Owner: postgres
--

CREATE SEQUENCE mtm_kanji_reading_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE kanjidic2.mtm_kanji_reading_id_seq OWNER TO postgres;

--
-- TOC entry 4209 (class 0 OID 0)
-- Dependencies: 433
-- Name: mtm_kanji_reading_id_seq; Type: SEQUENCE OWNED BY; Schema: kanjidic2; Owner: postgres
--

ALTER SEQUENCE mtm_kanji_reading_id_seq OWNED BY mtm_kanji_reading.id;


--
-- TOC entry 434 (class 1259 OID 510674)
-- Name: query_code; Type: TABLE; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

CREATE TABLE query_code (
    id integer NOT NULL,
    q_code text NOT NULL,
    qc_type text NOT NULL,
    kanji_id integer NOT NULL
);


ALTER TABLE kanjidic2.query_code OWNER TO postgres;

--
-- TOC entry 435 (class 1259 OID 510680)
-- Name: query_code_id_seq; Type: SEQUENCE; Schema: kanjidic2; Owner: postgres
--

CREATE SEQUENCE query_code_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE kanjidic2.query_code_id_seq OWNER TO postgres;

--
-- TOC entry 4210 (class 0 OID 0)
-- Dependencies: 435
-- Name: query_code_id_seq; Type: SEQUENCE OWNED BY; Schema: kanjidic2; Owner: postgres
--

ALTER SEQUENCE query_code_id_seq OWNED BY query_code.id;


SET search_path = public, pg_catalog;

--
-- TOC entry 436 (class 1259 OID 510682)
-- Name: classifier; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE classifier (
    title character varying NOT NULL,
    descr character varying,
    kommentaar character varying,
    status integer DEFAULT 1 NOT NULL,
    order_in_line integer,
    id integer NOT NULL,
    parent_id integer
);


ALTER TABLE public.classifier OWNER TO postgres;

--
-- TOC entry 4211 (class 0 OID 0)
-- Dependencies: 436
-- Name: TABLE classifier; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE classifier IS 'K√µik klassifikaatorid laiendavad seda klassi.';


SET search_path = kanjidic2, pg_catalog;

--
-- TOC entry 437 (class 1259 OID 510689)
-- Name: v_cf_reading_type; Type: VIEW; Schema: kanjidic2; Owner: postgres
--

CREATE VIEW v_cf_reading_type AS
 SELECT a.id AS cf_reading_type_id,
    b.title,
    b.descr,
    b.kommentaar,
    b.status,
    b.order_in_line,
    b.id AS classifer_id,
    b.parent_id
   FROM (cf_reading_type a
     LEFT JOIN public.classifier b ON ((a.classifier_id = b.id)))
  ORDER BY b.order_in_line;


ALTER TABLE kanjidic2.v_cf_reading_type OWNER TO postgres;

--
-- TOC entry 438 (class 1259 OID 510693)
-- Name: v_jinmei; Type: VIEW; Schema: kanjidic2; Owner: postgres
--

CREATE VIEW v_jinmei AS
 SELECT b.id AS kanji_id,
    b.literal,
    a.jinmei_seq,
    b.freq,
    b.grade,
    b.jlpt,
    b.stroke_count
   FROM (jinmei a
     LEFT JOIN kanji b ON ((a.kanji_id = b.id)))
  ORDER BY a.jinmei_seq;


ALTER TABLE kanjidic2.v_jinmei OWNER TO postgres;

--
-- TOC entry 439 (class 1259 OID 510697)
-- Name: v_jouyou; Type: VIEW; Schema: kanjidic2; Owner: postgres
--

CREATE VIEW v_jouyou AS
 SELECT a.grade,
    a.grade_seq,
    b.literal,
    a.kanji_id,
    a.meaning_en,
    a.old_kanji,
    a.radical,
    a.year_added,
    b.freq,
    b.jlpt,
    b.stroke_count
   FROM (jouyou a
     LEFT JOIN kanji b ON ((a.kanji_id = b.id)))
  ORDER BY a.grade, a.grade_seq;


ALTER TABLE kanjidic2.v_jouyou OWNER TO postgres;

--
-- TOC entry 440 (class 1259 OID 510701)
-- Name: v_kanji_data_with_yomi; Type: VIEW; Schema: kanjidic2; Owner: postgres
--

CREATE VIEW v_kanji_data_with_yomi AS
 SELECT a.literal,
    a.grade,
    a.jlpt,
    a.stroke_count,
    b.stroke_image_id,
    ( SELECT array_to_string(ARRAY( SELECT v_kanji_reading.rtxt
                   FROM v_kanji_reading
                  WHERE ((v_kanji_reading.id = a.id) AND (v_kanji_reading.cf_reading_type_id = 234))), ', '::text) AS array_to_string) AS on_yomi,
    ( SELECT array_to_string(ARRAY( SELECT v_kanji_reading.rtxt
                   FROM v_kanji_reading
                  WHERE ((v_kanji_reading.id = a.id) AND (v_kanji_reading.cf_reading_type_id = 235))), ', '::text) AS array_to_string) AS kun_yomi
   FROM (kanji a
     LEFT JOIN mtm_kanji_image b ON ((a.id = b.kanji_id)));


ALTER TABLE kanjidic2.v_kanji_data_with_yomi OWNER TO postgres;

--
-- TOC entry 4212 (class 0 OID 0)
-- Dependencies: 440
-- Name: VIEW v_kanji_data_with_yomi; Type: COMMENT; Schema: kanjidic2; Owner: postgres
--

COMMENT ON VIEW v_kanji_data_with_yomi IS 'aeglane, sest iga kanji puhul tehakse reading tabelile seq scan';


--
-- TOC entry 441 (class 1259 OID 510706)
-- Name: v_kanji_reading_jp; Type: VIEW; Schema: kanjidic2; Owner: postgres
--

CREATE VIEW v_kanji_reading_jp AS
 SELECT a.id,
    a.kanji,
    a.freq,
    a.grade,
    a.jlpt,
    a.stroke_count,
    a.rtxt,
    a.romaji,
    a.cf_reading_type_id,
    b.title AS cf_reading_type,
    a.audio_id
   FROM (v_kanji_reading a
     LEFT JOIN public.classifier b ON ((a.cf_reading_type_id = b.id)))
  WHERE (a.cf_reading_type_id = ANY (ARRAY[234, 235]));


ALTER TABLE kanjidic2.v_kanji_reading_jp OWNER TO postgres;

--
-- TOC entry 442 (class 1259 OID 510710)
-- Name: v_reading_ja_kun; Type: VIEW; Schema: kanjidic2; Owner: postgres
--

CREATE VIEW v_reading_ja_kun AS
 SELECT kanji_reading.audio_id,
    kanji_reading.id,
    kanji_reading.literal,
    kanji_reading.romaji,
    kanji_reading.cf_reading_type_id
   FROM kanji_reading
  WHERE (kanji_reading.cf_reading_type_id = 235);


ALTER TABLE kanjidic2.v_reading_ja_kun OWNER TO postgres;

--
-- TOC entry 443 (class 1259 OID 510714)
-- Name: v_reading_ja_on; Type: VIEW; Schema: kanjidic2; Owner: postgres
--

CREATE VIEW v_reading_ja_on AS
 SELECT kanji_reading.audio_id,
    kanji_reading.id,
    kanji_reading.literal,
    kanji_reading.romaji,
    kanji_reading.cf_reading_type_id
   FROM kanji_reading
  WHERE (kanji_reading.cf_reading_type_id = 234);


ALTER TABLE kanjidic2.v_reading_ja_on OWNER TO postgres;

SET search_path = public, pg_catalog;

--
-- TOC entry 444 (class 1259 OID 510718)
-- Name: audio; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE audio (
    id integer NOT NULL,
    audio_file bytea NOT NULL,
    file_name character varying NOT NULL,
    copyright character varying,
    cf_audio_quality integer NOT NULL
);


ALTER TABLE public.audio OWNER TO postgres;

--
-- TOC entry 4213 (class 0 OID 0)
-- Dependencies: 444
-- Name: TABLE audio; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE audio IS 'Sisaldab h√§√§ldusi eestikeelsetele s√µnadele, eesti- ja jaapanikeelsetele n√§itelausetele. Eestikeelsed audiod on algselt genereeritud robotiga, neid ei saa Google TTS teenusest. JP audiot saab googlest, ideaalis v√µiks JP audio olla JMDict skeemis. Igal audiol on kvaliteedi hinnangu klassifikaator.';


--
-- TOC entry 4214 (class 0 OID 0)
-- Dependencies: 444
-- Name: COLUMN audio.audio_file; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN audio.audio_file IS 'v√µib salvestada ainult aadressi, ja selle j√§rgi failis√ºsteemist fail v√µtta';


--
-- TOC entry 445 (class 1259 OID 510724)
-- Name: audio_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE audio_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.audio_id_seq OWNER TO postgres;

--
-- TOC entry 4215 (class 0 OID 0)
-- Dependencies: 445
-- Name: audio_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE audio_id_seq OWNED BY audio.id;


--
-- TOC entry 446 (class 1259 OID 510734)
-- Name: cf_audio_quality; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cf_audio_quality (
    id integer NOT NULL,
    classifier_id integer DEFAULT (-1) NOT NULL
);


ALTER TABLE public.cf_audio_quality OWNER TO postgres;

--
-- TOC entry 4216 (class 0 OID 0)
-- Dependencies: 446
-- Name: TABLE cf_audio_quality; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE cf_audio_quality IS 'Audio kvaliteedi hinnangu klassifikaator. ';


--
-- TOC entry 447 (class 1259 OID 510738)
-- Name: cf_et_sonaliik; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cf_et_sonaliik (
    classifier_id integer DEFAULT 32 NOT NULL,
    id integer NOT NULL
);


ALTER TABLE public.cf_et_sonaliik OWNER TO postgres;

--
-- TOC entry 448 (class 1259 OID 510742)
-- Name: cf_jp_category; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cf_jp_category (
    classifier_id integer NOT NULL,
    id integer NOT NULL
);


ALTER TABLE public.cf_jp_category OWNER TO postgres;

--
-- TOC entry 449 (class 1259 OID 510745)
-- Name: cf_origin; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cf_origin (
    id integer NOT NULL,
    classifier_id integer DEFAULT (-1) NOT NULL
);


ALTER TABLE public.cf_origin OWNER TO postgres;

--
-- TOC entry 4217 (class 0 OID 0)
-- Dependencies: 449
-- Name: TABLE cf_origin; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE cf_origin IS 'S√µnade p√§ritolu. Kui s√µnastikku uut sisu lisada, siis on hea tagantj√§rgi teada, millisest allikast see p√§rit on. kaudselt v√§ljendab see ka sisu kvaliteeti.';


--
-- TOC entry 450 (class 1259 OID 510749)
-- Name: cf_voca_trans_quality; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cf_voca_trans_quality (
    id integer NOT NULL,
    classifier_id integer DEFAULT (-1) NOT NULL
);


ALTER TABLE public.cf_voca_trans_quality OWNER TO postgres;

--
-- TOC entry 4218 (class 0 OID 0)
-- Dependencies: 450
-- Name: TABLE cf_voca_trans_quality; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE cf_voca_trans_quality IS 'mismoodi on vasted tuletatud';


--
-- TOC entry 451 (class 1259 OID 510753)
-- Name: classifier_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE classifier_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.classifier_id_seq OWNER TO postgres;

--
-- TOC entry 4219 (class 0 OID 0)
-- Dependencies: 451
-- Name: classifier_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE classifier_id_seq OWNED BY classifier.id;


--
-- TOC entry 452 (class 1259 OID 510755)
-- Name: eki_lemma; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE eki_lemma (
    lemma text,
    id integer NOT NULL
);


ALTER TABLE public.eki_lemma OWNER TO postgres;

--
-- TOC entry 453 (class 1259 OID 510761)
-- Name: eki_lemma_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE eki_lemma_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.eki_lemma_id_seq OWNER TO postgres;

--
-- TOC entry 4220 (class 0 OID 0)
-- Dependencies: 453
-- Name: eki_lemma_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE eki_lemma_id_seq OWNED BY eki_lemma.id;


--
-- TOC entry 454 (class 1259 OID 510763)
-- Name: en_sentence; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE en_sentence (
    id integer NOT NULL,
    audio_id integer,
    cf_origin_for_en_sentence integer NOT NULL,
    en text NOT NULL,
    jp_sentence_id integer
);


ALTER TABLE public.en_sentence OWNER TO postgres;

--
-- TOC entry 455 (class 1259 OID 510769)
-- Name: en_sentence_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE en_sentence_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.en_sentence_id_seq OWNER TO postgres;

--
-- TOC entry 4221 (class 0 OID 0)
-- Dependencies: 455
-- Name: en_sentence_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE en_sentence_id_seq OWNED BY en_sentence.id;


--
-- TOC entry 456 (class 1259 OID 510771)
-- Name: phrase_et; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE phrase_et (
    et character varying NOT NULL,
    id integer NOT NULL,
    audio_id integer,
    cf_origin_for_phrase_et integer
);


ALTER TABLE public.phrase_et OWNER TO postgres;

--
-- TOC entry 4222 (class 0 OID 0)
-- Dependencies: 456
-- Name: TABLE phrase_et; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE phrase_et IS 'eesti keele lemmad algvormis';


--
-- TOC entry 457 (class 1259 OID 510777)
-- Name: estonian_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE estonian_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.estonian_id_seq OWNER TO postgres;

--
-- TOC entry 4223 (class 0 OID 0)
-- Dependencies: 457
-- Name: estonian_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE estonian_id_seq OWNED BY phrase_et.id;


--
-- TOC entry 458 (class 1259 OID 510779)
-- Name: et_search_hist; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE et_search_hist (
    id integer NOT NULL,
    s_string character varying NOT NULL,
    searched time without time zone DEFAULT now() NOT NULL,
    result_size integer DEFAULT 0 NOT NULL,
    lang character varying(2) NOT NULL
);


ALTER TABLE public.et_search_hist OWNER TO postgres;

--
-- TOC entry 4224 (class 0 OID 0)
-- Dependencies: 458
-- Name: COLUMN et_search_hist.lang; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN et_search_hist.lang IS 'mis s√µnastikust otsiti. et - jaapani/eesti; jp - eesti/jaapani';


--
-- TOC entry 459 (class 1259 OID 510787)
-- Name: et_search_hist_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE et_search_hist_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.et_search_hist_id_seq OWNER TO postgres;

--
-- TOC entry 4225 (class 0 OID 0)
-- Dependencies: 459
-- Name: et_search_hist_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE et_search_hist_id_seq OWNED BY et_search_hist.id;


--
-- TOC entry 460 (class 1259 OID 510789)
-- Name: et_sentence; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE et_sentence (
    et_sentence text NOT NULL,
    audio_id integer,
    jp_sentence_id integer,
    cf_origin_for_et_sentence integer NOT NULL,
    id integer NOT NULL
);


ALTER TABLE public.et_sentence OWNER TO postgres;

--
-- TOC entry 4226 (class 0 OID 0)
-- Dependencies: 460
-- Name: TABLE et_sentence; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE et_sentence IS 'Eestikeelsed n√§itelaused. Ideaalis peaks olema paaris jaapanikeelse lausega.';


--
-- TOC entry 461 (class 1259 OID 510795)
-- Name: et_sentence_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE et_sentence_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.et_sentence_id_seq OWNER TO postgres;

--
-- TOC entry 4227 (class 0 OID 0)
-- Dependencies: 461
-- Name: et_sentence_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE et_sentence_id_seq OWNED BY et_sentence.id;


--
-- TOC entry 462 (class 1259 OID 510797)
-- Name: hibernate_sequence; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE hibernate_sequence
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.hibernate_sequence OWNER TO postgres;

--
-- TOC entry 463 (class 1259 OID 510799)
-- Name: hiragana; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE hiragana (
    kana character varying(2) NOT NULL,
    romaji character varying(4) NOT NULL,
    stroke_count integer,
    stroke_image_id integer,
    audio_id integer
);


ALTER TABLE public.hiragana OWNER TO postgres;

--
-- TOC entry 464 (class 1259 OID 510802)
-- Name: image_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE image_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.image_id_seq OWNER TO postgres;

--
-- TOC entry 4228 (class 0 OID 0)
-- Dependencies: 464
-- Name: image_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE image_id_seq OWNED BY image.id;


--
-- TOC entry 465 (class 1259 OID 510804)
-- Name: jm_entr_jatik; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE jm_entr_jatik (
    entr integer NOT NULL,
    jatik_id character varying(255) NOT NULL,
    inserted time without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.jm_entr_jatik OWNER TO postgres;

--
-- TOC entry 466 (class 1259 OID 510808)
-- Name: jm_gloss_inf; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE jm_gloss_inf (
    entr integer NOT NULL,
    sens integer NOT NULL,
    gloss integer NOT NULL,
    et_inf text,
    jp_inf text,
    inserted time without time zone DEFAULT now() NOT NULL,
    cf_origin integer NOT NULL
);


ALTER TABLE public.jm_gloss_inf OWNER TO postgres;

--
-- TOC entry 4229 (class 0 OID 0)
-- Dependencies: 466
-- Name: TABLE jm_gloss_inf; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE jm_gloss_inf IS 'eesti ja jaapanikeelsed kommentaarid JMDict gloss tabeli ridadele.';


--
-- TOC entry 467 (class 1259 OID 510815)
-- Name: jp_search_hist; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE jp_search_hist (
    id integer NOT NULL,
    s_string character varying NOT NULL,
    searched time without time zone DEFAULT now() NOT NULL,
    result_size integer DEFAULT 0 NOT NULL,
    lang character varying(2) NOT NULL
);


ALTER TABLE public.jp_search_hist OWNER TO postgres;

--
-- TOC entry 4230 (class 0 OID 0)
-- Dependencies: 467
-- Name: COLUMN jp_search_hist.lang; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN jp_search_hist.lang IS 'mis s√µnastikust otsiti. et - jaapani/eesti; jp - eesti/jaapani';


--
-- TOC entry 468 (class 1259 OID 510823)
-- Name: jp_search_hist_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE jp_search_hist_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.jp_search_hist_id_seq OWNER TO postgres;

--
-- TOC entry 4231 (class 0 OID 0)
-- Dependencies: 468
-- Name: jp_search_hist_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE jp_search_hist_id_seq OWNED BY jp_search_hist.id;


--
-- TOC entry 469 (class 1259 OID 510825)
-- Name: jp_sentence; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE jp_sentence (
    jp text,
    audio_id integer,
    as_kana text,
    as_romaji text,
    cf_origin_for_jp_sentence integer NOT NULL,
    id integer NOT NULL,
    with_furigana text
);


ALTER TABLE public.jp_sentence OWNER TO postgres;

--
-- TOC entry 470 (class 1259 OID 510831)
-- Name: jp_sentence_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE jp_sentence_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.jp_sentence_id_seq OWNER TO postgres;

--
-- TOC entry 4232 (class 0 OID 0)
-- Dependencies: 470
-- Name: jp_sentence_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE jp_sentence_id_seq OWNED BY jp_sentence.id;


--
-- TOC entry 471 (class 1259 OID 510833)
-- Name: mtm_jm_sens_jp_sentence; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE mtm_jm_sens_jp_sentence (
    id integer NOT NULL,
    sens integer NOT NULL,
    jp_sentence_id integer NOT NULL,
    rdng character varying(255) NOT NULL,
    kanj character varying(255) NOT NULL
);


ALTER TABLE public.mtm_jm_sens_jp_sentence OWNER TO postgres;

--
-- TOC entry 472 (class 1259 OID 510839)
-- Name: mtm_jm_sens_jp_sentence_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE mtm_jm_sens_jp_sentence_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.mtm_jm_sens_jp_sentence_id_seq OWNER TO postgres;

--
-- TOC entry 4233 (class 0 OID 0)
-- Dependencies: 472
-- Name: mtm_jm_sens_jp_sentence_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE mtm_jm_sens_jp_sentence_id_seq OWNED BY mtm_jm_sens_jp_sentence.id;


--
-- TOC entry 473 (class 1259 OID 510841)
-- Name: mtm_voca_jp_et_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE mtm_voca_jp_et_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.mtm_voca_jp_et_id_seq OWNER TO postgres;

--
-- TOC entry 474 (class 1259 OID 510843)
-- Name: v_cf_audio_quality; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW v_cf_audio_quality AS
 SELECT a.id AS cf_audio_quality_id,
    b.title,
    b.descr,
    b.kommentaar,
    b.status,
    b.order_in_line,
    b.id AS classifer_id,
    b.parent_id
   FROM (cf_audio_quality a
     LEFT JOIN classifier b ON ((a.classifier_id = b.id)))
  ORDER BY b.order_in_line;


ALTER TABLE public.v_cf_audio_quality OWNER TO postgres;

--
-- TOC entry 475 (class 1259 OID 510847)
-- Name: v_cf_origin; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW v_cf_origin AS
 SELECT a.id AS cf_origin_id,
    b.title,
    b.descr,
    b.kommentaar,
    b.status,
    b.order_in_line,
    b.id AS classifer_id,
    b.parent_id
   FROM (cf_origin a
     LEFT JOIN classifier b ON ((a.classifier_id = b.id)));


ALTER TABLE public.v_cf_origin OWNER TO postgres;

--
-- TOC entry 476 (class 1259 OID 510851)
-- Name: v_count_gloss_to_sum_freq; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW v_count_gloss_to_sum_freq AS
 SELECT a.count_gloss,
    a.sum_freq,
    (((a.sum_freq)::numeric / (b.sum)::numeric) * (100)::numeric) AS freq_ratio
   FROM (( SELECT f_count_gloss_by_kanj((jp_nres_base_aggr.jp)::character varying) AS count_gloss,
            sum(jp_nres_base_aggr.freq) AS sum_freq
           FROM freq.jp_nres_base_aggr
          GROUP BY f_count_gloss_by_kanj((jp_nres_base_aggr.jp)::character varying)) a
     CROSS JOIN ( SELECT sum(jp_nres_base_aggr.freq) AS sum
           FROM freq.jp_nres_base_aggr) b)
  ORDER BY a.sum_freq DESC;


ALTER TABLE public.v_count_gloss_to_sum_freq OWNER TO postgres;

--
-- TOC entry 477 (class 1259 OID 510855)
-- Name: v_et_sentence_jp; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW v_et_sentence_jp AS
 SELECT et.et_sentence,
    jp.jp AS jp_sentence,
    jp.as_kana AS jp_sentence_kana,
    jp.as_romaji AS jp_sentence_romaji,
    et.id AS et_sentence_id,
    et.jp_sentence_id,
    et.cf_origin_for_et_sentence AS cf_voca_et_origin,
    et.audio_id AS et_audio_id,
    jp.cf_origin_for_jp_sentence AS cf_voca_jp_origin,
    jp.audio_id AS jp_audio_id
   FROM (et_sentence et
     LEFT JOIN jp_sentence jp ON ((et.jp_sentence_id = jp.id)));


ALTER TABLE public.v_et_sentence_jp OWNER TO postgres;

--
-- TOC entry 487 (class 1259 OID 655243)
-- Name: v_jmdict_en_kanj_freq; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW v_jmdict_en_kanj_freq AS
 SELECT a.txt AS kanj,
    a.entr,
    b.freq
   FROM (jmdict_en.kanj a
     LEFT JOIN freq.jp_nres_base_aggr b ON (((a.txt)::text = b.jp)))
  WHERE (b.id IS NOT NULL);


ALTER TABLE public.v_jmdict_en_kanj_freq OWNER TO postgres;

--
-- TOC entry 478 (class 1259 OID 510859)
-- Name: v_jmdict_kanj_freq; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW v_jmdict_kanj_freq AS
 SELECT a.txt AS kanj,
    a.entr,
    b.freq
   FROM (jmdict.kanj a
     LEFT JOIN freq.jp_nres_base_aggr b ON (((a.txt)::text = b.jp)))
  WHERE (b.id IS NOT NULL);


ALTER TABLE public.v_jmdict_kanj_freq OWNER TO postgres;

--
-- TOC entry 479 (class 1259 OID 510863)
-- Name: v_stats; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW v_stats AS
 SELECT ( SELECT count(*) AS count
           FROM jmdict.entr) AS count_jp_entry,
    ( SELECT count(DISTINCT gloss.entr) AS count
           FROM jmdict.gloss) AS count_translated_entries,
    ( SELECT count(*) AS count
           FROM jmdict.gloss) AS count_et_translations,
    ( SELECT count(*) AS count
           FROM jp_sentence) AS count_sentence_pairs,
    ( SELECT count(*) AS count
           FROM estwn.example) AS count_estwn_examples,
    ( SELECT count(*) AS count
           FROM jm_gloss_inf
          WHERE (jm_gloss_inf.cf_origin = 16)) AS count_origin_jatik,
    ( SELECT count(*) AS count
           FROM jm_gloss_inf
          WHERE (jm_gloss_inf.cf_origin = 18)) AS count_origin_ilo,
    ( SELECT count(*) AS count
           FROM jm_gloss_inf
          WHERE (jm_gloss_inf.cf_origin = 229)) AS count_origin_egd,
    ( SELECT count(*) AS count
           FROM jp_search_hist) AS count_jp_search_words,
    ( SELECT count(*) AS count
           FROM jp_search_hist
          WHERE (jp_search_hist.result_size > 0)) AS count_jp_search_with_results,
    ( SELECT count(*) AS count
           FROM et_search_hist) AS count_et_search_words,
    ( SELECT count(*) AS count
           FROM et_search_hist
          WHERE (et_search_hist.result_size > 0)) AS count_et_search_with_results,
    ( SELECT count(*) AS count
           FROM kanjidic2.kanji) AS count_kanji_in_db,
    ( SELECT count(*) AS count
           FROM heisig.heisig6) AS count_kanjis_described_with_heisig,
    ( SELECT count(DISTINCT mtm_kanji_image.kanji_id) AS count
           FROM kanjidic2.mtm_kanji_image) AS count_stroke_diagrams;


ALTER TABLE public.v_stats OWNER TO postgres;

--
-- TOC entry 480 (class 1259 OID 510868)
-- Name: v_translated_entr_ratio; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW v_translated_entr_ratio AS
 SELECT b.count_gloss,
    b.sum_count,
    (((b.sum_count)::numeric / (c.sum)::numeric) * (100)::numeric) AS sum_ratio
   FROM (( SELECT a.count_gloss,
            count(a.count_gloss) AS sum_count
           FROM ( SELECT count(gloss.entr) AS count_gloss
                   FROM jmdict.gloss
                  GROUP BY gloss.entr) a
          GROUP BY a.count_gloss) b
     CROSS JOIN ( SELECT count(DISTINCT gloss.entr) AS sum
           FROM jmdict.gloss) c)
  ORDER BY b.count_gloss;


ALTER TABLE public.v_translated_entr_ratio OWNER TO postgres;

--
-- TOC entry 481 (class 1259 OID 510872)
-- Name: vs_database_diagrams; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE vs_database_diagrams (
    name character varying(80),
    diadata text,
    comment character varying(1022),
    preview text,
    lockinfo character varying(80),
    locktime timestamp with time zone,
    version character varying(80)
);


ALTER TABLE public.vs_database_diagrams OWNER TO postgres;

SET search_path = test, pg_catalog;

--
-- TOC entry 482 (class 1259 OID 510878)
-- Name: article; Type: TABLE; Schema: test; Owner: postgres; Tablespace: 
--

CREATE TABLE article (
    copyright text,
    id integer NOT NULL,
    title text NOT NULL,
    author text,
    transcript_lang character varying(2),
    created_by character varying(50) DEFAULT 'system'::character varying,
    last_modified_date timestamp with time zone,
    last_modified_by character varying(50),
    created_date timestamp with time zone DEFAULT now() NOT NULL,
    shared boolean DEFAULT false NOT NULL
);


ALTER TABLE test.article OWNER TO postgres;

--
-- TOC entry 483 (class 1259 OID 510887)
-- Name: article_id_seq; Type: SEQUENCE; Schema: test; Owner: postgres
--

CREATE SEQUENCE article_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE test.article_id_seq OWNER TO postgres;

--
-- TOC entry 4234 (class 0 OID 0)
-- Dependencies: 483
-- Name: article_id_seq; Type: SEQUENCE OWNED BY; Schema: test; Owner: postgres
--

ALTER SEQUENCE article_id_seq OWNED BY article.id;


--
-- TOC entry 484 (class 1259 OID 510889)
-- Name: article_paragraph; Type: TABLE; Schema: test; Owner: postgres; Tablespace: 
--

CREATE TABLE article_paragraph (
    id integer NOT NULL,
    article_id integer NOT NULL,
    txt text NOT NULL,
    transcript text NOT NULL,
    "order" integer NOT NULL,
    audio_id integer
);


ALTER TABLE test.article_paragraph OWNER TO postgres;

--
-- TOC entry 485 (class 1259 OID 510895)
-- Name: article_paragraph_id_seq; Type: SEQUENCE; Schema: test; Owner: postgres
--

CREATE SEQUENCE article_paragraph_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE test.article_paragraph_id_seq OWNER TO postgres;

--
-- TOC entry 4235 (class 0 OID 0)
-- Dependencies: 485
-- Name: article_paragraph_id_seq; Type: SEQUENCE OWNED BY; Schema: test; Owner: postgres
--

ALTER SEQUENCE article_paragraph_id_seq OWNED BY article_paragraph.id;


SET search_path = core, pg_catalog;

--
-- TOC entry 3118 (class 2604 OID 510898)
-- Name: id; Type: DEFAULT; Schema: core; Owner: postgres
--

ALTER TABLE ONLY core_10k_kanji ALTER COLUMN id SET DEFAULT nextval('core_10k_kanji_id_seq'::regclass);


--
-- TOC entry 3120 (class 2604 OID 510899)
-- Name: id; Type: DEFAULT; Schema: core; Owner: postgres
--

ALTER TABLE ONLY core_6k_kanji ALTER COLUMN id SET DEFAULT nextval('core_6k_kanji_id_seq'::regclass);


--
-- TOC entry 3121 (class 2604 OID 510900)
-- Name: id; Type: DEFAULT; Schema: core; Owner: postgres
--

ALTER TABLE ONLY ilo ALTER COLUMN id SET DEFAULT nextval('ilo_id_seq'::regclass);


--
-- TOC entry 3122 (class 2604 OID 510901)
-- Name: id; Type: DEFAULT; Schema: core; Owner: postgres
--

ALTER TABLE ONLY ilo_kanji ALTER COLUMN id SET DEFAULT nextval('ilo_kanji_id_seq'::regclass);


--
-- TOC entry 3123 (class 2604 OID 510902)
-- Name: id; Type: DEFAULT; Schema: core; Owner: postgres
--

ALTER TABLE ONLY mtm_core_10k_kanji ALTER COLUMN id SET DEFAULT nextval('mtm_core_10k_kanji_id_seq'::regclass);


--
-- TOC entry 3124 (class 2604 OID 510903)
-- Name: id; Type: DEFAULT; Schema: core; Owner: postgres
--

ALTER TABLE ONLY mtm_core_6k_kanji ALTER COLUMN id SET DEFAULT nextval('mtm_core_6k_kanji_id_seq'::regclass);


--
-- TOC entry 3125 (class 2604 OID 510904)
-- Name: id; Type: DEFAULT; Schema: core; Owner: postgres
--

ALTER TABLE ONLY mtm_ilo_kanji ALTER COLUMN id SET DEFAULT nextval('mtm_ilo_kanji_id_seq'::regclass);


SET search_path = estwn, pg_catalog;

--
-- TOC entry 3128 (class 2604 OID 510905)
-- Name: id; Type: DEFAULT; Schema: estwn; Owner: postgres
--

ALTER TABLE ONLY word_meaning ALTER COLUMN id SET DEFAULT nextval('word_meaning_id_seq'::regclass);


SET search_path = freq, pg_catalog;

--
-- TOC entry 3129 (class 2604 OID 510906)
-- Name: id; Type: DEFAULT; Schema: freq; Owner: postgres
--

ALTER TABLE ONLY jp_nres_base_aggr ALTER COLUMN id SET DEFAULT nextval('jp_freq_id_seq'::regclass);


--
-- TOC entry 3130 (class 2604 OID 510907)
-- Name: id; Type: DEFAULT; Schema: freq; Owner: postgres
--

ALTER TABLE ONLY mtm_nres_kanji ALTER COLUMN id SET DEFAULT nextval('mtm_nres_kanji_id_seq'::regclass);


--
-- TOC entry 3131 (class 2604 OID 510908)
-- Name: id; Type: DEFAULT; Schema: freq; Owner: postgres
--

ALTER TABLE ONLY nres_kanji ALTER COLUMN id SET DEFAULT nextval('nres_kanji_id_seq'::regclass);


--
-- TOC entry 3236 (class 2604 OID 655420)
-- Name: id; Type: DEFAULT; Schema: freq; Owner: postgres
--

ALTER TABLE ONLY tofu_sentence ALTER COLUMN id SET DEFAULT nextval('tofu_sentence_id_seq'::regclass);


--
-- TOC entry 3237 (class 2604 OID 663824)
-- Name: id; Type: DEFAULT; Schema: freq; Owner: postgres
--

ALTER TABLE ONLY tofu_sentence_translation ALTER COLUMN id SET DEFAULT nextval('tofu_sentence_translation_id_seq'::regclass);


SET search_path = heisig, pg_catalog;

--
-- TOC entry 3133 (class 2604 OID 510909)
-- Name: id; Type: DEFAULT; Schema: heisig; Owner: postgres
--

ALTER TABLE ONLY koohii_story ALTER COLUMN id SET DEFAULT nextval('koohii_story_id_seq'::regclass);


SET search_path = jmdict, pg_catalog;

--
-- TOC entry 3110 (class 2604 OID 510910)
-- Name: id; Type: DEFAULT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY entr ALTER COLUMN id SET DEFAULT nextval('entr_id_seq'::regclass);


--
-- TOC entry 3149 (class 2604 OID 510911)
-- Name: id; Type: DEFAULT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY freq ALTER COLUMN id SET DEFAULT nextval('freq_id_seq'::regclass);


--
-- TOC entry 3153 (class 2604 OID 510912)
-- Name: id; Type: DEFAULT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY kwgrp ALTER COLUMN id SET DEFAULT nextval('kwgrp_id_seq'::regclass);


--
-- TOC entry 3160 (class 2604 OID 510913)
-- Name: id; Type: DEFAULT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY snd ALTER COLUMN id SET DEFAULT nextval('snd_id_seq'::regclass);


--
-- TOC entry 3161 (class 2604 OID 510914)
-- Name: id; Type: DEFAULT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY sndfile ALTER COLUMN id SET DEFAULT nextval('sndfile_id_seq'::regclass);


--
-- TOC entry 3162 (class 2604 OID 510915)
-- Name: id; Type: DEFAULT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY sndvol ALTER COLUMN id SET DEFAULT nextval('sndvol_id_seq'::regclass);


SET search_path = jmdict_en, pg_catalog;

--
-- TOC entry 3112 (class 2604 OID 510916)
-- Name: id; Type: DEFAULT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY entr ALTER COLUMN id SET DEFAULT nextval('entr_id_seq'::regclass);


--
-- TOC entry 3183 (class 2604 OID 510917)
-- Name: id; Type: DEFAULT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY freq ALTER COLUMN id SET DEFAULT nextval('freq_id_seq'::regclass);


--
-- TOC entry 3187 (class 2604 OID 510918)
-- Name: id; Type: DEFAULT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY kwgrp ALTER COLUMN id SET DEFAULT nextval('kwgrp_id_seq'::regclass);


--
-- TOC entry 3194 (class 2604 OID 510919)
-- Name: id; Type: DEFAULT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY snd ALTER COLUMN id SET DEFAULT nextval('snd_id_seq'::regclass);


--
-- TOC entry 3195 (class 2604 OID 510920)
-- Name: id; Type: DEFAULT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY sndfile ALTER COLUMN id SET DEFAULT nextval('sndfile_id_seq'::regclass);


--
-- TOC entry 3196 (class 2604 OID 510921)
-- Name: id; Type: DEFAULT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY sndvol ALTER COLUMN id SET DEFAULT nextval('sndvol_id_seq'::regclass);


SET search_path = kanjidic2, pg_catalog;

--
-- TOC entry 3202 (class 2604 OID 510922)
-- Name: id; Type: DEFAULT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY codepoint ALTER COLUMN id SET DEFAULT nextval('codepoint_id_seq'::regclass);


--
-- TOC entry 3203 (class 2604 OID 510923)
-- Name: id; Type: DEFAULT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY dic_number ALTER COLUMN id SET DEFAULT nextval('dic_number_id_seq'::regclass);


--
-- TOC entry 3134 (class 2604 OID 510924)
-- Name: id; Type: DEFAULT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY kanji ALTER COLUMN id SET DEFAULT nextval('kanji_id_seq'::regclass);


--
-- TOC entry 3204 (class 2604 OID 510925)
-- Name: id; Type: DEFAULT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY kanji_meaning ALTER COLUMN id SET DEFAULT nextval('kanji_meaning_id_seq'::regclass);


--
-- TOC entry 3205 (class 2604 OID 510926)
-- Name: id; Type: DEFAULT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY kanji_primitive ALTER COLUMN id SET DEFAULT nextval('kanji_primitive_id_seq'::regclass);


--
-- TOC entry 3206 (class 2604 OID 510927)
-- Name: id; Type: DEFAULT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY kanji_radical ALTER COLUMN id SET DEFAULT nextval('kanji_radical_id_seq'::regclass);


--
-- TOC entry 3135 (class 2604 OID 510928)
-- Name: id; Type: DEFAULT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY kanji_reading ALTER COLUMN id SET DEFAULT nextval('kanji_reading_id_seq'::regclass);


--
-- TOC entry 3207 (class 2604 OID 510929)
-- Name: id; Type: DEFAULT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY kanji_variant ALTER COLUMN id SET DEFAULT nextval('kanji_variant_id_seq'::regclass);


--
-- TOC entry 3137 (class 2604 OID 510930)
-- Name: id; Type: DEFAULT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY mtm_kanji_reading ALTER COLUMN id SET DEFAULT nextval('mtm_kanji_reading_id_seq'::regclass);


--
-- TOC entry 3209 (class 2604 OID 510931)
-- Name: id; Type: DEFAULT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY query_code ALTER COLUMN id SET DEFAULT nextval('query_code_id_seq'::regclass);


SET search_path = public, pg_catalog;

--
-- TOC entry 3212 (class 2604 OID 510932)
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY audio ALTER COLUMN id SET DEFAULT nextval('audio_id_seq'::regclass);


--
-- TOC entry 3211 (class 2604 OID 510934)
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY classifier ALTER COLUMN id SET DEFAULT nextval('classifier_id_seq'::regclass);


--
-- TOC entry 3217 (class 2604 OID 510935)
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY eki_lemma ALTER COLUMN id SET DEFAULT nextval('eki_lemma_id_seq'::regclass);


--
-- TOC entry 3218 (class 2604 OID 510936)
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY en_sentence ALTER COLUMN id SET DEFAULT nextval('en_sentence_id_seq'::regclass);


--
-- TOC entry 3222 (class 2604 OID 510937)
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY et_search_hist ALTER COLUMN id SET DEFAULT nextval('et_search_hist_id_seq'::regclass);


--
-- TOC entry 3223 (class 2604 OID 510938)
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY et_sentence ALTER COLUMN id SET DEFAULT nextval('et_sentence_id_seq'::regclass);


--
-- TOC entry 3138 (class 2604 OID 510939)
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY image ALTER COLUMN id SET DEFAULT nextval('image_id_seq'::regclass);


--
-- TOC entry 3228 (class 2604 OID 510940)
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY jp_search_hist ALTER COLUMN id SET DEFAULT nextval('jp_search_hist_id_seq'::regclass);


--
-- TOC entry 3229 (class 2604 OID 510941)
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY jp_sentence ALTER COLUMN id SET DEFAULT nextval('jp_sentence_id_seq'::regclass);


--
-- TOC entry 3230 (class 2604 OID 510942)
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY mtm_jm_sens_jp_sentence ALTER COLUMN id SET DEFAULT nextval('mtm_jm_sens_jp_sentence_id_seq'::regclass);


--
-- TOC entry 3219 (class 2604 OID 510943)
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phrase_et ALTER COLUMN id SET DEFAULT nextval('estonian_id_seq'::regclass);


SET search_path = test, pg_catalog;

--
-- TOC entry 3234 (class 2604 OID 510944)
-- Name: id; Type: DEFAULT; Schema: test; Owner: postgres
--

ALTER TABLE ONLY article ALTER COLUMN id SET DEFAULT nextval('article_id_seq'::regclass);


--
-- TOC entry 3235 (class 2604 OID 510945)
-- Name: id; Type: DEFAULT; Schema: test; Owner: postgres
--

ALTER TABLE ONLY article_paragraph ALTER COLUMN id SET DEFAULT nextval('article_paragraph_id_seq'::regclass);


SET search_path = ac, pg_catalog;

--
-- TOC entry 3253 (class 2606 OID 653741)
-- Name: authority_pkey; Type: CONSTRAINT; Schema: ac; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY authority
    ADD CONSTRAINT authority_pkey PRIMARY KEY (name);


--
-- TOC entry 3259 (class 2606 OID 653743)
-- Name: persistent_audit_event_data_pkey; Type: CONSTRAINT; Schema: ac; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY persistent_audit_event_data
    ADD CONSTRAINT persistent_audit_event_data_pkey PRIMARY KEY (event_id, name);


--
-- TOC entry 3256 (class 2606 OID 653745)
-- Name: persistent_audit_event_pkey; Type: CONSTRAINT; Schema: ac; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY persistent_audit_event
    ADD CONSTRAINT persistent_audit_event_pkey PRIMARY KEY (event_id);


--
-- TOC entry 3261 (class 2606 OID 653749)
-- Name: t_user_email_key; Type: CONSTRAINT; Schema: ac; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY "user"
    ADD CONSTRAINT t_user_email_key UNIQUE (email);


--
-- TOC entry 3266 (class 2606 OID 653751)
-- Name: user_authority_pkey; Type: CONSTRAINT; Schema: ac; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY user_authority
    ADD CONSTRAINT user_authority_pkey PRIMARY KEY (login, name);


--
-- TOC entry 3263 (class 2606 OID 653753)
-- Name: user_pkey; Type: CONSTRAINT; Schema: ac; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY "user"
    ADD CONSTRAINT user_pkey PRIMARY KEY (login);


SET search_path = core, pg_catalog;

--
-- TOC entry 3272 (class 2606 OID 653757)
-- Name: core6k_pkey; Type: CONSTRAINT; Schema: core; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY core_6k
    ADD CONSTRAINT core6k_pkey PRIMARY KEY (id);


--
-- TOC entry 3268 (class 2606 OID 653759)
-- Name: core_10k_kanji_pkey; Type: CONSTRAINT; Schema: core; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY core_10k_kanji
    ADD CONSTRAINT core_10k_kanji_pkey PRIMARY KEY (id);


--
-- TOC entry 3239 (class 2606 OID 653761)
-- Name: core_10k_raw_pkey; Type: CONSTRAINT; Schema: core; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY core_10k
    ADD CONSTRAINT core_10k_raw_pkey PRIMARY KEY (id);


--
-- TOC entry 3274 (class 2606 OID 653763)
-- Name: core_6k_kanji_pkey; Type: CONSTRAINT; Schema: core; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY core_6k_kanji
    ADD CONSTRAINT core_6k_kanji_pkey PRIMARY KEY (id);


--
-- TOC entry 3280 (class 2606 OID 653765)
-- Name: ilo_kanji_pkey; Type: CONSTRAINT; Schema: core; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY ilo_kanji
    ADD CONSTRAINT ilo_kanji_pkey PRIMARY KEY (id);


--
-- TOC entry 3278 (class 2606 OID 653767)
-- Name: ilo_pkey; Type: CONSTRAINT; Schema: core; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY ilo
    ADD CONSTRAINT ilo_pkey PRIMARY KEY (id);


--
-- TOC entry 3284 (class 2606 OID 653769)
-- Name: mtm_core_10k_kanji_pkey; Type: CONSTRAINT; Schema: core; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mtm_core_10k_kanji
    ADD CONSTRAINT mtm_core_10k_kanji_pkey PRIMARY KEY (id);


--
-- TOC entry 3286 (class 2606 OID 653771)
-- Name: mtm_core_6k_kanji_pkey; Type: CONSTRAINT; Schema: core; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mtm_core_6k_kanji
    ADD CONSTRAINT mtm_core_6k_kanji_pkey PRIMARY KEY (id);


--
-- TOC entry 3288 (class 2606 OID 653773)
-- Name: mtm_ilo_kanji_pkey; Type: CONSTRAINT; Schema: core; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mtm_ilo_kanji
    ADD CONSTRAINT mtm_ilo_kanji_pkey PRIMARY KEY (id);


--
-- TOC entry 3270 (class 2606 OID 653775)
-- Name: uq_core_10k_kanji; Type: CONSTRAINT; Schema: core; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY core_10k_kanji
    ADD CONSTRAINT uq_core_10k_kanji UNIQUE (kanji);


--
-- TOC entry 3276 (class 2606 OID 653777)
-- Name: uq_core_6k_kanji; Type: CONSTRAINT; Schema: core; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY core_6k_kanji
    ADD CONSTRAINT uq_core_6k_kanji UNIQUE (kanji);


--
-- TOC entry 3282 (class 2606 OID 653779)
-- Name: uq_ilo_kanji; Type: CONSTRAINT; Schema: core; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY ilo_kanji
    ADD CONSTRAINT uq_ilo_kanji UNIQUE (kanji);


SET search_path = estwn, pg_catalog;

--
-- TOC entry 3290 (class 2606 OID 653781)
-- Name: example_pkey; Type: CONSTRAINT; Schema: estwn; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY example
    ADD CONSTRAINT example_pkey PRIMARY KEY (id);


--
-- TOC entry 3292 (class 2606 OID 653783)
-- Name: variant_pkey; Type: CONSTRAINT; Schema: estwn; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY variant
    ADD CONSTRAINT variant_pkey PRIMARY KEY (id);


--
-- TOC entry 3294 (class 2606 OID 653785)
-- Name: word_meaning_pkey; Type: CONSTRAINT; Schema: estwn; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY word_meaning
    ADD CONSTRAINT word_meaning_pkey PRIMARY KEY (id);


SET search_path = freq, pg_catalog;

--
-- TOC entry 3296 (class 2606 OID 653787)
-- Name: jp_freq_pkey; Type: CONSTRAINT; Schema: freq; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY jp_nres_base_aggr
    ADD CONSTRAINT jp_freq_pkey PRIMARY KEY (id);


--
-- TOC entry 3300 (class 2606 OID 653789)
-- Name: mtm_nres_kanji_pkey; Type: CONSTRAINT; Schema: freq; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mtm_nres_kanji
    ADD CONSTRAINT mtm_nres_kanji_pkey PRIMARY KEY (id);


--
-- TOC entry 3302 (class 2606 OID 653791)
-- Name: nres_kanji_pkey; Type: CONSTRAINT; Schema: freq; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nres_kanji
    ADD CONSTRAINT nres_kanji_pkey PRIMARY KEY (id);


--
-- TOC entry 3762 (class 2606 OID 663834)
-- Name: tofu_sentence_translation_pkey; Type: CONSTRAINT; Schema: freq; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tofu_sentence_translation
    ADD CONSTRAINT tofu_sentence_translation_pkey PRIMARY KEY (id);


--
-- TOC entry 3758 (class 2606 OID 655418)
-- Name: tofugu_sentences_pkey; Type: CONSTRAINT; Schema: freq; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tofu_sentence
    ADD CONSTRAINT tofugu_sentences_pkey PRIMARY KEY (id);


--
-- TOC entry 3298 (class 2606 OID 653793)
-- Name: uq_jp_nres_base_aggr_jp; Type: CONSTRAINT; Schema: freq; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY jp_nres_base_aggr
    ADD CONSTRAINT uq_jp_nres_base_aggr_jp UNIQUE (jp);


--
-- TOC entry 3304 (class 2606 OID 653795)
-- Name: uq_nres_kanji; Type: CONSTRAINT; Schema: freq; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nres_kanji
    ADD CONSTRAINT uq_nres_kanji UNIQUE (kanji);


--
-- TOC entry 3760 (class 2606 OID 655465)
-- Name: uq_tofu_sentence_sentence; Type: CONSTRAINT; Schema: freq; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tofu_sentence
    ADD CONSTRAINT uq_tofu_sentence_sentence UNIQUE (sentence);


--
-- TOC entry 3764 (class 2606 OID 655491)
-- Name: uq_user_has_1_tofu_translation; Type: CONSTRAINT; Schema: freq; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tofu_sentence_translation
    ADD CONSTRAINT uq_user_has_1_tofu_translation UNIQUE (created_by, tofu_sentence_id);


--
-- TOC entry 4236 (class 0 OID 0)
-- Dependencies: 3764
-- Name: CONSTRAINT uq_user_has_1_tofu_translation ON tofu_sentence_translation; Type: COMMENT; Schema: freq; Owner: postgres
--

COMMENT ON CONSTRAINT uq_user_has_1_tofu_translation ON tofu_sentence_translation IS 'ei luba √ºhel kasutajal rohkem kui √ºhte t√µlget teha.';


SET search_path = heisig, pg_catalog;

--
-- TOC entry 3306 (class 2606 OID 653797)
-- Name: heisig4_kanji_key; Type: CONSTRAINT; Schema: heisig; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY heisig4
    ADD CONSTRAINT heisig4_kanji_key UNIQUE (kanji);


--
-- TOC entry 3308 (class 2606 OID 653799)
-- Name: heisig4_pkey; Type: CONSTRAINT; Schema: heisig; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY heisig4
    ADD CONSTRAINT heisig4_pkey PRIMARY KEY (id);


--
-- TOC entry 3312 (class 2606 OID 653801)
-- Name: heisig6_pkey; Type: CONSTRAINT; Schema: heisig; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY heisig6
    ADD CONSTRAINT heisig6_pkey PRIMARY KEY (id);


--
-- TOC entry 3317 (class 2606 OID 653803)
-- Name: heisig_core_kw_pkey; Type: CONSTRAINT; Schema: heisig; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY heisig_core_kw
    ADD CONSTRAINT heisig_core_kw_pkey PRIMARY KEY (id);


--
-- TOC entry 3319 (class 2606 OID 653805)
-- Name: heisig_katakana_pkey; Type: CONSTRAINT; Schema: heisig; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY heisig_katakana
    ADD CONSTRAINT heisig_katakana_pkey PRIMARY KEY (kana);


--
-- TOC entry 3321 (class 2606 OID 653807)
-- Name: heisig_katakana_voca_pkey; Type: CONSTRAINT; Schema: heisig; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY heisig_katakana_voca
    ADD CONSTRAINT heisig_katakana_voca_pkey PRIMARY KEY (id);


--
-- TOC entry 3331 (class 2606 OID 653809)
-- Name: koohii_story_pkey; Type: CONSTRAINT; Schema: heisig; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY koohii_story
    ADD CONSTRAINT koohii_story_pkey PRIMARY KEY (id);


--
-- TOC entry 3315 (class 2606 OID 653811)
-- Name: tc_heisig6_kanji; Type: CONSTRAINT; Schema: heisig; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY heisig6
    ADD CONSTRAINT tc_heisig6_kanji UNIQUE (kanji);


--
-- TOC entry 3310 (class 2606 OID 653813)
-- Name: uq_heisig4_keyrord_en; Type: CONSTRAINT; Schema: heisig; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY heisig4
    ADD CONSTRAINT uq_heisig4_keyrord_en UNIQUE (keyword_en);


--
-- TOC entry 3323 (class 2606 OID 653815)
-- Name: uq_hkv_word_english; Type: CONSTRAINT; Schema: heisig; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY heisig_katakana_voca
    ADD CONSTRAINT uq_hkv_word_english UNIQUE (word_romaji);


--
-- TOC entry 3325 (class 2606 OID 653817)
-- Name: uq_hkv_word_et; Type: CONSTRAINT; Schema: heisig; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY heisig_katakana_voca
    ADD CONSTRAINT uq_hkv_word_et UNIQUE (word_et);


--
-- TOC entry 3327 (class 2606 OID 653819)
-- Name: uq_hkv_word_kana; Type: CONSTRAINT; Schema: heisig; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY heisig_katakana_voca
    ADD CONSTRAINT uq_hkv_word_kana UNIQUE (word_kana);


--
-- TOC entry 3329 (class 2606 OID 653821)
-- Name: uq_hkv_word_roumaji; Type: CONSTRAINT; Schema: heisig; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY heisig_katakana_voca
    ADD CONSTRAINT uq_hkv_word_roumaji UNIQUE (word_en);


--
-- TOC entry 3333 (class 2606 OID 653823)
-- Name: uq_koohii_story_story; Type: CONSTRAINT; Schema: heisig; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY koohii_story
    ADD CONSTRAINT uq_koohii_story_story UNIQUE (story);


SET search_path = jmdict, pg_catalog;

--
-- TOC entry 3360 (class 2606 OID 653825)
-- Name: chr_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY chr
    ADD CONSTRAINT chr_pkey PRIMARY KEY (entr);


--
-- TOC entry 3363 (class 2606 OID 653827)
-- Name: cinf_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cinf
    ADD CONSTRAINT cinf_pkey PRIMARY KEY (entr, kw, value, mctype);


--
-- TOC entry 3366 (class 2606 OID 653829)
-- Name: dbpatch_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dbpatch
    ADD CONSTRAINT dbpatch_pkey PRIMARY KEY (level);


--
-- TOC entry 3368 (class 2606 OID 653831)
-- Name: dial_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dial
    ADD CONSTRAINT dial_pkey PRIMARY KEY (entr, sens, kw);


--
-- TOC entry 3242 (class 2606 OID 653833)
-- Name: entr_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY entr
    ADD CONSTRAINT entr_pkey PRIMARY KEY (id);


--
-- TOC entry 3370 (class 2606 OID 653835)
-- Name: entrsnd_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY entrsnd
    ADD CONSTRAINT entrsnd_pkey PRIMARY KEY (entr, snd);


--
-- TOC entry 3396 (class 2606 OID 653837)
-- Name: fld_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY fld
    ADD CONSTRAINT fld_pkey PRIMARY KEY (entr, sens, kw);


--
-- TOC entry 3391 (class 2606 OID 653839)
-- Name: freq_entr_rdng_kanj_kw_key; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY freq
    ADD CONSTRAINT freq_entr_rdng_kanj_kw_key UNIQUE (entr, rdng, kanj, kw);


--
-- TOC entry 3394 (class 2606 OID 653841)
-- Name: freq_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY freq
    ADD CONSTRAINT freq_pkey PRIMARY KEY (id);


--
-- TOC entry 3373 (class 2606 OID 653843)
-- Name: gloss_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY gloss
    ADD CONSTRAINT gloss_pkey PRIMARY KEY (entr, sens, gloss, lang);


--
-- TOC entry 3399 (class 2606 OID 653845)
-- Name: grp_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY grp
    ADD CONSTRAINT grp_pkey PRIMARY KEY (entr, kw);


--
-- TOC entry 3403 (class 2606 OID 653847)
-- Name: hist_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY hist
    ADD CONSTRAINT hist_pkey PRIMARY KEY (entr, hist);


--
-- TOC entry 3379 (class 2606 OID 653849)
-- Name: kanj_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kanj
    ADD CONSTRAINT kanj_pkey PRIMARY KEY (entr, kanj);


--
-- TOC entry 3406 (class 2606 OID 653851)
-- Name: kinf_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kinf
    ADD CONSTRAINT kinf_pkey PRIMARY KEY (entr, kanj, kw);


--
-- TOC entry 3408 (class 2606 OID 653853)
-- Name: kresolv_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kresolv
    ADD CONSTRAINT kresolv_pkey PRIMARY KEY (entr, kw, value);


--
-- TOC entry 3410 (class 2606 OID 653855)
-- Name: kwcinf_kw_key; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwcinf
    ADD CONSTRAINT kwcinf_kw_key UNIQUE (kw);


--
-- TOC entry 3412 (class 2606 OID 653857)
-- Name: kwcinf_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwcinf
    ADD CONSTRAINT kwcinf_pkey PRIMARY KEY (id);


--
-- TOC entry 3414 (class 2606 OID 653859)
-- Name: kwdial_kw_key; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwdial
    ADD CONSTRAINT kwdial_kw_key UNIQUE (kw);


--
-- TOC entry 3416 (class 2606 OID 653861)
-- Name: kwdial_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwdial
    ADD CONSTRAINT kwdial_pkey PRIMARY KEY (id);


--
-- TOC entry 3418 (class 2606 OID 653863)
-- Name: kwfld_kw_key; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwfld
    ADD CONSTRAINT kwfld_kw_key UNIQUE (kw);


--
-- TOC entry 3420 (class 2606 OID 653865)
-- Name: kwfld_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwfld
    ADD CONSTRAINT kwfld_pkey PRIMARY KEY (id);


--
-- TOC entry 3422 (class 2606 OID 653867)
-- Name: kwfreq_kw_key; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwfreq
    ADD CONSTRAINT kwfreq_kw_key UNIQUE (kw);


--
-- TOC entry 3424 (class 2606 OID 653869)
-- Name: kwfreq_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwfreq
    ADD CONSTRAINT kwfreq_pkey PRIMARY KEY (id);


--
-- TOC entry 3426 (class 2606 OID 653871)
-- Name: kwginf_kw_key; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwginf
    ADD CONSTRAINT kwginf_kw_key UNIQUE (kw);


--
-- TOC entry 3428 (class 2606 OID 653873)
-- Name: kwginf_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwginf
    ADD CONSTRAINT kwginf_pkey PRIMARY KEY (id);


--
-- TOC entry 3430 (class 2606 OID 653875)
-- Name: kwgrp_kw_key; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwgrp
    ADD CONSTRAINT kwgrp_kw_key UNIQUE (kw);


--
-- TOC entry 3432 (class 2606 OID 653877)
-- Name: kwgrp_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwgrp
    ADD CONSTRAINT kwgrp_pkey PRIMARY KEY (id);


--
-- TOC entry 3434 (class 2606 OID 653879)
-- Name: kwkinf_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwkinf
    ADD CONSTRAINT kwkinf_pkey PRIMARY KEY (id);


--
-- TOC entry 3436 (class 2606 OID 653881)
-- Name: kwlang_kw_key; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwlang
    ADD CONSTRAINT kwlang_kw_key UNIQUE (kw);


--
-- TOC entry 3438 (class 2606 OID 653883)
-- Name: kwlang_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwlang
    ADD CONSTRAINT kwlang_pkey PRIMARY KEY (id);


--
-- TOC entry 3440 (class 2606 OID 653885)
-- Name: kwmisc_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwmisc
    ADD CONSTRAINT kwmisc_pkey PRIMARY KEY (id);


--
-- TOC entry 3442 (class 2606 OID 653887)
-- Name: kwpos_kw_key; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwpos
    ADD CONSTRAINT kwpos_kw_key UNIQUE (kw);


--
-- TOC entry 3444 (class 2606 OID 653889)
-- Name: kwpos_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwpos
    ADD CONSTRAINT kwpos_pkey PRIMARY KEY (id);


--
-- TOC entry 3446 (class 2606 OID 653891)
-- Name: kwrinf_kw_key; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwrinf
    ADD CONSTRAINT kwrinf_kw_key UNIQUE (kw);


--
-- TOC entry 3448 (class 2606 OID 653893)
-- Name: kwrinf_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwrinf
    ADD CONSTRAINT kwrinf_pkey PRIMARY KEY (id);


--
-- TOC entry 3450 (class 2606 OID 653895)
-- Name: kwsrc_kw_key; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwsrc
    ADD CONSTRAINT kwsrc_kw_key UNIQUE (kw);


--
-- TOC entry 3452 (class 2606 OID 653897)
-- Name: kwsrc_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwsrc
    ADD CONSTRAINT kwsrc_pkey PRIMARY KEY (id);


--
-- TOC entry 3454 (class 2606 OID 653899)
-- Name: kwstat_kw_key; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwstat
    ADD CONSTRAINT kwstat_kw_key UNIQUE (kw);


--
-- TOC entry 3456 (class 2606 OID 653901)
-- Name: kwstat_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwstat
    ADD CONSTRAINT kwstat_pkey PRIMARY KEY (id);


--
-- TOC entry 3458 (class 2606 OID 653903)
-- Name: kwxref_kw_key; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwxref
    ADD CONSTRAINT kwxref_kw_key UNIQUE (kw);


--
-- TOC entry 3460 (class 2606 OID 653905)
-- Name: kwxref_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwxref
    ADD CONSTRAINT kwxref_pkey PRIMARY KEY (id);


--
-- TOC entry 3462 (class 2606 OID 653907)
-- Name: lsrc_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY lsrc
    ADD CONSTRAINT lsrc_pkey PRIMARY KEY (entr, sens, lang, txt);


--
-- TOC entry 3464 (class 2606 OID 653909)
-- Name: misc_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY misc
    ADD CONSTRAINT misc_pkey PRIMARY KEY (entr, sens, kw);


--
-- TOC entry 3466 (class 2606 OID 653911)
-- Name: pos_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pos
    ADD CONSTRAINT pos_pkey PRIMARY KEY (entr, sens, kw);


--
-- TOC entry 3468 (class 2606 OID 653913)
-- Name: rad_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY rad
    ADD CONSTRAINT rad_pkey PRIMARY KEY (num, var);


--
-- TOC entry 3384 (class 2606 OID 653915)
-- Name: rdng_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY rdng
    ADD CONSTRAINT rdng_pkey PRIMARY KEY (entr, rdng);


--
-- TOC entry 3470 (class 2606 OID 653917)
-- Name: rdngsnd_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY rdngsnd
    ADD CONSTRAINT rdngsnd_pkey PRIMARY KEY (entr, rdng, snd);


--
-- TOC entry 3473 (class 2606 OID 653919)
-- Name: restr_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY restr
    ADD CONSTRAINT restr_pkey PRIMARY KEY (entr, rdng, kanj);


--
-- TOC entry 3475 (class 2606 OID 653921)
-- Name: rinf_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY rinf
    ADD CONSTRAINT rinf_pkey PRIMARY KEY (entr, rdng, kw);


--
-- TOC entry 3389 (class 2606 OID 653923)
-- Name: sens_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY sens
    ADD CONSTRAINT sens_pkey PRIMARY KEY (entr, sens);


--
-- TOC entry 3479 (class 2606 OID 653925)
-- Name: snd_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY snd
    ADD CONSTRAINT snd_pkey PRIMARY KEY (id);


--
-- TOC entry 3481 (class 2606 OID 653927)
-- Name: sndfile_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY sndfile
    ADD CONSTRAINT sndfile_pkey PRIMARY KEY (id);


--
-- TOC entry 3484 (class 2606 OID 653929)
-- Name: sndvol_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY sndvol
    ADD CONSTRAINT sndvol_pkey PRIMARY KEY (id);


--
-- TOC entry 3477 (class 2606 OID 653931)
-- Name: stagk_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stagk
    ADD CONSTRAINT stagk_pkey PRIMARY KEY (entr, sens, kanj);


--
-- TOC entry 3486 (class 2606 OID 653933)
-- Name: stagr_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stagr
    ADD CONSTRAINT stagr_pkey PRIMARY KEY (entr, sens, rdng);


--
-- TOC entry 3488 (class 2606 OID 653935)
-- Name: xref_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY xref
    ADD CONSTRAINT xref_pkey PRIMARY KEY (entr, sens, xref, xentr, xsens);


--
-- TOC entry 3492 (class 2606 OID 653937)
-- Name: xresolv_pkey; Type: CONSTRAINT; Schema: jmdict; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY xresolv
    ADD CONSTRAINT xresolv_pkey PRIMARY KEY (entr, sens, typ, ord);


SET search_path = jmdict_en, pg_catalog;

--
-- TOC entry 3496 (class 2606 OID 653939)
-- Name: chr_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY chr
    ADD CONSTRAINT chr_pkey PRIMARY KEY (entr);


--
-- TOC entry 3499 (class 2606 OID 653941)
-- Name: cinf_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cinf
    ADD CONSTRAINT cinf_pkey PRIMARY KEY (entr, kw, value, mctype);


--
-- TOC entry 3502 (class 2606 OID 653943)
-- Name: conj_name_key; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conj
    ADD CONSTRAINT conj_name_key UNIQUE (name);


--
-- TOC entry 3504 (class 2606 OID 653945)
-- Name: conj_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conj
    ADD CONSTRAINT conj_pkey PRIMARY KEY (id);


--
-- TOC entry 3508 (class 2606 OID 653947)
-- Name: conjo_notes_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conjo_notes
    ADD CONSTRAINT conjo_notes_pkey PRIMARY KEY (pos, conj, neg, fml, onum, note);


--
-- TOC entry 3506 (class 2606 OID 653949)
-- Name: conjo_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conjo
    ADD CONSTRAINT conjo_pkey PRIMARY KEY (pos, conj, neg, fml, onum);


--
-- TOC entry 3510 (class 2606 OID 653951)
-- Name: conotes_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conotes
    ADD CONSTRAINT conotes_pkey PRIMARY KEY (id);


--
-- TOC entry 3512 (class 2606 OID 653953)
-- Name: dbpatch_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dbpatch
    ADD CONSTRAINT dbpatch_pkey PRIMARY KEY (level);


--
-- TOC entry 3514 (class 2606 OID 653955)
-- Name: dial_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dial
    ADD CONSTRAINT dial_pkey PRIMARY KEY (entr, sens, kw);


--
-- TOC entry 3248 (class 2606 OID 653957)
-- Name: entr_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY entr
    ADD CONSTRAINT entr_pkey PRIMARY KEY (id);


--
-- TOC entry 3516 (class 2606 OID 653959)
-- Name: entrsnd_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY entrsnd
    ADD CONSTRAINT entrsnd_pkey PRIMARY KEY (entr, snd);


--
-- TOC entry 3542 (class 2606 OID 653961)
-- Name: fld_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY fld
    ADD CONSTRAINT fld_pkey PRIMARY KEY (entr, sens, kw);


--
-- TOC entry 3538 (class 2606 OID 653963)
-- Name: freq_entr_rdng_kanj_kw_key; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY freq
    ADD CONSTRAINT freq_entr_rdng_kanj_kw_key UNIQUE (entr, rdng, kanj, kw);


--
-- TOC entry 3540 (class 2606 OID 653965)
-- Name: freq_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY freq
    ADD CONSTRAINT freq_pkey PRIMARY KEY (id);


--
-- TOC entry 3522 (class 2606 OID 653967)
-- Name: gloss_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY gloss
    ADD CONSTRAINT gloss_pkey PRIMARY KEY (entr, sens, gloss);


--
-- TOC entry 3545 (class 2606 OID 653969)
-- Name: grp_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY grp
    ADD CONSTRAINT grp_pkey PRIMARY KEY (entr, kw);


--
-- TOC entry 3549 (class 2606 OID 653971)
-- Name: hist_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY hist
    ADD CONSTRAINT hist_pkey PRIMARY KEY (entr, hist);


--
-- TOC entry 3526 (class 2606 OID 653973)
-- Name: kanj_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kanj
    ADD CONSTRAINT kanj_pkey PRIMARY KEY (entr, kanj);


--
-- TOC entry 3552 (class 2606 OID 653975)
-- Name: kinf_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kinf
    ADD CONSTRAINT kinf_pkey PRIMARY KEY (entr, kanj, kw);


--
-- TOC entry 3554 (class 2606 OID 653977)
-- Name: kresolv_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kresolv
    ADD CONSTRAINT kresolv_pkey PRIMARY KEY (entr, kw, value);


--
-- TOC entry 3556 (class 2606 OID 653979)
-- Name: kwcinf_kw_key; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwcinf
    ADD CONSTRAINT kwcinf_kw_key UNIQUE (kw);


--
-- TOC entry 3558 (class 2606 OID 653981)
-- Name: kwcinf_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwcinf
    ADD CONSTRAINT kwcinf_pkey PRIMARY KEY (id);


--
-- TOC entry 3560 (class 2606 OID 653983)
-- Name: kwdial_kw_key; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwdial
    ADD CONSTRAINT kwdial_kw_key UNIQUE (kw);


--
-- TOC entry 3562 (class 2606 OID 653985)
-- Name: kwdial_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwdial
    ADD CONSTRAINT kwdial_pkey PRIMARY KEY (id);


--
-- TOC entry 3564 (class 2606 OID 653987)
-- Name: kwfld_kw_key; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwfld
    ADD CONSTRAINT kwfld_kw_key UNIQUE (kw);


--
-- TOC entry 3566 (class 2606 OID 653989)
-- Name: kwfld_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwfld
    ADD CONSTRAINT kwfld_pkey PRIMARY KEY (id);


--
-- TOC entry 3568 (class 2606 OID 653991)
-- Name: kwfreq_kw_key; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwfreq
    ADD CONSTRAINT kwfreq_kw_key UNIQUE (kw);


--
-- TOC entry 3570 (class 2606 OID 653993)
-- Name: kwfreq_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwfreq
    ADD CONSTRAINT kwfreq_pkey PRIMARY KEY (id);


--
-- TOC entry 3572 (class 2606 OID 653995)
-- Name: kwginf_kw_key; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwginf
    ADD CONSTRAINT kwginf_kw_key UNIQUE (kw);


--
-- TOC entry 3574 (class 2606 OID 653997)
-- Name: kwginf_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwginf
    ADD CONSTRAINT kwginf_pkey PRIMARY KEY (id);


--
-- TOC entry 3576 (class 2606 OID 653999)
-- Name: kwgrp_kw_key; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwgrp
    ADD CONSTRAINT kwgrp_kw_key UNIQUE (kw);


--
-- TOC entry 3578 (class 2606 OID 654001)
-- Name: kwgrp_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwgrp
    ADD CONSTRAINT kwgrp_pkey PRIMARY KEY (id);


--
-- TOC entry 3580 (class 2606 OID 654003)
-- Name: kwkinf_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwkinf
    ADD CONSTRAINT kwkinf_pkey PRIMARY KEY (id);


--
-- TOC entry 3582 (class 2606 OID 654005)
-- Name: kwlang_kw_key; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwlang
    ADD CONSTRAINT kwlang_kw_key UNIQUE (kw);


--
-- TOC entry 3584 (class 2606 OID 654007)
-- Name: kwlang_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwlang
    ADD CONSTRAINT kwlang_pkey PRIMARY KEY (id);


--
-- TOC entry 3586 (class 2606 OID 654009)
-- Name: kwmisc_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwmisc
    ADD CONSTRAINT kwmisc_pkey PRIMARY KEY (id);


--
-- TOC entry 3588 (class 2606 OID 654011)
-- Name: kwpos_kw_key; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwpos
    ADD CONSTRAINT kwpos_kw_key UNIQUE (kw);


--
-- TOC entry 3590 (class 2606 OID 654013)
-- Name: kwpos_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwpos
    ADD CONSTRAINT kwpos_pkey PRIMARY KEY (id);


--
-- TOC entry 3592 (class 2606 OID 654015)
-- Name: kwrinf_kw_key; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwrinf
    ADD CONSTRAINT kwrinf_kw_key UNIQUE (kw);


--
-- TOC entry 3594 (class 2606 OID 654017)
-- Name: kwrinf_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwrinf
    ADD CONSTRAINT kwrinf_pkey PRIMARY KEY (id);


--
-- TOC entry 3596 (class 2606 OID 654019)
-- Name: kwsrc_kw_key; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwsrc
    ADD CONSTRAINT kwsrc_kw_key UNIQUE (kw);


--
-- TOC entry 3598 (class 2606 OID 654021)
-- Name: kwsrc_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwsrc
    ADD CONSTRAINT kwsrc_pkey PRIMARY KEY (id);


--
-- TOC entry 3600 (class 2606 OID 654023)
-- Name: kwsrct_kw_key; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwsrct
    ADD CONSTRAINT kwsrct_kw_key UNIQUE (kw);


--
-- TOC entry 3602 (class 2606 OID 654025)
-- Name: kwsrct_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwsrct
    ADD CONSTRAINT kwsrct_pkey PRIMARY KEY (id);


--
-- TOC entry 3604 (class 2606 OID 654027)
-- Name: kwstat_kw_key; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwstat
    ADD CONSTRAINT kwstat_kw_key UNIQUE (kw);


--
-- TOC entry 3606 (class 2606 OID 654029)
-- Name: kwstat_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwstat
    ADD CONSTRAINT kwstat_pkey PRIMARY KEY (id);


--
-- TOC entry 3608 (class 2606 OID 654031)
-- Name: kwxref_kw_key; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwxref
    ADD CONSTRAINT kwxref_kw_key UNIQUE (kw);


--
-- TOC entry 3610 (class 2606 OID 654033)
-- Name: kwxref_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kwxref
    ADD CONSTRAINT kwxref_pkey PRIMARY KEY (id);


--
-- TOC entry 3612 (class 2606 OID 654035)
-- Name: lsrc_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY lsrc
    ADD CONSTRAINT lsrc_pkey PRIMARY KEY (entr, sens, lang, txt);


--
-- TOC entry 3614 (class 2606 OID 654037)
-- Name: misc_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY misc
    ADD CONSTRAINT misc_pkey PRIMARY KEY (entr, sens, kw);


--
-- TOC entry 3616 (class 2606 OID 654039)
-- Name: pos_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pos
    ADD CONSTRAINT pos_pkey PRIMARY KEY (entr, sens, kw);


--
-- TOC entry 3618 (class 2606 OID 654041)
-- Name: rad_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY rad
    ADD CONSTRAINT rad_pkey PRIMARY KEY (num, var);


--
-- TOC entry 3531 (class 2606 OID 654043)
-- Name: rdng_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY rdng
    ADD CONSTRAINT rdng_pkey PRIMARY KEY (entr, rdng);


--
-- TOC entry 3620 (class 2606 OID 654045)
-- Name: rdngsnd_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY rdngsnd
    ADD CONSTRAINT rdngsnd_pkey PRIMARY KEY (entr, rdng, snd);


--
-- TOC entry 3623 (class 2606 OID 654047)
-- Name: restr_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY restr
    ADD CONSTRAINT restr_pkey PRIMARY KEY (entr, rdng, kanj);


--
-- TOC entry 3625 (class 2606 OID 654049)
-- Name: rinf_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY rinf
    ADD CONSTRAINT rinf_pkey PRIMARY KEY (entr, rdng, kw);


--
-- TOC entry 3535 (class 2606 OID 654051)
-- Name: sens_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY sens
    ADD CONSTRAINT sens_pkey PRIMARY KEY (entr, sens);


--
-- TOC entry 3629 (class 2606 OID 654053)
-- Name: snd_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY snd
    ADD CONSTRAINT snd_pkey PRIMARY KEY (id);


--
-- TOC entry 3631 (class 2606 OID 654055)
-- Name: sndfile_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY sndfile
    ADD CONSTRAINT sndfile_pkey PRIMARY KEY (id);


--
-- TOC entry 3634 (class 2606 OID 654057)
-- Name: sndvol_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY sndvol
    ADD CONSTRAINT sndvol_pkey PRIMARY KEY (id);


--
-- TOC entry 3627 (class 2606 OID 654059)
-- Name: stagk_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stagk
    ADD CONSTRAINT stagk_pkey PRIMARY KEY (entr, sens, kanj);


--
-- TOC entry 3636 (class 2606 OID 654061)
-- Name: stagr_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY stagr
    ADD CONSTRAINT stagr_pkey PRIMARY KEY (entr, sens, rdng);


--
-- TOC entry 3638 (class 2606 OID 654063)
-- Name: xref_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY xref
    ADD CONSTRAINT xref_pkey PRIMARY KEY (entr, sens, xref, xentr, xsens);


--
-- TOC entry 3642 (class 2606 OID 654065)
-- Name: xresolv_pkey; Type: CONSTRAINT; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY xresolv
    ADD CONSTRAINT xresolv_pkey PRIMARY KEY (entr, sens, typ, ord);


SET search_path = kanjidic2, pg_catalog;

--
-- TOC entry 3645 (class 2606 OID 654067)
-- Name: cf_yomi_type_pkey; Type: CONSTRAINT; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cf_reading_type
    ADD CONSTRAINT cf_yomi_type_pkey PRIMARY KEY (id);


--
-- TOC entry 3649 (class 2606 OID 654069)
-- Name: codepoint_pkey; Type: CONSTRAINT; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY codepoint
    ADD CONSTRAINT codepoint_pkey PRIMARY KEY (id);


--
-- TOC entry 3651 (class 2606 OID 654071)
-- Name: dic_number_pkey; Type: CONSTRAINT; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dic_number
    ADD CONSTRAINT dic_number_pkey PRIMARY KEY (id);


--
-- TOC entry 3653 (class 2606 OID 654073)
-- Name: jinmei_pkey; Type: CONSTRAINT; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY jinmei
    ADD CONSTRAINT jinmei_pkey PRIMARY KEY (kanji_id);


--
-- TOC entry 3658 (class 2606 OID 654075)
-- Name: jouyou_pkey; Type: CONSTRAINT; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY jouyou
    ADD CONSTRAINT jouyou_pkey PRIMARY KEY (kanji_id);


--
-- TOC entry 3335 (class 2606 OID 654077)
-- Name: kanji_pkey; Type: CONSTRAINT; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kanji
    ADD CONSTRAINT kanji_pkey PRIMARY KEY (id);


--
-- TOC entry 3664 (class 2606 OID 654079)
-- Name: kanji_primitive_pkey; Type: CONSTRAINT; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kanji_primitive
    ADD CONSTRAINT kanji_primitive_pkey PRIMARY KEY (id);


--
-- TOC entry 3339 (class 2606 OID 654081)
-- Name: kun_yomi_pkey; Type: CONSTRAINT; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kanji_reading
    ADD CONSTRAINT kun_yomi_pkey PRIMARY KEY (id);


--
-- TOC entry 3662 (class 2606 OID 654083)
-- Name: meaning_pkey; Type: CONSTRAINT; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kanji_meaning
    ADD CONSTRAINT meaning_pkey PRIMARY KEY (id);


--
-- TOC entry 3343 (class 2606 OID 654085)
-- Name: mtm_kanji_image_pkey; Type: CONSTRAINT; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mtm_kanji_image
    ADD CONSTRAINT mtm_kanji_image_pkey PRIMARY KEY (id);


--
-- TOC entry 3672 (class 2606 OID 654087)
-- Name: mtm_kanji_primitive_pkey; Type: CONSTRAINT; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mtm_kanji_primitive
    ADD CONSTRAINT mtm_kanji_primitive_pkey PRIMARY KEY (id);


--
-- TOC entry 3674 (class 2606 OID 654089)
-- Name: query_code_pkey; Type: CONSTRAINT; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY query_code
    ADD CONSTRAINT query_code_pkey PRIMARY KEY (id);


--
-- TOC entry 3666 (class 2606 OID 654091)
-- Name: radical_pkey; Type: CONSTRAINT; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kanji_radical
    ADD CONSTRAINT radical_pkey PRIMARY KEY (id);


--
-- TOC entry 3347 (class 2606 OID 654093)
-- Name: reading_pkey; Type: CONSTRAINT; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mtm_kanji_reading
    ADD CONSTRAINT reading_pkey PRIMARY KEY (id);


--
-- TOC entry 3647 (class 2606 OID 654095)
-- Name: uq_cf_yomi_type_classifier_id; Type: CONSTRAINT; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cf_reading_type
    ADD CONSTRAINT uq_cf_yomi_type_classifier_id UNIQUE (classifier_id);


--
-- TOC entry 3655 (class 2606 OID 654097)
-- Name: uq_jinmei_jinmei_seq; Type: CONSTRAINT; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY jinmei
    ADD CONSTRAINT uq_jinmei_jinmei_seq UNIQUE (jinmei_seq);


--
-- TOC entry 3660 (class 2606 OID 654099)
-- Name: uq_jouyou_kanji_id; Type: CONSTRAINT; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY jouyou
    ADD CONSTRAINT uq_jouyou_kanji_id UNIQUE (kanji_id);


--
-- TOC entry 3337 (class 2606 OID 654101)
-- Name: uq_kanji_literal; Type: CONSTRAINT; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kanji
    ADD CONSTRAINT uq_kanji_literal UNIQUE (literal);


--
-- TOC entry 3345 (class 2606 OID 654103)
-- Name: uq_kanji_stroke_image_id; Type: CONSTRAINT; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mtm_kanji_image
    ADD CONSTRAINT uq_kanji_stroke_image_id UNIQUE (stroke_image_id);


--
-- TOC entry 3341 (class 2606 OID 654105)
-- Name: uq_reading_literal_with_cf; Type: CONSTRAINT; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kanji_reading
    ADD CONSTRAINT uq_reading_literal_with_cf UNIQUE (literal, cf_reading_type_id);


--
-- TOC entry 3668 (class 2606 OID 654107)
-- Name: uq_variant_kanji_id; Type: CONSTRAINT; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kanji_variant
    ADD CONSTRAINT uq_variant_kanji_id UNIQUE (kanji_id);


--
-- TOC entry 3670 (class 2606 OID 654109)
-- Name: variant_pkey; Type: CONSTRAINT; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kanji_variant
    ADD CONSTRAINT variant_pkey PRIMARY KEY (id);


SET search_path = public, pg_catalog;

--
-- TOC entry 3678 (class 2606 OID 654111)
-- Name: audio_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY audio
    ADD CONSTRAINT audio_pkey PRIMARY KEY (id);


--
-- TOC entry 3682 (class 2606 OID 654117)
-- Name: cf_audio_quality_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cf_audio_quality
    ADD CONSTRAINT cf_audio_quality_pkey PRIMARY KEY (id);


--
-- TOC entry 3686 (class 2606 OID 654119)
-- Name: cf_et_sonaliik_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cf_et_sonaliik
    ADD CONSTRAINT cf_et_sonaliik_pkey PRIMARY KEY (id);


--
-- TOC entry 3690 (class 2606 OID 654121)
-- Name: cf_jp_category_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cf_jp_category
    ADD CONSTRAINT cf_jp_category_pkey PRIMARY KEY (id);


--
-- TOC entry 3698 (class 2606 OID 654123)
-- Name: cf_jp_et_trans_quality_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cf_voca_trans_quality
    ADD CONSTRAINT cf_jp_et_trans_quality_pkey PRIMARY KEY (id);


--
-- TOC entry 3694 (class 2606 OID 654125)
-- Name: cf_jp_origin_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cf_origin
    ADD CONSTRAINT cf_jp_origin_pkey PRIMARY KEY (id);


--
-- TOC entry 3676 (class 2606 OID 654127)
-- Name: classifier_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY classifier
    ADD CONSTRAINT classifier_pkey PRIMARY KEY (id);


--
-- TOC entry 3702 (class 2606 OID 654129)
-- Name: eki_lemma_lemma_key; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY eki_lemma
    ADD CONSTRAINT eki_lemma_lemma_key UNIQUE (lemma);


--
-- TOC entry 3704 (class 2606 OID 654131)
-- Name: eki_lemma_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY eki_lemma
    ADD CONSTRAINT eki_lemma_pkey PRIMARY KEY (id);


--
-- TOC entry 3706 (class 2606 OID 654133)
-- Name: en_sentence_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY en_sentence
    ADD CONSTRAINT en_sentence_pkey PRIMARY KEY (id);


--
-- TOC entry 3714 (class 2606 OID 654135)
-- Name: estonian_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phrase_et
    ADD CONSTRAINT estonian_pkey PRIMARY KEY (id);


--
-- TOC entry 3720 (class 2606 OID 654137)
-- Name: et_search_hist_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY et_search_hist
    ADD CONSTRAINT et_search_hist_pkey PRIMARY KEY (id);


--
-- TOC entry 3722 (class 2606 OID 654139)
-- Name: et_sentence_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY et_sentence
    ADD CONSTRAINT et_sentence_pkey PRIMARY KEY (id);


--
-- TOC entry 3730 (class 2606 OID 654141)
-- Name: hiragana_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY hiragana
    ADD CONSTRAINT hiragana_pkey PRIMARY KEY (kana);


--
-- TOC entry 3349 (class 2606 OID 654143)
-- Name: image_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY image
    ADD CONSTRAINT image_pkey PRIMARY KEY (id);


--
-- TOC entry 3736 (class 2606 OID 654145)
-- Name: jm_entr_jatik_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY jm_entr_jatik
    ADD CONSTRAINT jm_entr_jatik_pkey PRIMARY KEY (entr);


--
-- TOC entry 3740 (class 2606 OID 654147)
-- Name: jm_gloss_inf_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY jm_gloss_inf
    ADD CONSTRAINT jm_gloss_inf_pkey PRIMARY KEY (entr, sens, gloss);


--
-- TOC entry 3742 (class 2606 OID 654149)
-- Name: jp_search_hist_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY jp_search_hist
    ADD CONSTRAINT jp_search_hist_pkey PRIMARY KEY (id);


--
-- TOC entry 3744 (class 2606 OID 654151)
-- Name: jp_sentence_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY jp_sentence
    ADD CONSTRAINT jp_sentence_pkey PRIMARY KEY (id);


--
-- TOC entry 3353 (class 2606 OID 654153)
-- Name: katakana_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY katakana
    ADD CONSTRAINT katakana_pkey PRIMARY KEY (kana);


--
-- TOC entry 3750 (class 2606 OID 654155)
-- Name: mtm_jm_sens_jp_sentence_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mtm_jm_sens_jp_sentence
    ADD CONSTRAINT mtm_jm_sens_jp_sentence_pkey PRIMARY KEY (id);


--
-- TOC entry 3680 (class 2606 OID 654157)
-- Name: uq_audio_file_name; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY audio
    ADD CONSTRAINT uq_audio_file_name UNIQUE (file_name);


--
-- TOC entry 3684 (class 2606 OID 654161)
-- Name: uq_cf_audio_quality; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cf_audio_quality
    ADD CONSTRAINT uq_cf_audio_quality UNIQUE (classifier_id);


--
-- TOC entry 3688 (class 2606 OID 654163)
-- Name: uq_cf_et_sonaliik; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cf_et_sonaliik
    ADD CONSTRAINT uq_cf_et_sonaliik UNIQUE (classifier_id);


--
-- TOC entry 3692 (class 2606 OID 654165)
-- Name: uq_cf_jp_category; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cf_jp_category
    ADD CONSTRAINT uq_cf_jp_category UNIQUE (classifier_id);


--
-- TOC entry 3700 (class 2606 OID 654167)
-- Name: uq_cf_jp_et_trans_quality; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cf_voca_trans_quality
    ADD CONSTRAINT uq_cf_jp_et_trans_quality UNIQUE (classifier_id);


--
-- TOC entry 3696 (class 2606 OID 654169)
-- Name: uq_cf_origin; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cf_origin
    ADD CONSTRAINT uq_cf_origin UNIQUE (classifier_id);


--
-- TOC entry 3708 (class 2606 OID 654171)
-- Name: uq_en_sentence_audio_id; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY en_sentence
    ADD CONSTRAINT uq_en_sentence_audio_id UNIQUE (audio_id);


--
-- TOC entry 3710 (class 2606 OID 654173)
-- Name: uq_en_sentence_en; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY en_sentence
    ADD CONSTRAINT uq_en_sentence_en UNIQUE (en);


--
-- TOC entry 3712 (class 2606 OID 654175)
-- Name: uq_en_sentence_jp_sentence_id; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY en_sentence
    ADD CONSTRAINT uq_en_sentence_jp_sentence_id UNIQUE (jp_sentence_id);


--
-- TOC entry 3724 (class 2606 OID 654177)
-- Name: uq_et_sentence; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY et_sentence
    ADD CONSTRAINT uq_et_sentence UNIQUE (et_sentence);


--
-- TOC entry 3726 (class 2606 OID 654179)
-- Name: uq_et_sentence_audio_id; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY et_sentence
    ADD CONSTRAINT uq_et_sentence_audio_id UNIQUE (audio_id);


--
-- TOC entry 3728 (class 2606 OID 654181)
-- Name: uq_et_sentence_jp_sentence_id; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY et_sentence
    ADD CONSTRAINT uq_et_sentence_jp_sentence_id UNIQUE (jp_sentence_id);


--
-- TOC entry 3732 (class 2606 OID 654183)
-- Name: uq_hiragana_audio_id; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY hiragana
    ADD CONSTRAINT uq_hiragana_audio_id UNIQUE (audio_id);


--
-- TOC entry 3734 (class 2606 OID 654185)
-- Name: uq_hiragana_stroke_image_id; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY hiragana
    ADD CONSTRAINT uq_hiragana_stroke_image_id UNIQUE (stroke_image_id);


--
-- TOC entry 3351 (class 2606 OID 654187)
-- Name: uq_image_file_name; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY image
    ADD CONSTRAINT uq_image_file_name UNIQUE (file_name);


--
-- TOC entry 3738 (class 2606 OID 654189)
-- Name: uq_jm_entr_jatik_id; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY jm_entr_jatik
    ADD CONSTRAINT uq_jm_entr_jatik_id UNIQUE (jatik_id);


--
-- TOC entry 3746 (class 2606 OID 654191)
-- Name: uq_jp_sentence; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY jp_sentence
    ADD CONSTRAINT uq_jp_sentence UNIQUE (jp);


--
-- TOC entry 3748 (class 2606 OID 654193)
-- Name: uq_jp_sentence_audio_id; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY jp_sentence
    ADD CONSTRAINT uq_jp_sentence_audio_id UNIQUE (audio_id);


--
-- TOC entry 3355 (class 2606 OID 654195)
-- Name: uq_katakana_audio_id; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY katakana
    ADD CONSTRAINT uq_katakana_audio_id UNIQUE (audio_id);


--
-- TOC entry 3357 (class 2606 OID 654197)
-- Name: uq_katakana_stroke_image_id; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY katakana
    ADD CONSTRAINT uq_katakana_stroke_image_id UNIQUE (stroke_image_id);


--
-- TOC entry 3716 (class 2606 OID 654199)
-- Name: uq_phrase_et_audio_id; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phrase_et
    ADD CONSTRAINT uq_phrase_et_audio_id UNIQUE (audio_id);


--
-- TOC entry 3718 (class 2606 OID 654201)
-- Name: uq_phrase_et_et; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY phrase_et
    ADD CONSTRAINT uq_phrase_et_et UNIQUE (et);


SET search_path = test, pg_catalog;

--
-- TOC entry 3756 (class 2606 OID 654203)
-- Name: article_paragraph_pkey; Type: CONSTRAINT; Schema: test; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY article_paragraph
    ADD CONSTRAINT article_paragraph_pkey PRIMARY KEY (id);


--
-- TOC entry 3752 (class 2606 OID 654205)
-- Name: article_pkey; Type: CONSTRAINT; Schema: test; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY article
    ADD CONSTRAINT article_pkey PRIMARY KEY (id);


--
-- TOC entry 3754 (class 2606 OID 654207)
-- Name: uq_article_title; Type: CONSTRAINT; Schema: test; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY article
    ADD CONSTRAINT uq_article_title UNIQUE (title);


SET search_path = ac, pg_catalog;

--
-- TOC entry 3254 (class 1259 OID 654208)
-- Name: idx_persistent_audit_event; Type: INDEX; Schema: ac; Owner: postgres; Tablespace: 
--

CREATE INDEX idx_persistent_audit_event ON persistent_audit_event USING btree (principal, event_date);


--
-- TOC entry 3257 (class 1259 OID 654209)
-- Name: idx_persistent_audit_event_data; Type: INDEX; Schema: ac; Owner: postgres; Tablespace: 
--

CREATE INDEX idx_persistent_audit_event_data ON persistent_audit_event_data USING btree (event_id);


--
-- TOC entry 3264 (class 1259 OID 654210)
-- Name: idx_user_authority; Type: INDEX; Schema: ac; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX idx_user_authority ON user_authority USING btree (login, name);


SET search_path = freq, pg_catalog;

--
-- TOC entry 3765 (class 1259 OID 663835)
-- Name: user_has_1_translation; Type: INDEX; Schema: freq; Owner: postgres; Tablespace: 
--

CREATE INDEX user_has_1_translation ON tofu_sentence_translation USING btree (created_by, tofu_sentence_id);


SET search_path = heisig, pg_catalog;

--
-- TOC entry 3313 (class 1259 OID 654211)
-- Name: index_kanji; Type: INDEX; Schema: heisig; Owner: postgres; Tablespace: 
--

CREATE INDEX index_kanji ON heisig6 USING btree (kanji);


SET search_path = jmdict, pg_catalog;

--
-- TOC entry 3358 (class 1259 OID 654212)
-- Name: chr_chr; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX chr_chr ON chr USING btree (chr);


--
-- TOC entry 3361 (class 1259 OID 654213)
-- Name: cinf_kw; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE INDEX cinf_kw ON cinf USING btree (kw);


--
-- TOC entry 3364 (class 1259 OID 654214)
-- Name: cinf_val; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE INDEX cinf_val ON cinf USING btree (value);


--
-- TOC entry 3240 (class 1259 OID 654215)
-- Name: entr_dfrm; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE INDEX entr_dfrm ON entr USING btree (dfrm) WHERE (dfrm IS NOT NULL);


--
-- TOC entry 3243 (class 1259 OID 654216)
-- Name: entr_seq; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE INDEX entr_seq ON entr USING btree (seq);


--
-- TOC entry 3244 (class 1259 OID 654217)
-- Name: entr_stat; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE INDEX entr_stat ON entr USING btree (stat) WHERE (stat <> 2);


--
-- TOC entry 3245 (class 1259 OID 654218)
-- Name: entr_unap; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE INDEX entr_unap ON entr USING btree (unap) WHERE unap;


--
-- TOC entry 3371 (class 1259 OID 654219)
-- Name: entrsnd_snd; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE INDEX entrsnd_snd ON entrsnd USING btree (snd);


--
-- TOC entry 3392 (class 1259 OID 654220)
-- Name: freq_idx1; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX freq_idx1 ON freq USING btree (entr, (COALESCE(rdng, 999)), (COALESCE(kanj, 999)), kw);


--
-- TOC entry 3374 (class 1259 OID 654221)
-- Name: gloss_txt; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE INDEX gloss_txt ON gloss USING btree (txt);


--
-- TOC entry 3375 (class 1259 OID 654222)
-- Name: gloss_txt1; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX gloss_txt1 ON gloss USING btree (entr, sens, lang, txt);


--
-- TOC entry 3376 (class 1259 OID 654223)
-- Name: gloss_txt2; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE INDEX gloss_txt2 ON gloss USING btree (lower((txt)::text) varchar_pattern_ops);


--
-- TOC entry 3377 (class 1259 OID 654224)
-- Name: gloss_txt3; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE INDEX gloss_txt3 ON gloss USING btree (lower((txt)::text));


--
-- TOC entry 3397 (class 1259 OID 654225)
-- Name: grp_kw; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE INDEX grp_kw ON grp USING btree (kw);


--
-- TOC entry 3400 (class 1259 OID 654226)
-- Name: hist_dt; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE INDEX hist_dt ON hist USING btree (dt);


--
-- TOC entry 3401 (class 1259 OID 654227)
-- Name: hist_email; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE INDEX hist_email ON hist USING btree (email);


--
-- TOC entry 3404 (class 1259 OID 654228)
-- Name: hist_userid; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE INDEX hist_userid ON hist USING btree (userid);


--
-- TOC entry 3380 (class 1259 OID 654229)
-- Name: kanj_txt; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE INDEX kanj_txt ON kanj USING btree (txt);


--
-- TOC entry 3381 (class 1259 OID 654230)
-- Name: kanj_txt1; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX kanj_txt1 ON kanj USING btree (entr, txt);


--
-- TOC entry 3382 (class 1259 OID 654231)
-- Name: kanj_txt2; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE INDEX kanj_txt2 ON kanj USING btree (txt varchar_pattern_ops);


--
-- TOC entry 3385 (class 1259 OID 654232)
-- Name: rdng_txt; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE INDEX rdng_txt ON rdng USING btree (txt);


--
-- TOC entry 3386 (class 1259 OID 654233)
-- Name: rdng_txt1; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX rdng_txt1 ON rdng USING btree (entr, txt);


--
-- TOC entry 3387 (class 1259 OID 654234)
-- Name: rdng_txt2; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE INDEX rdng_txt2 ON rdng USING btree (txt varchar_pattern_ops);


--
-- TOC entry 3471 (class 1259 OID 654235)
-- Name: rdngsnd_snd; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE INDEX rdngsnd_snd ON rdngsnd USING btree (snd);


--
-- TOC entry 3482 (class 1259 OID 654236)
-- Name: sndfile_vol; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE INDEX sndfile_vol ON sndfile USING btree (vol);


--
-- TOC entry 3489 (class 1259 OID 654237)
-- Name: xref_xentr; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE INDEX xref_xentr ON xref USING btree (xentr, xsens);


--
-- TOC entry 3490 (class 1259 OID 654238)
-- Name: xresolv_kanj; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE INDEX xresolv_kanj ON xresolv USING btree (ktxt);


--
-- TOC entry 3493 (class 1259 OID 654239)
-- Name: xresolv_rdng; Type: INDEX; Schema: jmdict; Owner: postgres; Tablespace: 
--

CREATE INDEX xresolv_rdng ON xresolv USING btree (rtxt);


SET search_path = jmdict_en, pg_catalog;

--
-- TOC entry 3494 (class 1259 OID 654240)
-- Name: chr_chr_idx; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX chr_chr_idx ON chr USING btree (chr);


--
-- TOC entry 3497 (class 1259 OID 654241)
-- Name: cinf_kw; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE INDEX cinf_kw ON cinf USING btree (kw);


--
-- TOC entry 3500 (class 1259 OID 654242)
-- Name: cinf_val; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE INDEX cinf_val ON cinf USING btree (value);


--
-- TOC entry 3246 (class 1259 OID 654243)
-- Name: entr_dfrm_idx; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE INDEX entr_dfrm_idx ON entr USING btree (dfrm) WHERE (dfrm IS NOT NULL);


--
-- TOC entry 3249 (class 1259 OID 654244)
-- Name: entr_seq_idx; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE INDEX entr_seq_idx ON entr USING btree (seq);


--
-- TOC entry 3250 (class 1259 OID 654245)
-- Name: entr_stat_idx; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE INDEX entr_stat_idx ON entr USING btree (stat) WHERE (stat <> 2);


--
-- TOC entry 3251 (class 1259 OID 654246)
-- Name: entr_unap_idx; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE INDEX entr_unap_idx ON entr USING btree (unap) WHERE unap;


--
-- TOC entry 3517 (class 1259 OID 654247)
-- Name: entrsnd_snd_idx; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE INDEX entrsnd_snd_idx ON entrsnd USING btree (snd);


--
-- TOC entry 3536 (class 1259 OID 654248)
-- Name: freq_entr_coalesce_coalesce1_kw_idx; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX freq_entr_coalesce_coalesce1_kw_idx ON freq USING btree (entr, (COALESCE((rdng)::integer, 999)), (COALESCE((kanj)::integer, 999)), kw);


--
-- TOC entry 3518 (class 1259 OID 654249)
-- Name: gloss_entr_sens_lang_txt_idx; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX gloss_entr_sens_lang_txt_idx ON gloss USING btree (entr, sens, lang, txt);


--
-- TOC entry 3519 (class 1259 OID 654250)
-- Name: gloss_lower_idx; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE INDEX gloss_lower_idx ON gloss USING btree (lower((txt)::text) varchar_pattern_ops);


--
-- TOC entry 3520 (class 1259 OID 654251)
-- Name: gloss_lower_idx1; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE INDEX gloss_lower_idx1 ON gloss USING btree (lower((txt)::text));


--
-- TOC entry 3523 (class 1259 OID 654252)
-- Name: gloss_txt_idx; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE INDEX gloss_txt_idx ON gloss USING btree (txt);


--
-- TOC entry 3543 (class 1259 OID 654260)
-- Name: grp_kw; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE INDEX grp_kw ON grp USING btree (kw);


--
-- TOC entry 3546 (class 1259 OID 654261)
-- Name: hist_dt_idx; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE INDEX hist_dt_idx ON hist USING btree (dt);


--
-- TOC entry 3547 (class 1259 OID 654262)
-- Name: hist_email_idx; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE INDEX hist_email_idx ON hist USING btree (email);


--
-- TOC entry 3550 (class 1259 OID 654263)
-- Name: hist_userid_idx; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE INDEX hist_userid_idx ON hist USING btree (userid);


--
-- TOC entry 3524 (class 1259 OID 654264)
-- Name: kanj_entr_txt_idx; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX kanj_entr_txt_idx ON kanj USING btree (entr, txt);


--
-- TOC entry 3527 (class 1259 OID 654266)
-- Name: kanj_txt_idx; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE INDEX kanj_txt_idx ON kanj USING btree (txt);


--
-- TOC entry 3528 (class 1259 OID 654268)
-- Name: kanj_txt_idx1; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE INDEX kanj_txt_idx1 ON kanj USING btree (txt varchar_pattern_ops);


--
-- TOC entry 3529 (class 1259 OID 654269)
-- Name: rdng_entr_txt_idx; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX rdng_entr_txt_idx ON rdng USING btree (entr, txt);


--
-- TOC entry 3532 (class 1259 OID 654276)
-- Name: rdng_txt_idx; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE INDEX rdng_txt_idx ON rdng USING btree (txt);


--
-- TOC entry 3533 (class 1259 OID 654282)
-- Name: rdng_txt_idx1; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE INDEX rdng_txt_idx1 ON rdng USING btree (txt varchar_pattern_ops);


--
-- TOC entry 3621 (class 1259 OID 654283)
-- Name: rdngsnd_snd; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE INDEX rdngsnd_snd ON rdngsnd USING btree (snd);


--
-- TOC entry 3632 (class 1259 OID 654284)
-- Name: sndfile_vol_idx; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE INDEX sndfile_vol_idx ON sndfile USING btree (vol);


--
-- TOC entry 3639 (class 1259 OID 654285)
-- Name: xref_xentr_xsens_idx; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE INDEX xref_xentr_xsens_idx ON xref USING btree (xentr, xsens);


--
-- TOC entry 3640 (class 1259 OID 654286)
-- Name: xresolv_kanj; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE INDEX xresolv_kanj ON xresolv USING btree (ktxt);


--
-- TOC entry 3643 (class 1259 OID 654287)
-- Name: xresolv_rdng; Type: INDEX; Schema: jmdict_en; Owner: postgres; Tablespace: 
--

CREATE INDEX xresolv_rdng ON xresolv USING btree (rtxt);


SET search_path = kanjidic2, pg_catalog;

--
-- TOC entry 3656 (class 1259 OID 654288)
-- Name: index_kanji_id; Type: INDEX; Schema: kanjidic2; Owner: postgres; Tablespace: 
--

CREATE INDEX index_kanji_id ON jouyou USING btree (kanji_id);


SET search_path = core, pg_catalog;

--
-- TOC entry 4141 (class 2618 OID 654289)
-- Name: _RETURN; Type: RULE; Schema: core; Owner: postgres
--

CREATE RULE "_RETURN" AS
    ON SELECT TO v_ilo DO INSTEAD  WITH v_mtm_ilo_kanji AS (
         SELECT a_1.id,
            a_1.ilo_id,
            b_1.kanji
           FROM (mtm_ilo_kanji a_1
             LEFT JOIN ilo_kanji b_1 ON ((a_1.ilo_kanji_id = b_1.id)))
        )
 SELECT a.word_romaji AS romaji,
    a.word AS txt,
    a.word_pos AS pos,
    a.word_translation AS gloss,
    a.comment,
    a.word_reading AS rdng,
    a.id,
    a.with_jmdict,
    count(b.id) AS kanji_count,
    array_to_string(array_agg(b.kanji ORDER BY b.id), ' / '::text) AS ktxt_kanjis
   FROM (ilo a
     LEFT JOIN v_mtm_ilo_kanji b ON ((a.id = b.ilo_id)))
  GROUP BY a.id;


--
-- TOC entry 4142 (class 2618 OID 654291)
-- Name: _RETURN; Type: RULE; Schema: core; Owner: postgres
--

CREATE RULE "_RETURN" AS
    ON SELECT TO v_core_6k DO INSTEAD  WITH v_mtm_core_6k_kanji AS (
         SELECT a_1.id,
            a_1.core_6k_id,
            b_1.kanji
           FROM (mtm_core_6k_kanji a_1
             LEFT JOIN core_6k_kanji b_1 ON ((a_1.core_6k_kanji_id = b_1.id)))
        )
 SELECT a.word,
    a.word_reading,
    a.word_furigana,
    a.word_romaji,
    a.word_translation,
    a.word_pos,
    a.word_audio,
    a.sentence,
    a.sentence_reading,
    a.sentence_furigana,
    a.sentence_romaji,
    a.sentence_translation,
    a.sentence_audio,
    a.sentence_picture,
    a.id,
    a.with_jmdict,
    count(b.id) AS kanji_count,
    array_to_string(array_agg(b.kanji ORDER BY b.id), ' / '::text) AS ktxt_kanjis
   FROM (core_6k a
     LEFT JOIN v_mtm_core_6k_kanji b ON ((a.id = b.core_6k_id)))
  GROUP BY a.id;


--
-- TOC entry 4143 (class 2618 OID 654293)
-- Name: _RETURN; Type: RULE; Schema: core; Owner: postgres
--

CREATE RULE "_RETURN" AS
    ON SELECT TO v_core_10k DO INSTEAD  WITH v_mtm_core_10k_kanji AS (
         SELECT a_1.id,
            a_1.core_10k_id,
            b_1.kanji
           FROM (mtm_core_10k_kanji a_1
             LEFT JOIN core_10k_kanji b_1 ON ((a_1.core_10k_kanji_id = b_1.id)))
        )
 SELECT a.word,
    a.word_reading,
    a.sentence,
    a.sentence_audio,
    a.word_audio,
    a.word_translation,
    a.mnemonic,
    a.master_index,
    a.level,
    a.sentence_reading,
    a.sentence_translation,
    a.word_alt_def,
    a.id,
    a.with_jmdict,
    count(b.id) AS kanji_count,
    array_to_string(array_agg(b.kanji ORDER BY b.id), ' / '::text) AS ktxt_kanjis
   FROM (core_10k a
     LEFT JOIN v_mtm_core_10k_kanji b ON ((a.id = b.core_10k_id)))
  GROUP BY a.id;


SET search_path = public, pg_catalog;

--
-- TOC entry 4144 (class 2618 OID 654295)
-- Name: r_hiragana_dele_not_allowed; Type: RULE; Schema: public; Owner: postgres
--

CREATE RULE r_hiragana_dele_not_allowed AS
    ON DELETE TO hiragana DO INSTEAD NOTHING;


SET search_path = jmdict, pg_catalog;

--
-- TOC entry 3943 (class 2620 OID 654296)
-- Name: entr_seqdef; Type: TRIGGER; Schema: jmdict; Owner: postgres
--

CREATE TRIGGER entr_seqdef BEFORE INSERT ON entr FOR EACH ROW EXECUTE PROCEDURE entr_seqdef();


--
-- TOC entry 3945 (class 2620 OID 654297)
-- Name: kwsrc_updseq; Type: TRIGGER; Schema: jmdict; Owner: postgres
--

CREATE TRIGGER kwsrc_updseq AFTER INSERT OR DELETE OR UPDATE ON kwsrc FOR EACH ROW EXECUTE PROCEDURE kwsrc_updseq();


SET search_path = jmdict_en, pg_catalog;

--
-- TOC entry 3944 (class 2620 OID 654298)
-- Name: entr_seqdef; Type: TRIGGER; Schema: jmdict_en; Owner: postgres
--

CREATE TRIGGER entr_seqdef BEFORE INSERT ON entr FOR EACH ROW EXECUTE PROCEDURE entr_seqdef();


--
-- TOC entry 3946 (class 2620 OID 654299)
-- Name: kwsrc_updseq; Type: TRIGGER; Schema: jmdict_en; Owner: postgres
--

CREATE TRIGGER kwsrc_updseq AFTER INSERT OR DELETE OR UPDATE ON kwsrc FOR EACH ROW EXECUTE PROCEDURE kwsrc_updseq();


SET search_path = ac, pg_catalog;

--
-- TOC entry 3775 (class 2606 OID 655625)
-- Name: fk_authority_name; Type: FK CONSTRAINT; Schema: ac; Owner: postgres
--

ALTER TABLE ONLY user_authority
    ADD CONSTRAINT fk_authority_name FOREIGN KEY (name) REFERENCES authority(name) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 3772 (class 2606 OID 655605)
-- Name: fk_event_persistent_audit_event_data; Type: FK CONSTRAINT; Schema: ac; Owner: postgres
--

ALTER TABLE ONLY persistent_audit_event_data
    ADD CONSTRAINT fk_event_persistent_audit_event_data FOREIGN KEY (event_id) REFERENCES persistent_audit_event(event_id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3773 (class 2606 OID 654310)
-- Name: fk_user_has_created_0_m_users; Type: FK CONSTRAINT; Schema: ac; Owner: postgres
--

ALTER TABLE ONLY "user"
    ADD CONSTRAINT fk_user_has_created_0_m_users FOREIGN KEY (created_by) REFERENCES "user"(login) MATCH FULL ON UPDATE CASCADE ON DELETE SET NULL;


--
-- TOC entry 3774 (class 2606 OID 655615)
-- Name: fk_user_login; Type: FK CONSTRAINT; Schema: ac; Owner: postgres
--

ALTER TABLE ONLY user_authority
    ADD CONSTRAINT fk_user_login FOREIGN KEY (login) REFERENCES "user"(login) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = core, pg_catalog;

--
-- TOC entry 3776 (class 2606 OID 654325)
-- Name: fk_core_10k_kanji_mtm_core_10k_kanji; Type: FK CONSTRAINT; Schema: core; Owner: postgres
--

ALTER TABLE ONLY mtm_core_10k_kanji
    ADD CONSTRAINT fk_core_10k_kanji_mtm_core_10k_kanji FOREIGN KEY (core_10k_kanji_id) REFERENCES core_10k_kanji(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3777 (class 2606 OID 654330)
-- Name: fk_core_10k_mtm_core_10k_kanji; Type: FK CONSTRAINT; Schema: core; Owner: postgres
--

ALTER TABLE ONLY mtm_core_10k_kanji
    ADD CONSTRAINT fk_core_10k_mtm_core_10k_kanji FOREIGN KEY (core_10k_id) REFERENCES core_10k(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3778 (class 2606 OID 654335)
-- Name: fk_core_6k_kanji_mtm_core_6k_kanji; Type: FK CONSTRAINT; Schema: core; Owner: postgres
--

ALTER TABLE ONLY mtm_core_6k_kanji
    ADD CONSTRAINT fk_core_6k_kanji_mtm_core_6k_kanji FOREIGN KEY (core_6k_kanji_id) REFERENCES core_6k_kanji(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3779 (class 2606 OID 654340)
-- Name: fk_core_6k_mtm_core_6k_kanji; Type: FK CONSTRAINT; Schema: core; Owner: postgres
--

ALTER TABLE ONLY mtm_core_6k_kanji
    ADD CONSTRAINT fk_core_6k_mtm_core_6k_kanji FOREIGN KEY (core_6k_id) REFERENCES core_6k(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3780 (class 2606 OID 654345)
-- Name: fk_ilo_kanji_mtm_ilo_kanji; Type: FK CONSTRAINT; Schema: core; Owner: postgres
--

ALTER TABLE ONLY mtm_ilo_kanji
    ADD CONSTRAINT fk_ilo_kanji_mtm_ilo_kanji FOREIGN KEY (ilo_kanji_id) REFERENCES ilo_kanji(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3781 (class 2606 OID 654350)
-- Name: mtm_ilo_kanji; Type: FK CONSTRAINT; Schema: core; Owner: postgres
--

ALTER TABLE ONLY mtm_ilo_kanji
    ADD CONSTRAINT mtm_ilo_kanji FOREIGN KEY (ilo_id) REFERENCES ilo(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = estwn, pg_catalog;

--
-- TOC entry 3782 (class 2606 OID 654355)
-- Name: fk_variant_example; Type: FK CONSTRAINT; Schema: estwn; Owner: postgres
--

ALTER TABLE ONLY example
    ADD CONSTRAINT fk_variant_example FOREIGN KEY (variant_id) REFERENCES variant(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3783 (class 2606 OID 654360)
-- Name: fk_word_meaning_variant; Type: FK CONSTRAINT; Schema: estwn; Owner: postgres
--

ALTER TABLE ONLY variant
    ADD CONSTRAINT fk_word_meaning_variant FOREIGN KEY (word_meaning_id) REFERENCES word_meaning(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = freq, pg_catalog;

--
-- TOC entry 3784 (class 2606 OID 654365)
-- Name: fk_kanji_mtm_nres; Type: FK CONSTRAINT; Schema: freq; Owner: postgres
--

ALTER TABLE ONLY mtm_nres_kanji
    ADD CONSTRAINT fk_kanji_mtm_nres FOREIGN KEY (nres_kanji_id) REFERENCES nres_kanji(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3785 (class 2606 OID 654370)
-- Name: fk_nres_mtm_kanji; Type: FK CONSTRAINT; Schema: freq; Owner: postgres
--

ALTER TABLE ONLY mtm_nres_kanji
    ADD CONSTRAINT fk_nres_mtm_kanji FOREIGN KEY (nres_id) REFERENCES jp_nres_base_aggr(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3786 (class 2606 OID 654375)
-- Name: fk_nres_mtm_kanjidic2_kanji; Type: FK CONSTRAINT; Schema: freq; Owner: postgres
--

ALTER TABLE ONLY mtm_nres_kanji
    ADD CONSTRAINT fk_nres_mtm_kanjidic2_kanji FOREIGN KEY (kanji_id) REFERENCES kanjidic2.kanji(id) MATCH FULL ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 3941 (class 2606 OID 655448)
-- Name: fk_tofu_sentence_tofu_sentence_translation; Type: FK CONSTRAINT; Schema: freq; Owner: postgres
--

ALTER TABLE ONLY tofu_sentence_translation
    ADD CONSTRAINT fk_tofu_sentence_tofu_sentence_translation FOREIGN KEY (tofu_sentence_id) REFERENCES tofu_sentence(id) MATCH FULL ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 3942 (class 2606 OID 655477)
-- Name: fk_user_tofu_sentence_translation; Type: FK CONSTRAINT; Schema: freq; Owner: postgres
--

ALTER TABLE ONLY tofu_sentence_translation
    ADD CONSTRAINT fk_user_tofu_sentence_translation FOREIGN KEY (created_by) REFERENCES ac."user"(login) MATCH FULL ON UPDATE CASCADE ON DELETE SET NULL;


SET search_path = heisig, pg_catalog;

--
-- TOC entry 3788 (class 2606 OID 654380)
-- Name: fk_heisig6_has_1_kanji; Type: FK CONSTRAINT; Schema: heisig; Owner: postgres
--

ALTER TABLE ONLY heisig6
    ADD CONSTRAINT fk_heisig6_has_1_kanji FOREIGN KEY (kanji_id) REFERENCES kanjidic2.kanji(id) MATCH FULL ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 3787 (class 2606 OID 654392)
-- Name: fk_kanji_has_0_1_heisig4; Type: FK CONSTRAINT; Schema: heisig; Owner: postgres
--

ALTER TABLE ONLY heisig4
    ADD CONSTRAINT fk_kanji_has_0_1_heisig4 FOREIGN KEY (kanji) REFERENCES kanjidic2.kanji(literal) MATCH FULL ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 3789 (class 2606 OID 654397)
-- Name: fk_kanji_has_0_1_heisig6; Type: FK CONSTRAINT; Schema: heisig; Owner: postgres
--

ALTER TABLE ONLY heisig6
    ADD CONSTRAINT fk_kanji_has_0_1_heisig6 FOREIGN KEY (kanji) REFERENCES kanjidic2.kanji(literal) MATCH FULL ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 3790 (class 2606 OID 654402)
-- Name: fk_kanji_has_0_m_koohii_story; Type: FK CONSTRAINT; Schema: heisig; Owner: postgres
--

ALTER TABLE ONLY koohii_story
    ADD CONSTRAINT fk_kanji_has_0_m_koohii_story FOREIGN KEY (kanji) REFERENCES kanjidic2.kanji(literal) MATCH FULL ON UPDATE CASCADE ON DELETE RESTRICT;


SET search_path = jmdict, pg_catalog;

--
-- TOC entry 3800 (class 2606 OID 654407)
-- Name: chr_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY chr
    ADD CONSTRAINT chr_entr_fkey FOREIGN KEY (entr) REFERENCES entr(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3801 (class 2606 OID 654412)
-- Name: chr_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY cinf
    ADD CONSTRAINT chr_entr_fkey FOREIGN KEY (entr) REFERENCES chr(entr) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3802 (class 2606 OID 654417)
-- Name: chr_kw_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY cinf
    ADD CONSTRAINT chr_kw_fkey FOREIGN KEY (kw) REFERENCES kwcinf(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3803 (class 2606 OID 654422)
-- Name: dial_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY dial
    ADD CONSTRAINT dial_entr_fkey FOREIGN KEY (entr, sens) REFERENCES sens(entr, sens) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3804 (class 2606 OID 654427)
-- Name: dial_kw_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY dial
    ADD CONSTRAINT dial_kw_fkey FOREIGN KEY (kw) REFERENCES kwdial(id);


--
-- TOC entry 3766 (class 2606 OID 654432)
-- Name: entr_dfrm_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY entr
    ADD CONSTRAINT entr_dfrm_fkey FOREIGN KEY (dfrm) REFERENCES entr(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3767 (class 2606 OID 654437)
-- Name: entr_src_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY entr
    ADD CONSTRAINT entr_src_fkey FOREIGN KEY (src) REFERENCES kwsrc(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3768 (class 2606 OID 654442)
-- Name: entr_stat_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY entr
    ADD CONSTRAINT entr_stat_fkey FOREIGN KEY (stat) REFERENCES kwstat(id);


--
-- TOC entry 3805 (class 2606 OID 654448)
-- Name: entrsnd_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY entrsnd
    ADD CONSTRAINT entrsnd_entr_fkey FOREIGN KEY (snd) REFERENCES snd(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3806 (class 2606 OID 654453)
-- Name: entrsnd_entr_fkey1; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY entrsnd
    ADD CONSTRAINT entrsnd_entr_fkey1 FOREIGN KEY (entr) REFERENCES entr(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3815 (class 2606 OID 654458)
-- Name: fld_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY fld
    ADD CONSTRAINT fld_entr_fkey FOREIGN KEY (entr, sens) REFERENCES sens(entr, sens) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3816 (class 2606 OID 654463)
-- Name: fld_kw_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY fld
    ADD CONSTRAINT fld_kw_fkey FOREIGN KEY (kw) REFERENCES kwfld(id);


--
-- TOC entry 3812 (class 2606 OID 654468)
-- Name: freq_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY freq
    ADD CONSTRAINT freq_entr_fkey FOREIGN KEY (entr, kanj) REFERENCES kanj(entr, kanj) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3813 (class 2606 OID 654474)
-- Name: freq_entr_fkey1; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY freq
    ADD CONSTRAINT freq_entr_fkey1 FOREIGN KEY (entr, rdng) REFERENCES rdng(entr, rdng) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3814 (class 2606 OID 654479)
-- Name: freq_kw_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY freq
    ADD CONSTRAINT freq_kw_fkey FOREIGN KEY (kw) REFERENCES kwfreq(id);


--
-- TOC entry 3807 (class 2606 OID 654484)
-- Name: gloss_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY gloss
    ADD CONSTRAINT gloss_entr_fkey FOREIGN KEY (entr, sens) REFERENCES sens(entr, sens) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3808 (class 2606 OID 654489)
-- Name: gloss_lang_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY gloss
    ADD CONSTRAINT gloss_lang_fkey FOREIGN KEY (lang) REFERENCES kwlang(id);


--
-- TOC entry 3817 (class 2606 OID 654494)
-- Name: grp_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY grp
    ADD CONSTRAINT grp_entr_fkey FOREIGN KEY (entr) REFERENCES entr(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3818 (class 2606 OID 654499)
-- Name: grp_kw_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY grp
    ADD CONSTRAINT grp_kw_fkey FOREIGN KEY (kw) REFERENCES kwgrp(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3819 (class 2606 OID 654504)
-- Name: hist_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY hist
    ADD CONSTRAINT hist_entr_fkey FOREIGN KEY (entr) REFERENCES entr(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3820 (class 2606 OID 654509)
-- Name: hist_stat_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY hist
    ADD CONSTRAINT hist_stat_fkey FOREIGN KEY (stat) REFERENCES kwstat(id);


--
-- TOC entry 3809 (class 2606 OID 654514)
-- Name: kanj_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY kanj
    ADD CONSTRAINT kanj_entr_fkey FOREIGN KEY (entr) REFERENCES entr(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3821 (class 2606 OID 654519)
-- Name: kinf_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY kinf
    ADD CONSTRAINT kinf_entr_fkey FOREIGN KEY (entr, kanj) REFERENCES kanj(entr, kanj) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3822 (class 2606 OID 654524)
-- Name: kinf_kw_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY kinf
    ADD CONSTRAINT kinf_kw_fkey FOREIGN KEY (kw) REFERENCES kwkinf(id);


--
-- TOC entry 3823 (class 2606 OID 654529)
-- Name: kresolv_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY kresolv
    ADD CONSTRAINT kresolv_entr_fkey FOREIGN KEY (entr) REFERENCES entr(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3824 (class 2606 OID 654534)
-- Name: lsrc_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY lsrc
    ADD CONSTRAINT lsrc_entr_fkey FOREIGN KEY (entr, sens) REFERENCES sens(entr, sens) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3825 (class 2606 OID 654539)
-- Name: lsrc_lang_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY lsrc
    ADD CONSTRAINT lsrc_lang_fkey FOREIGN KEY (lang) REFERENCES kwlang(id);


--
-- TOC entry 3826 (class 2606 OID 654544)
-- Name: misc_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY misc
    ADD CONSTRAINT misc_entr_fkey FOREIGN KEY (entr, sens) REFERENCES sens(entr, sens) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3827 (class 2606 OID 654549)
-- Name: misc_kw_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY misc
    ADD CONSTRAINT misc_kw_fkey FOREIGN KEY (kw) REFERENCES kwmisc(id);


--
-- TOC entry 3828 (class 2606 OID 654554)
-- Name: pos_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY pos
    ADD CONSTRAINT pos_entr_fkey FOREIGN KEY (entr, sens) REFERENCES sens(entr, sens) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3829 (class 2606 OID 654559)
-- Name: pos_kw_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY pos
    ADD CONSTRAINT pos_kw_fkey FOREIGN KEY (kw) REFERENCES kwpos(id);


--
-- TOC entry 3810 (class 2606 OID 654564)
-- Name: rdng_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY rdng
    ADD CONSTRAINT rdng_entr_fkey FOREIGN KEY (entr) REFERENCES entr(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3830 (class 2606 OID 654569)
-- Name: rdngsnd_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY rdngsnd
    ADD CONSTRAINT rdngsnd_entr_fkey FOREIGN KEY (snd) REFERENCES snd(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3831 (class 2606 OID 654574)
-- Name: rdngsnd_entr_fkey1; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY rdngsnd
    ADD CONSTRAINT rdngsnd_entr_fkey1 FOREIGN KEY (entr, rdng) REFERENCES rdng(entr, rdng) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3832 (class 2606 OID 654579)
-- Name: restr_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY restr
    ADD CONSTRAINT restr_entr_fkey FOREIGN KEY (entr, rdng) REFERENCES rdng(entr, rdng) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3833 (class 2606 OID 654584)
-- Name: restr_entr_fkey1; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY restr
    ADD CONSTRAINT restr_entr_fkey1 FOREIGN KEY (entr, kanj) REFERENCES kanj(entr, kanj) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3834 (class 2606 OID 654589)
-- Name: rinf_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY rinf
    ADD CONSTRAINT rinf_entr_fkey FOREIGN KEY (entr, rdng) REFERENCES rdng(entr, rdng) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3835 (class 2606 OID 654594)
-- Name: rinf_kw_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY rinf
    ADD CONSTRAINT rinf_kw_fkey FOREIGN KEY (kw) REFERENCES kwrinf(id);


--
-- TOC entry 3811 (class 2606 OID 654599)
-- Name: sens_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY sens
    ADD CONSTRAINT sens_entr_fkey FOREIGN KEY (entr) REFERENCES entr(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3838 (class 2606 OID 654604)
-- Name: snd_file_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY snd
    ADD CONSTRAINT snd_file_fkey FOREIGN KEY (file) REFERENCES sndfile(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3839 (class 2606 OID 654609)
-- Name: sndfile_vol_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY sndfile
    ADD CONSTRAINT sndfile_vol_fkey FOREIGN KEY (vol) REFERENCES sndvol(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3840 (class 2606 OID 654614)
-- Name: sndvol_corp_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY sndvol
    ADD CONSTRAINT sndvol_corp_fkey FOREIGN KEY (corp) REFERENCES kwsrc(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3836 (class 2606 OID 654619)
-- Name: stagk_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY stagk
    ADD CONSTRAINT stagk_entr_fkey FOREIGN KEY (entr, sens) REFERENCES sens(entr, sens) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3837 (class 2606 OID 654624)
-- Name: stagk_entr_fkey1; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY stagk
    ADD CONSTRAINT stagk_entr_fkey1 FOREIGN KEY (entr, kanj) REFERENCES kanj(entr, kanj) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3841 (class 2606 OID 654629)
-- Name: stagr_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY stagr
    ADD CONSTRAINT stagr_entr_fkey FOREIGN KEY (entr, sens) REFERENCES sens(entr, sens) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3842 (class 2606 OID 654634)
-- Name: stagr_entr_fkey1; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY stagr
    ADD CONSTRAINT stagr_entr_fkey1 FOREIGN KEY (entr, rdng) REFERENCES rdng(entr, rdng) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3843 (class 2606 OID 654639)
-- Name: xref_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY xref
    ADD CONSTRAINT xref_entr_fkey FOREIGN KEY (entr, sens) REFERENCES sens(entr, sens) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3844 (class 2606 OID 654644)
-- Name: xref_kanj_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY xref
    ADD CONSTRAINT xref_kanj_fkey FOREIGN KEY (xentr, kanj) REFERENCES kanj(entr, kanj) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3845 (class 2606 OID 654649)
-- Name: xref_rdng_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY xref
    ADD CONSTRAINT xref_rdng_fkey FOREIGN KEY (xentr, rdng) REFERENCES rdng(entr, rdng) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3846 (class 2606 OID 654654)
-- Name: xref_typ_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY xref
    ADD CONSTRAINT xref_typ_fkey FOREIGN KEY (typ) REFERENCES kwxref(id);


--
-- TOC entry 3847 (class 2606 OID 654659)
-- Name: xref_xentr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY xref
    ADD CONSTRAINT xref_xentr_fkey FOREIGN KEY (xentr, xsens) REFERENCES sens(entr, sens) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3848 (class 2606 OID 654664)
-- Name: xresolv_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY xresolv
    ADD CONSTRAINT xresolv_entr_fkey FOREIGN KEY (entr, sens) REFERENCES sens(entr, sens) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3849 (class 2606 OID 654669)
-- Name: xresolv_typ_fkey; Type: FK CONSTRAINT; Schema: jmdict; Owner: postgres
--

ALTER TABLE ONLY xresolv
    ADD CONSTRAINT xresolv_typ_fkey FOREIGN KEY (typ) REFERENCES kwxref(id);


SET search_path = jmdict_en, pg_catalog;

--
-- TOC entry 3850 (class 2606 OID 654674)
-- Name: chr_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY chr
    ADD CONSTRAINT chr_entr_fkey FOREIGN KEY (entr) REFERENCES entr(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3851 (class 2606 OID 654679)
-- Name: cinf_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY cinf
    ADD CONSTRAINT cinf_entr_fkey FOREIGN KEY (entr) REFERENCES chr(entr) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3852 (class 2606 OID 654684)
-- Name: cinf_kw_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY cinf
    ADD CONSTRAINT cinf_kw_fkey FOREIGN KEY (kw) REFERENCES kwcinf(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3853 (class 2606 OID 654689)
-- Name: conjo_conj_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY conjo
    ADD CONSTRAINT conjo_conj_fkey FOREIGN KEY (conj) REFERENCES conj(id) ON UPDATE CASCADE;


--
-- TOC entry 3856 (class 2606 OID 654694)
-- Name: conjo_notes_note_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY conjo_notes
    ADD CONSTRAINT conjo_notes_note_fkey FOREIGN KEY (note) REFERENCES conotes(id) ON UPDATE CASCADE;


--
-- TOC entry 3857 (class 2606 OID 654699)
-- Name: conjo_notes_pos_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY conjo_notes
    ADD CONSTRAINT conjo_notes_pos_fkey FOREIGN KEY (pos, conj, neg, fml, onum) REFERENCES conjo(pos, conj, neg, fml, onum) ON UPDATE CASCADE;


--
-- TOC entry 3854 (class 2606 OID 654704)
-- Name: conjo_pos2_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY conjo
    ADD CONSTRAINT conjo_pos2_fkey FOREIGN KEY (pos2) REFERENCES kwpos(id) ON UPDATE CASCADE;


--
-- TOC entry 3855 (class 2606 OID 654709)
-- Name: conjo_pos_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY conjo
    ADD CONSTRAINT conjo_pos_fkey FOREIGN KEY (pos) REFERENCES kwpos(id) ON UPDATE CASCADE;


--
-- TOC entry 3858 (class 2606 OID 654714)
-- Name: dial_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY dial
    ADD CONSTRAINT dial_entr_fkey FOREIGN KEY (entr, sens) REFERENCES sens(entr, sens) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3859 (class 2606 OID 654719)
-- Name: dial_kw_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY dial
    ADD CONSTRAINT dial_kw_fkey FOREIGN KEY (kw) REFERENCES kwdial(id);


--
-- TOC entry 3769 (class 2606 OID 654724)
-- Name: entr_dfrm_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY entr
    ADD CONSTRAINT entr_dfrm_fkey FOREIGN KEY (dfrm) REFERENCES entr(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3770 (class 2606 OID 654729)
-- Name: entr_src_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY entr
    ADD CONSTRAINT entr_src_fkey FOREIGN KEY (src) REFERENCES kwsrc(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3771 (class 2606 OID 654734)
-- Name: entr_stat_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY entr
    ADD CONSTRAINT entr_stat_fkey FOREIGN KEY (stat) REFERENCES kwstat(id);


--
-- TOC entry 3860 (class 2606 OID 654739)
-- Name: entrsnd_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY entrsnd
    ADD CONSTRAINT entrsnd_entr_fkey FOREIGN KEY (entr) REFERENCES entr(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3861 (class 2606 OID 654744)
-- Name: entrsnd_snd_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY entrsnd
    ADD CONSTRAINT entrsnd_snd_fkey FOREIGN KEY (snd) REFERENCES snd(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3870 (class 2606 OID 654749)
-- Name: fld_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY fld
    ADD CONSTRAINT fld_entr_fkey FOREIGN KEY (entr, sens) REFERENCES sens(entr, sens) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3871 (class 2606 OID 654754)
-- Name: fld_kw_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY fld
    ADD CONSTRAINT fld_kw_fkey FOREIGN KEY (kw) REFERENCES kwfld(id);


--
-- TOC entry 3867 (class 2606 OID 654759)
-- Name: freq_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY freq
    ADD CONSTRAINT freq_entr_fkey FOREIGN KEY (entr, rdng) REFERENCES rdng(entr, rdng) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3868 (class 2606 OID 654764)
-- Name: freq_entr_fkey1; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY freq
    ADD CONSTRAINT freq_entr_fkey1 FOREIGN KEY (entr, kanj) REFERENCES kanj(entr, kanj) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3869 (class 2606 OID 654769)
-- Name: freq_kw_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY freq
    ADD CONSTRAINT freq_kw_fkey FOREIGN KEY (kw) REFERENCES kwfreq(id);


--
-- TOC entry 3862 (class 2606 OID 654774)
-- Name: gloss_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY gloss
    ADD CONSTRAINT gloss_entr_fkey FOREIGN KEY (entr, sens) REFERENCES sens(entr, sens) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3863 (class 2606 OID 654779)
-- Name: gloss_lang_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY gloss
    ADD CONSTRAINT gloss_lang_fkey FOREIGN KEY (lang) REFERENCES kwlang(id);


--
-- TOC entry 3872 (class 2606 OID 654784)
-- Name: grp_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY grp
    ADD CONSTRAINT grp_entr_fkey FOREIGN KEY (entr) REFERENCES entr(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3873 (class 2606 OID 654789)
-- Name: grp_kw_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY grp
    ADD CONSTRAINT grp_kw_fkey FOREIGN KEY (kw) REFERENCES kwgrp(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3874 (class 2606 OID 654794)
-- Name: hist_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY hist
    ADD CONSTRAINT hist_entr_fkey FOREIGN KEY (entr) REFERENCES entr(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3875 (class 2606 OID 654799)
-- Name: hist_stat_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY hist
    ADD CONSTRAINT hist_stat_fkey FOREIGN KEY (stat) REFERENCES kwstat(id);


--
-- TOC entry 3864 (class 2606 OID 654804)
-- Name: kanj_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY kanj
    ADD CONSTRAINT kanj_entr_fkey FOREIGN KEY (entr) REFERENCES entr(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3876 (class 2606 OID 654809)
-- Name: kinf_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY kinf
    ADD CONSTRAINT kinf_entr_fkey FOREIGN KEY (entr, kanj) REFERENCES kanj(entr, kanj) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3877 (class 2606 OID 654814)
-- Name: kinf_kw_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY kinf
    ADD CONSTRAINT kinf_kw_fkey FOREIGN KEY (kw) REFERENCES kwkinf(id);


--
-- TOC entry 3878 (class 2606 OID 654819)
-- Name: kresolv_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY kresolv
    ADD CONSTRAINT kresolv_entr_fkey FOREIGN KEY (entr) REFERENCES entr(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3879 (class 2606 OID 654824)
-- Name: kwsrc_srct_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY kwsrc
    ADD CONSTRAINT kwsrc_srct_fkey FOREIGN KEY (srct) REFERENCES kwsrct(id);


--
-- TOC entry 3880 (class 2606 OID 654829)
-- Name: lsrc_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY lsrc
    ADD CONSTRAINT lsrc_entr_fkey FOREIGN KEY (entr, sens) REFERENCES sens(entr, sens) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3881 (class 2606 OID 654834)
-- Name: lsrc_lang_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY lsrc
    ADD CONSTRAINT lsrc_lang_fkey FOREIGN KEY (lang) REFERENCES kwlang(id);


--
-- TOC entry 3882 (class 2606 OID 654839)
-- Name: misc_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY misc
    ADD CONSTRAINT misc_entr_fkey FOREIGN KEY (entr, sens) REFERENCES sens(entr, sens) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3883 (class 2606 OID 654844)
-- Name: misc_kw_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY misc
    ADD CONSTRAINT misc_kw_fkey FOREIGN KEY (kw) REFERENCES kwmisc(id);


--
-- TOC entry 3884 (class 2606 OID 654849)
-- Name: pos_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY pos
    ADD CONSTRAINT pos_entr_fkey FOREIGN KEY (entr, sens) REFERENCES sens(entr, sens) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3885 (class 2606 OID 654854)
-- Name: pos_kw_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY pos
    ADD CONSTRAINT pos_kw_fkey FOREIGN KEY (kw) REFERENCES kwpos(id);


--
-- TOC entry 3865 (class 2606 OID 654859)
-- Name: rdng_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY rdng
    ADD CONSTRAINT rdng_entr_fkey FOREIGN KEY (entr) REFERENCES entr(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3886 (class 2606 OID 654864)
-- Name: rdngsnd_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY rdngsnd
    ADD CONSTRAINT rdngsnd_entr_fkey FOREIGN KEY (entr, rdng) REFERENCES rdng(entr, rdng) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3887 (class 2606 OID 654869)
-- Name: rdngsnd_snd_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY rdngsnd
    ADD CONSTRAINT rdngsnd_snd_fkey FOREIGN KEY (snd) REFERENCES snd(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3888 (class 2606 OID 654874)
-- Name: restr_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY restr
    ADD CONSTRAINT restr_entr_fkey FOREIGN KEY (entr, rdng) REFERENCES rdng(entr, rdng) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3889 (class 2606 OID 654879)
-- Name: restr_entr_fkey1; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY restr
    ADD CONSTRAINT restr_entr_fkey1 FOREIGN KEY (entr, kanj) REFERENCES kanj(entr, kanj) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3890 (class 2606 OID 654884)
-- Name: rinf_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY rinf
    ADD CONSTRAINT rinf_entr_fkey FOREIGN KEY (entr, rdng) REFERENCES rdng(entr, rdng) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3891 (class 2606 OID 654892)
-- Name: rinf_kw_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY rinf
    ADD CONSTRAINT rinf_kw_fkey FOREIGN KEY (kw) REFERENCES kwrinf(id);


--
-- TOC entry 3866 (class 2606 OID 654897)
-- Name: sens_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY sens
    ADD CONSTRAINT sens_entr_fkey FOREIGN KEY (entr) REFERENCES entr(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3894 (class 2606 OID 654902)
-- Name: snd_file_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY snd
    ADD CONSTRAINT snd_file_fkey FOREIGN KEY (file) REFERENCES sndfile(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3895 (class 2606 OID 654907)
-- Name: sndfile_vol_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY sndfile
    ADD CONSTRAINT sndfile_vol_fkey FOREIGN KEY (vol) REFERENCES sndvol(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3896 (class 2606 OID 654912)
-- Name: sndvol_corp_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY sndvol
    ADD CONSTRAINT sndvol_corp_fkey FOREIGN KEY (corp) REFERENCES kwsrc(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3892 (class 2606 OID 654917)
-- Name: stagk_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY stagk
    ADD CONSTRAINT stagk_entr_fkey FOREIGN KEY (entr, sens) REFERENCES sens(entr, sens) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3893 (class 2606 OID 654922)
-- Name: stagk_entr_fkey1; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY stagk
    ADD CONSTRAINT stagk_entr_fkey1 FOREIGN KEY (entr, kanj) REFERENCES kanj(entr, kanj) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3897 (class 2606 OID 654927)
-- Name: stagr_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY stagr
    ADD CONSTRAINT stagr_entr_fkey FOREIGN KEY (entr, sens) REFERENCES sens(entr, sens) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3898 (class 2606 OID 654932)
-- Name: stagr_entr_fkey1; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY stagr
    ADD CONSTRAINT stagr_entr_fkey1 FOREIGN KEY (entr, rdng) REFERENCES rdng(entr, rdng) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3899 (class 2606 OID 654937)
-- Name: xref_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY xref
    ADD CONSTRAINT xref_entr_fkey FOREIGN KEY (entr, sens) REFERENCES sens(entr, sens) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3900 (class 2606 OID 654942)
-- Name: xref_kanj_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY xref
    ADD CONSTRAINT xref_kanj_fkey FOREIGN KEY (xentr, kanj) REFERENCES kanj(entr, kanj) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3901 (class 2606 OID 654947)
-- Name: xref_rdng_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY xref
    ADD CONSTRAINT xref_rdng_fkey FOREIGN KEY (xentr, rdng) REFERENCES rdng(entr, rdng) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3902 (class 2606 OID 654952)
-- Name: xref_typ_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY xref
    ADD CONSTRAINT xref_typ_fkey FOREIGN KEY (typ) REFERENCES kwxref(id);


--
-- TOC entry 3903 (class 2606 OID 654957)
-- Name: xref_xentr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY xref
    ADD CONSTRAINT xref_xentr_fkey FOREIGN KEY (xentr, xsens) REFERENCES sens(entr, sens) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3904 (class 2606 OID 654962)
-- Name: xresolv_entr_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY xresolv
    ADD CONSTRAINT xresolv_entr_fkey FOREIGN KEY (entr, sens) REFERENCES sens(entr, sens) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3905 (class 2606 OID 654967)
-- Name: xresolv_typ_fkey; Type: FK CONSTRAINT; Schema: jmdict_en; Owner: postgres
--

ALTER TABLE ONLY xresolv
    ADD CONSTRAINT xresolv_typ_fkey FOREIGN KEY (typ) REFERENCES kwxref(id);


SET search_path = kanjidic2, pg_catalog;

--
-- TOC entry 3791 (class 2606 OID 654972)
-- Name: fk_audio_has_0_1_kanji_reading; Type: FK CONSTRAINT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY kanji_reading
    ADD CONSTRAINT fk_audio_has_0_1_kanji_reading FOREIGN KEY (audio_id) REFERENCES public.audio(id) MATCH FULL ON UPDATE CASCADE ON DELETE SET NULL;


--
-- TOC entry 3792 (class 2606 OID 654977)
-- Name: fk_cf_yomi_type_has_0_m_yomi; Type: FK CONSTRAINT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY kanji_reading
    ADD CONSTRAINT fk_cf_yomi_type_has_0_m_yomi FOREIGN KEY (cf_reading_type_id) REFERENCES cf_reading_type(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3906 (class 2606 OID 654982)
-- Name: fk_classifier_has_0_1_cf_reading_type; Type: FK CONSTRAINT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY cf_reading_type
    ADD CONSTRAINT fk_classifier_has_0_1_cf_reading_type FOREIGN KEY (classifier_id) REFERENCES public.classifier(id) MATCH FULL ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 3793 (class 2606 OID 654987)
-- Name: fk_image_has_0_1_kanji_stroke_diagram; Type: FK CONSTRAINT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY mtm_kanji_image
    ADD CONSTRAINT fk_image_has_0_1_kanji_stroke_diagram FOREIGN KEY (stroke_image_id) REFERENCES public.image(id) MATCH FULL ON UPDATE CASCADE ON DELETE SET NULL;


--
-- TOC entry 3909 (class 2606 OID 654992)
-- Name: fk_jinmei_has_1_kanji; Type: FK CONSTRAINT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY jinmei
    ADD CONSTRAINT fk_jinmei_has_1_kanji FOREIGN KEY (kanji_id) REFERENCES kanji(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3910 (class 2606 OID 654997)
-- Name: fk_jouyou_has_1_kanji; Type: FK CONSTRAINT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY jouyou
    ADD CONSTRAINT fk_jouyou_has_1_kanji FOREIGN KEY (kanji_id) REFERENCES kanji(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3913 (class 2606 OID 655002)
-- Name: fk_kanji_has_0_1_variant; Type: FK CONSTRAINT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY kanji_variant
    ADD CONSTRAINT fk_kanji_has_0_1_variant FOREIGN KEY (kanji_id) REFERENCES kanji(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3911 (class 2606 OID 655007)
-- Name: fk_kanji_has_0_m_meaning; Type: FK CONSTRAINT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY kanji_meaning
    ADD CONSTRAINT fk_kanji_has_0_m_meaning FOREIGN KEY (kanji_id) REFERENCES kanji(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3907 (class 2606 OID 655012)
-- Name: fk_kanji_has_1_m_codepoint; Type: FK CONSTRAINT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY codepoint
    ADD CONSTRAINT fk_kanji_has_1_m_codepoint FOREIGN KEY (kanji_id) REFERENCES kanji(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3908 (class 2606 OID 655017)
-- Name: fk_kanji_has_1_m_dic_number; Type: FK CONSTRAINT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY dic_number
    ADD CONSTRAINT fk_kanji_has_1_m_dic_number FOREIGN KEY (kanji_id) REFERENCES kanji(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3916 (class 2606 OID 655022)
-- Name: fk_kanji_has_1_m_query_code; Type: FK CONSTRAINT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY query_code
    ADD CONSTRAINT fk_kanji_has_1_m_query_code FOREIGN KEY (kanji_id) REFERENCES kanji(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3912 (class 2606 OID 655027)
-- Name: fk_kanji_has_1_m_radical; Type: FK CONSTRAINT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY kanji_radical
    ADD CONSTRAINT fk_kanji_has_1_m_radical FOREIGN KEY (kanji_id) REFERENCES kanji(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3794 (class 2606 OID 655032)
-- Name: fk_kanji_mtm_kanji_image; Type: FK CONSTRAINT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY mtm_kanji_image
    ADD CONSTRAINT fk_kanji_mtm_kanji_image FOREIGN KEY (kanji_id) REFERENCES kanji(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3914 (class 2606 OID 655037)
-- Name: fk_kanji_mtm_kanji_primitive; Type: FK CONSTRAINT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY mtm_kanji_primitive
    ADD CONSTRAINT fk_kanji_mtm_kanji_primitive FOREIGN KEY (kanji_id) REFERENCES kanji(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3795 (class 2606 OID 655042)
-- Name: fk_kanji_mtm_reading; Type: FK CONSTRAINT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY mtm_kanji_reading
    ADD CONSTRAINT fk_kanji_mtm_reading FOREIGN KEY (kanji_id) REFERENCES kanji(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3915 (class 2606 OID 655048)
-- Name: fk_kanji_primitive_mtm_kanji_primitive; Type: FK CONSTRAINT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY mtm_kanji_primitive
    ADD CONSTRAINT fk_kanji_primitive_mtm_kanji_primitive FOREIGN KEY (primitive_id) REFERENCES kanji_primitive(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3796 (class 2606 OID 655053)
-- Name: fk_yomi_mtm_kanji; Type: FK CONSTRAINT; Schema: kanjidic2; Owner: postgres
--

ALTER TABLE ONLY mtm_kanji_reading
    ADD CONSTRAINT fk_yomi_mtm_kanji FOREIGN KEY (reading_id) REFERENCES kanji_reading(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = public, pg_catalog;

--
-- TOC entry 3931 (class 2606 OID 655058)
-- Name: fk_audio_has_0_1_hiragana; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY hiragana
    ADD CONSTRAINT fk_audio_has_0_1_hiragana FOREIGN KEY (audio_id) REFERENCES audio(id) MATCH FULL ON UPDATE CASCADE ON DELETE SET NULL;


--
-- TOC entry 3798 (class 2606 OID 655063)
-- Name: fk_audio_has_0_1_katakana; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY katakana
    ADD CONSTRAINT fk_audio_has_0_1_katakana FOREIGN KEY (audio_id) REFERENCES audio(id) MATCH FULL ON UPDATE CASCADE ON DELETE SET NULL;


--
-- TOC entry 3928 (class 2606 OID 655068)
-- Name: fk_audio_has_0_or_1_et_sentence; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY et_sentence
    ADD CONSTRAINT fk_audio_has_0_or_1_et_sentence FOREIGN KEY (audio_id) REFERENCES audio(id) MATCH FULL ON UPDATE CASCADE ON DELETE SET NULL;


--
-- TOC entry 3934 (class 2606 OID 655073)
-- Name: fk_audio_has_0_or_1_jp_sentence; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY jp_sentence
    ADD CONSTRAINT fk_audio_has_0_or_1_jp_sentence FOREIGN KEY (audio_id) REFERENCES audio(id) MATCH FULL ON UPDATE CASCADE ON DELETE SET NULL;


--
-- TOC entry 3926 (class 2606 OID 655078)
-- Name: fk_audio_has_0_or_1_voca_et; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phrase_et
    ADD CONSTRAINT fk_audio_has_0_or_1_voca_et FOREIGN KEY (audio_id) REFERENCES audio(id) MATCH FULL ON UPDATE CASCADE ON DELETE SET NULL;


--
-- TOC entry 3917 (class 2606 OID 655083)
-- Name: fk_audio_has_1_cf_audio_quality; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY audio
    ADD CONSTRAINT fk_audio_has_1_cf_audio_quality FOREIGN KEY (cf_audio_quality) REFERENCES cf_audio_quality(id) MATCH FULL ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 3929 (class 2606 OID 655088)
-- Name: fk_cf_origin_et_sentence; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY et_sentence
    ADD CONSTRAINT fk_cf_origin_et_sentence FOREIGN KEY (cf_origin_for_et_sentence) REFERENCES cf_origin(id) MATCH FULL ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 3923 (class 2606 OID 655093)
-- Name: fk_cf_origin_has_0_m_en_sentence; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY en_sentence
    ADD CONSTRAINT fk_cf_origin_has_0_m_en_sentence FOREIGN KEY (cf_origin_for_en_sentence) REFERENCES cf_origin(id) MATCH FULL ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 3797 (class 2606 OID 655098)
-- Name: fk_cf_origin_has_0_m_image; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY image
    ADD CONSTRAINT fk_cf_origin_has_0_m_image FOREIGN KEY (cf_origin_id) REFERENCES cf_origin(id) MATCH FULL ON UPDATE CASCADE ON DELETE SET NULL;


--
-- TOC entry 3933 (class 2606 OID 655103)
-- Name: fk_cf_origin_jm_gloss_inf; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY jm_gloss_inf
    ADD CONSTRAINT fk_cf_origin_jm_gloss_inf FOREIGN KEY (cf_origin) REFERENCES cf_origin(id) MATCH FULL ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 3927 (class 2606 OID 655108)
-- Name: fk_cf_origin_phrase_et; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phrase_et
    ADD CONSTRAINT fk_cf_origin_phrase_et FOREIGN KEY (cf_origin_for_phrase_et) REFERENCES cf_origin(id) MATCH FULL ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 3935 (class 2606 OID 655113)
-- Name: fk_cf_voca_jp_origin_jp_sentence; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY jp_sentence
    ADD CONSTRAINT fk_cf_voca_jp_origin_jp_sentence FOREIGN KEY (cf_origin_for_jp_sentence) REFERENCES cf_origin(id) MATCH FULL ON UPDATE CASCADE ON DELETE SET NULL;


--
-- TOC entry 3918 (class 2606 OID 655118)
-- Name: fk_classifier_cf_audio_quality; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cf_audio_quality
    ADD CONSTRAINT fk_classifier_cf_audio_quality FOREIGN KEY (classifier_id) REFERENCES classifier(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3919 (class 2606 OID 655123)
-- Name: fk_classifier_cf_et_sonaliik; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cf_et_sonaliik
    ADD CONSTRAINT fk_classifier_cf_et_sonaliik FOREIGN KEY (classifier_id) REFERENCES classifier(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3920 (class 2606 OID 655128)
-- Name: fk_classifier_cf_jp_category; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cf_jp_category
    ADD CONSTRAINT fk_classifier_cf_jp_category FOREIGN KEY (classifier_id) REFERENCES classifier(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3922 (class 2606 OID 655133)
-- Name: fk_classifier_cf_jp_et_trans_quality; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cf_voca_trans_quality
    ADD CONSTRAINT fk_classifier_cf_jp_et_trans_quality FOREIGN KEY (classifier_id) REFERENCES classifier(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3921 (class 2606 OID 655138)
-- Name: fk_classifier_cf_voca_jp_origin; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cf_origin
    ADD CONSTRAINT fk_classifier_cf_voca_jp_origin FOREIGN KEY (classifier_id) REFERENCES classifier(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3924 (class 2606 OID 655143)
-- Name: fk_en_sentence_has_0_1_audio; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY en_sentence
    ADD CONSTRAINT fk_en_sentence_has_0_1_audio FOREIGN KEY (audio_id) REFERENCES audio(id) MATCH FULL ON UPDATE CASCADE ON DELETE SET NULL;


--
-- TOC entry 3925 (class 2606 OID 655148)
-- Name: fk_en_sentence_has_0_1_jp_sentence; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY en_sentence
    ADD CONSTRAINT fk_en_sentence_has_0_1_jp_sentence FOREIGN KEY (jp_sentence_id) REFERENCES jp_sentence(id) MATCH FULL ON UPDATE CASCADE ON DELETE SET NULL;


--
-- TOC entry 3930 (class 2606 OID 655153)
-- Name: fk_et_sentence_has_0_1_jp_sentence; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY et_sentence
    ADD CONSTRAINT fk_et_sentence_has_0_1_jp_sentence FOREIGN KEY (jp_sentence_id) REFERENCES jp_sentence(id) MATCH FULL ON UPDATE CASCADE ON DELETE SET NULL;


--
-- TOC entry 3932 (class 2606 OID 655158)
-- Name: fk_hiragana_has_0_1_image; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY hiragana
    ADD CONSTRAINT fk_hiragana_has_0_1_image FOREIGN KEY (stroke_image_id) REFERENCES image(id) MATCH FULL ON UPDATE CASCADE ON DELETE SET NULL;


--
-- TOC entry 3936 (class 2606 OID 655163)
-- Name: fk_jp_sentence_has_0_m_jmdict_sens; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY mtm_jm_sens_jp_sentence
    ADD CONSTRAINT fk_jp_sentence_has_0_m_jmdict_sens FOREIGN KEY (jp_sentence_id) REFERENCES jp_sentence(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3799 (class 2606 OID 655168)
-- Name: fk_katakana_has_0_1_image; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY katakana
    ADD CONSTRAINT fk_katakana_has_0_1_image FOREIGN KEY (stroke_image_id) REFERENCES image(id) MATCH FULL ON UPDATE CASCADE ON DELETE SET NULL;


SET search_path = test, pg_catalog;

--
-- TOC entry 3939 (class 2606 OID 655173)
-- Name: fk_article_has_0_m_paragraph; Type: FK CONSTRAINT; Schema: test; Owner: postgres
--

ALTER TABLE ONLY article_paragraph
    ADD CONSTRAINT fk_article_has_0_m_paragraph FOREIGN KEY (article_id) REFERENCES article(id) MATCH FULL ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 3937 (class 2606 OID 655178)
-- Name: fk_article_has_1_creator_user; Type: FK CONSTRAINT; Schema: test; Owner: postgres
--

ALTER TABLE ONLY article
    ADD CONSTRAINT fk_article_has_1_creator_user FOREIGN KEY (created_by) REFERENCES ac."user"(login) MATCH FULL ON UPDATE CASCADE ON DELETE SET NULL;


--
-- TOC entry 3938 (class 2606 OID 655183)
-- Name: fk_article_has_1_last_modifier_user; Type: FK CONSTRAINT; Schema: test; Owner: postgres
--

ALTER TABLE ONLY article
    ADD CONSTRAINT fk_article_has_1_last_modifier_user FOREIGN KEY (last_modified_by) REFERENCES ac."user"(login) MATCH FULL ON UPDATE CASCADE ON DELETE SET NULL;


--
-- TOC entry 3940 (class 2606 OID 655188)
-- Name: fk_audio_has_0_or_1_article_paragraph; Type: FK CONSTRAINT; Schema: test; Owner: postgres
--

ALTER TABLE ONLY article_paragraph
    ADD CONSTRAINT fk_audio_has_0_or_1_article_paragraph FOREIGN KEY (audio_id) REFERENCES public.audio(id) MATCH FULL ON UPDATE CASCADE ON DELETE SET NULL;


--
-- TOC entry 4155 (class 0 OID 0)
-- Dependencies: 14
-- Name: jmdict_en; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA jmdict_en FROM PUBLIC;
REVOKE ALL ON SCHEMA jmdict_en FROM postgres;
GRANT ALL ON SCHEMA jmdict_en TO postgres;
GRANT ALL ON SCHEMA jmdict_en TO PUBLIC;


--
-- TOC entry 4157 (class 0 OID 0)
-- Dependencies: 15
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


-- Completed on 2015-04-16 23:01:15 EEST

--
-- PostgreSQL database dump complete
--

